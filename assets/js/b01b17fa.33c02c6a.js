"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[6975],{16624:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Csharp/Collections/Queue","title":"Queues","description":"","source":"@site/docs/04-Csharp/03-Collections/07-Queue.md","sourceDirName":"04-Csharp/03-Collections","slug":"/Csharp/Collections/Queue","permalink":"/my-documentation/docs/Csharp/Collections/Queue","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/04-Csharp/03-Collections/07-Queue.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"title":"Queues","description":"","sidebar_position":7,"language":"C#","tags":[],"draft":false},"sidebar":"csharpSidebar","previous":{"title":"Stacks","permalink":"/my-documentation/docs/Csharp/Collections/Stack"},"next":{"title":"Hashset","permalink":"/my-documentation/docs/Csharp/Collections/Hashset"}}');var u=t(74848),o=t(28453);const r={title:"Queues",description:"",sidebar_position:7,language:"C#",tags:[],draft:!1},i=void 0,a={},l=[];function c(e){const n={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(n.p,{children:"A queue is a First In, First Out (FIFO) collection of elements where the first element that goes into a queue is also the first element that comes out."}),"\n",(0,u.jsx)(n.p,{children:"Inserting an element into a queue is referred to as Enqueue. Deleting an element from a queue is referred to as Dequeue.\nQueues are used whenever we need to manage objects in order starting with the first one in."}),"\n",(0,u.jsxs)(n.p,{children:["The C# generic collection ",(0,u.jsx)(n.code,{children:"Queue<T>"})," class requires that all elements be of the same type T."]}),"\n",(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{className:"language-c",children:'using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Erstellen einer Queue vom Typ int\n        Queue<int> queue = new Queue<int>();\n\n        // Hinzuf\xfcgen von Elementen (Enqueue)\n        queue.Enqueue(10);\n        queue.Enqueue(20);\n        queue.Enqueue(30);\n\n        // Ausgabe der Anzahl der Elemente\n        Console.WriteLine($"Anzahl der Elemente: {queue.Count}");\n\n        // Zugriff auf das vorderste Element ohne es zu entfernen (Peek)\n        Console.WriteLine($"Vorderstes Element (Peek): {queue.Peek()}");\n\n        // Entfernen des vordersten Elements (Dequeue)\n        Console.WriteLine($"Entferntes Element (Dequeue): {queue.Dequeue()}");\n\n        // Ausgabe des aktuellen Queue-Inhalts\n        Console.WriteLine("\\nQueue-Inhalt nach Dequeue:");\n        foreach (int item in queue)\n        {\n            Console.WriteLine(item);\n        }\n\n        // Verwenden von TryPeek und TryDequeue\n        if (queue.TryPeek(out int frontElement))\n        {\n            Console.WriteLine($"\\nVorderstes Element (TryPeek): {frontElement}");\n        }\n\n        if (queue.TryDequeue(out int dequeuedElement))\n        {\n            Console.WriteLine($"Entferntes Element (TryDequeue): {dequeuedElement}");\n        }\n\n        // Queue leeren\n        queue.Clear();\n        Console.WriteLine($"\\nAnzahl der Elemente nach Clear: {queue.Count}");\n    }\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,u.jsx)(n,{...e,children:(0,u.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var s=t(96540);const u={},o=s.createContext(u);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(u):e.components||u:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);