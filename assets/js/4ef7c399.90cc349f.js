"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[5203],{6681:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>l,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"csharp/documentation","title":"Documentation","description":"","source":"@site/docs/04-csharp/documentation.md","sourceDirName":"04-csharp","slug":"/csharp/documentation","permalink":"/my-documentation/docs/csharp/documentation","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/04-csharp/documentation.md","tags":[],"version":"current","sidebarPosition":14,"frontMatter":{"description":"","sidebar_position":14,"title":"Documentation"},"sidebar":"csharpSidebar","previous":{"title":"Coding Standards","permalink":"/my-documentation/docs/csharp/coding-standards"}}');var r=t(4848),o=t(8453);const c={description:"",sidebar_position:14,title:"Documentation"},i=void 0,a={},d=[];function h(e){const n={a:"a",br:"br",hr:"hr",p:"p",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/andredarcie/csharp-quick-reference-guide?tab=readme-ov-file",children:(0,r.jsx)(n.strong,{children:"C# Quick-Reference [Github]"})}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsxs)(n.a,{href:"https://github.com/LabinatorSolutions/csharp-cheat-sheet",children:[(0,r.jsx)(n.strong,{children:"C# Cheat Sheet [Github"}),"]"]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-types",children:(0,r.jsx)(n.strong,{children:"Value Types"})}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types",children:(0,r.jsx)(n.strong,{children:"Integral numeric Types"})}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/floating-point-numeric-types",children:(0,r.jsx)(n.strong,{children:"Floating Point numeric Types"})}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-tuples",children:(0,r.jsx)(n.strong,{children:"Tuple types"})}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/enum",children:(0,r.jsx)(n.strong,{children:"Enumeration Types"})}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/struct",children:(0,r.jsx)(n.strong,{children:"Structure Types"})})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/strings/",children:(0,r.jsx)(n.strong,{children:"Strings"})}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.array?view=net-9.0",children:(0,r.jsx)(n.strong,{children:"Array Class"})}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/standard/generics/collections",children:(0,r.jsx)(n.strong,{children:"Generic collections"})}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/types/casting-and-type-conversions",children:(0,r.jsx)(n.strong,{children:"Casting and Type Conversions"})}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/de-de/dotnet/csharp/language-reference/language-specification/conversions#103-explicit-conversions",children:(0,r.jsx)(n.strong,{children:"Explizite Konvertierung"})})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/",children:(0,r.jsx)(n.strong,{children:"Operators and Expressions"})}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/statements",children:(0,r.jsx)(n.strong,{children:"Statements"})})]})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var s=t(6540);const r={},o=s.createContext(r);function c(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);