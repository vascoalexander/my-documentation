"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[1690],{55431:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"Csharp/Collections/Arrays","title":"Arrays","description":"","source":"@site/docs/04-Csharp/03-Collections/01-Arrays.md","sourceDirName":"04-Csharp/03-Collections","slug":"/Csharp/Collections/Arrays","permalink":"/my-documentation/docs/Csharp/Collections/Arrays","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/04-Csharp/03-Collections/01-Arrays.md","tags":[{"inline":true,"label":"sort","permalink":"/my-documentation/docs/tags/sort"},{"inline":true,"label":"search","permalink":"/my-documentation/docs/tags/search"},{"inline":true,"label":"reverse","permalink":"/my-documentation/docs/tags/reverse"},{"inline":true,"label":"ForEach","permalink":"/my-documentation/docs/tags/for-each"},{"inline":true,"label":"LINQ","permalink":"/my-documentation/docs/tags/linq"},{"inline":true,"label":"jaggedArray","permalink":"/my-documentation/docs/tags/jagged-array"}],"version":"current","sidebarPosition":1,"frontMatter":{"created":"2025-02-23, 11:45","language":"C#","title":"Arrays","description":"","sidebar_position":1,"tags":["sort","search","reverse","ForEach","LINQ","jaggedArray"]},"sidebar":"csharpSidebar","previous":{"title":"Collections","permalink":"/my-documentation/docs/category/collections"},"next":{"title":"Lists","permalink":"/my-documentation/docs/Csharp/Collections/Lists"}}');var t=r(74848),i=r(28453);const s={created:"2025-02-23, 11:45",language:"C#",title:"Arrays",description:"",sidebar_position:1,tags:["sort","search","reverse","ForEach","LINQ","jaggedArray"]},o=void 0,l={},c=[{value:"Jagged Array Deklaration",id:"jagged-array-deklaration",level:2},{value:"LINQ Array Methods",id:"linq-array-methods",level:2},{value:"Sort, Reverse or Search (with ForEach())",id:"sort-reverse-or-search-with-foreach",level:2},{value:"Slicing eines Arrays",id:"slicing-eines-arrays",level:2},{value:"Duplikate entfernen",id:"duplikate-entfernen",level:2},{value:"Vorkommen z\xe4hlen",id:"vorkommen-z\xe4hlen",level:2},{value:"Print 2D Array to console",id:"print-2d-array-to-console",level:2},{value:"Fill 2D Array with Random Numbers",id:"fill-2d-array-with-random-numbers",level:2},{value:"Merge Arrays",id:"merge-arrays",level:2},{value:"Array of Objects",id:"array-of-objects",level:2},{value:"Array of Anonymous Objects",id:"array-of-anonymous-objects",level:2},{value:"Related Links",id:"related-links",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"An array is a data structure that contains a number of variables that are accessed through computed indices.\nThe variables contained in an array, also called the elements of the array, are all of the same type, and this type is called the element type of the array."}),"\n",(0,t.jsx)(n.p,{children:"Array types are reference types, and the declaration of an array variable simply sets aside space for a reference to an array instance.\nActual array instances are created dynamically at run-time using the new operator. The new operation specifies the length of the new array instance,\nwhich is then fixed for the lifetime of the instance. The indices of the elements of an array range from 0 to Length - 1.\nThe new operator automatically initializes the elements of an array to their default value, which,\nfor example, is zero for all numeric types and null for all reference types."}),"\n",(0,t.jsx)(n.h2,{id:"jagged-array-deklaration",children:"Jagged Array Deklaration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:"int[][] anotherJaggedArray = new int[][]\n{  \n\tnew int[] {1,8,2,7,9},  \n\tnew int[] {2,4,6},  \n\tnew int[] {33,42}  \n};  \n  \nint x = anotherJaggedArray[2][1];  \nConsole.WriteLine(x); // Outputs => 42\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"linq-array-methods",children:"LINQ Array Methods"}),"\n",(0,t.jsx)(n.p,{children:"The Array class implements the IEnumerable interface, so you can LINQ extension methods such as Max(), Min(), Sum(), Average() and many others."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:"public static void Main(string[] args)\n{\n\tint[] integersArray = new int[5]{80, 20, 35, 18, 9};\n\n\tConsole.WriteLine(integersArray.Max());\n\tConsole.WriteLine(integersArray.Min());\n\tConsole.WriteLine(integersArray.Sum());\n\tConsole.WriteLine(integersArray.Average());\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"sort-reverse-or-search-with-foreach",children:"Sort, Reverse or Search (with ForEach())"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:"int[] integersArray = {20, 9, 16, 50, 3};\n\n// SORT\nArray.Sort(integersArray);  \nArray.ForEach<int>(integersArray, n => Console.WriteLine(n));\n\n// REVERSE\nArray.Reverse(integersArray);  \nArray.ForEach<int>(integersArray, n => Console.WriteLine(n));\n\n// SEARCH\nConsole.WriteLine(Array.BinarySearch(integersArray, 9));\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"slicing-eines-arrays",children:"Slicing eines Arrays"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Index"}),": Mit ",(0,t.jsx)(n.code,{children:"^"})," kannst Du vom Ende her indexieren (z.\u202fB. ",(0,t.jsx)(n.code,{children:"^1"})," f\xfcr das letzte Element)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Range"}),": Mit ",(0,t.jsx)(n.code,{children:".."})," definierst Du einen Bereich. Dabei ist das Ende exklusiv."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'int[] zahlen = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n\n// Teilausschnitt von Index 2 bis 4 (5 ist exklusive)\nint[] slice1 = zahlen[2..5]; // Enth\xe4lt {2, 3, 4}\n\n// Teilausschnitt vom Index 5 bis zum Ende\nint[] slice2 = zahlen[5..];  // Enth\xe4lt {5, 6, 7, 8, 9}\n\n// Letztes Element des Arrays\nint letztesElement = zahlen[^1];  // ^1 bedeutet "1. von hinten", also 9\n\n// Teilausschnitt der letzten 3 Elemente\nint[] slice3 = zahlen[^3..]; // Enth\xe4lt {7, 8, 9}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"duplikate-entfernen",children:"Duplikate entfernen"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'Console.Write("W\xf6rter eingeben: ");  \nstring[] text = Console.ReadLine().Split(" ");\n\nstring[] textOhneDuplikate = text.Distinct().ToArray();\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"vorkommen-z\xe4hlen",children:"Vorkommen z\xe4hlen"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:"static int CountOccurrences(int[,] array, int target)  \n{  \n    int count = 0;  \n    foreach (int value in array)  \n    {        \n\t    if (value == target)  \n            count++;  \n    }    \n    return count;  \n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"print-2d-array-to-console",children:"Print 2D Array to console"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'static void PrintArray(int[,] array)\n{\n    for (int i = 0; i < array.GetLength(0); i++)\n    {\n        for (int j = 0; j < array.GetLength(1); j++)\n            Console.Write($"{array[i, j]} ");\n        Console.WriteLine();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"fill-2d-array-with-random-numbers",children:"Fill 2D Array with Random Numbers"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:"static void FillArray(int[,] array, int rows, int cols)\n{\n    Random rnd = new Random();\n    for (int i = 0; i < rows; i++)\n        for (int j = 0; j < cols; j++)\n            array[i, j] = rnd.Next(1, 10); \n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"merge-arrays",children:"Merge Arrays"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:"// Array copy: copies a range from a source array to a destination array with\n// optional start and end indices\nstatic int[] MergeArray(int[] array1, int[] array2)\n{\n    int[] arrayMerged = new int[array1.Length + array2.Length];\n    Array.Copy(array1, arrayMerged, array1.Length);\n    Array.Copy(array2, 0, arrayMerged, array1.Length, array2.Length);\n    Array.Sort(arrayMerged);\n    return arrayMerged;\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:"// lange variante ohne Array.Copy\n// Arrays m\xfcssen vorsortiert sein\nstatic int[] MergeArray(int[] array1, int[] array2)\n{\n    int[] arrayMerged = new int[array1.Length + array2.Length];\n    int indexMerged = 0;\n    int indexArray1 = 0;\n    int indexArray2 = 0;\n\n    while (indexArray1 < array1.Length && indexArray2 < array2.Length)\n        // solange keines der beiden arrays komplett durchlaufen wurde\n    {\n        if (array1[indexArray1] < array2[indexArray2])\n            arrayMerged[indexMerged++] = array1[indexArray1++];\n        else\n            arrayMerged[indexMerged++] = array2[indexArray2++];\n    }\n\n    // schreibe das array dessen index nicht bis zum ende durchlaufen wurde\n    while (indexArray1 < array1.Length)\n        arrayMerged[indexMerged++] = array1[indexArray1++];\n\n    while (indexArray2 < array2.Length)\n        arrayMerged[indexMerged++] = array2[indexArray2++];\n\n    return arrayMerged;\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"array-of-objects",children:"Array of Objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'Car[] garage = new Car[3];\n\nCar car1 = new Car("Volvo");\nCar car2 = new Car("Ford");\nCar car3 = new Car("Opel");\n\ngarage[0] = car1;\ngarage[1] = car2;\ngarage[2] = car3;\n\nConsole.WriteLine(garage[1].model);\n// output Ford\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"array-of-anonymous-objects",children:"Array of Anonymous Objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'Car[] garage = { new Car("Volvo"), new Car("Ford"), new Car("Opel") };\n\nforeach (Car car in garage)\n{\n\tConsole.Write($"{car.model} ");\n}\n// output: Volvo Ford Opel \n'})}),"\n",(0,t.jsx)(n.h2,{id:"related-links",children:"Related Links"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.array?view=net-9.0",children:(0,t.jsx)(n.strong,{children:"Microsoft Docs - Array Class"})})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var a=r(96540);const t={},i=a.createContext(t);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);