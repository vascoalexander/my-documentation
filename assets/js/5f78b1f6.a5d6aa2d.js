"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[9464],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var o=n(96540);const r={},s=o.createContext(r);function i(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:t},e.children)}},99476:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"Csharp/IO-Operations/Konsolenausgabe","title":"Konsolenausgabe","description":"","source":"@site/docs/04-Csharp/05-IO-Operations/04-Konsolenausgabe.md","sourceDirName":"04-Csharp/05-IO-Operations","slug":"/Csharp/IO-Operations/Konsolenausgabe","permalink":"/my-documentation/docs/Csharp/IO-Operations/Konsolenausgabe","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/04-Csharp/05-IO-Operations/04-Konsolenausgabe.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"created":"2025-03-02, 08:58","title":"Konsolenausgabe","description":"","sidebar_position":4,"draft":false},"sidebar":"csharpSidebar","previous":{"title":"User Input","permalink":"/my-documentation/docs/Csharp/IO-Operations/User-Input"},"next":{"title":"LINQ","permalink":"/my-documentation/docs/category/linq"}}');var r=n(74848),s=n(28453);const i={created:"2025-03-02, 08:58",title:"Konsolenausgabe",description:"",sidebar_position:4,draft:!1},a=void 0,l={},c=[{value:"Farbiger Text",id:"farbiger-text",level:2},{value:"Bold / Italic Text",id:"bold--italic-text",level:2}];function u(e){const t={code:"code",h2:"h2",hr:"hr",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"farbiger-text",children:"Farbiger Text"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'public static void PrintColor(string text, ConsoleColor color, bool newline = true)  \n{  \n    Console.ForegroundColor = color;  \n    if (newline)  \n        Console.WriteLine(text);  \n    else  \n        Console.Write(text);  \n    Console.ResetColor();  \n}\n\n// return string\npublic static string FormatColor(string text, ConsoleColor color)  \n{  \n    return $"\\u001b[38;5;{(int)color}m" + text + "\\u001b[0m";  \n}\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"bold--italic-text",children:"Bold / Italic Text"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'public static string FormatItalic(string text)  \n{  \n    return "\\u001b[3m" + text + "\\u001b[0m";  \n}\n\npublic static string FormatBold(string text)  \n{  \n    return "\\u001b[1m" + text + "\\u001b[0m"; }\n'})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);