"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[7345],{70460:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Csharp/Collections/Sorted-Lists","title":"Sorted Lists","description":"","source":"@site/docs/04-Csharp/03-Collections/04-Sorted-Lists.md","sourceDirName":"04-Csharp/03-Collections","slug":"/Csharp/Collections/Sorted-Lists","permalink":"/my-documentation/docs/Csharp/Collections/Sorted-Lists","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/04-Csharp/03-Collections/04-Sorted-Lists.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Sorted Lists","description":"","sidebar_position":4,"language":"C#","tags":[],"draft":false},"sidebar":"csharpSidebar","previous":{"title":"Linked Lists","permalink":"/my-documentation/docs/Csharp/Collections/Linked-Lists"},"next":{"title":"Dictionaries","permalink":"/my-documentation/docs/Csharp/Collections/Dictionaries"}}');var i=t(74848),r=t(28453);const o={title:"Sorted Lists",description:"",sidebar_position:4,language:"C#",tags:[],draft:!1},a=void 0,l={},c=[];function d(e){const n={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["A sorted list is a collection of key/value pairs that are automatically sorted by key. A key can be used to access its corresponding value in the sorted list.\nThe C# generic collection ",(0,i.jsx)(n.code,{children:"SortedList<K, V>"})," class requires all element key/value pairs to be of the same type K, V.\nDuplicate keys are not permitted, which ensures that every key/value pair is unique."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Erstellen einer SortedList (sortiert nach Schl\xfcsseln)\n        SortedList<string, int> sortedList = new SortedList<string, int>();\n\n        // Hinzuf\xfcgen von Schl\xfcssel-Wert-Paaren\n        sortedList.Add("Clara", 30);\n        sortedList.Add("Anna", 25);\n        sortedList.Add("Bernd", 35);\n\n        // Zugriff auf ein Element per Schl\xfcssel\n        Console.WriteLine($"Anna ist {sortedList["Anna"]} Jahre alt.");\n\n        // Iteration \xfcber die SortedList (automatisch sortiert nach Schl\xfcssel)\n        Console.WriteLine("\\nSortedList Eintr\xe4ge:");\n        foreach (KeyValuePair<string, int> pair in sortedList)\n        {\n            Console.WriteLine($"{pair.Key}: {pair.Value}");\n        }\n\n        // Entfernen eines Elements per Schl\xfcssel\n        sortedList.Remove("Bernd");\n\n        // \xdcberpr\xfcfen, ob ein Schl\xfcssel existiert\n        if (sortedList.ContainsKey("Clara"))\n        {\n            Console.WriteLine("\\nClara ist in der SortedList vorhanden.");\n        }\n\n        // Aktualisieren eines Wertes\n        sortedList["Anna"] = 26;\n\n        // Zugriff auf Schl\xfcssel und Werte als separate Sammlungen\n        IList<string> keys = sortedList.Keys;\n        IList<int> values = sortedList.Values;\n\n        Console.WriteLine("\\nSchl\xfcssel:");\n        foreach (var key in keys)\n        {\n            Console.WriteLine(key);\n        }\n\n        Console.WriteLine("\\nWerte:");\n        foreach (var value in values)\n        {\n            Console.WriteLine(value);\n        }\n\n        // Anzahl der Elemente in der SortedList\n        Console.WriteLine($"\\nAnzahl der Elemente: {sortedList.Count}");\n\n        // L\xf6schen aller Eintr\xe4ge\n        sortedList.Clear();\n        Console.WriteLine($"\\nAnzahl der Elemente nach Clear: {sortedList.Count}");\n    }\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(96540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);