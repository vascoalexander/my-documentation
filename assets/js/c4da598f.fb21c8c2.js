"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[2403],{28453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>l});var i=t(96540);const s={},r=i.createContext(s);function d(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(r.Provider,{value:n},e.children)}},59442:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>d,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"Csharp/Collections/Linked-Lists","title":"Linked Lists","description":"","source":"@site/docs/04-Csharp/03-Collections/03-Linked-Lists.md","sourceDirName":"04-Csharp/03-Collections","slug":"/Csharp/Collections/Linked-Lists","permalink":"/my-documentation/docs/Csharp/Collections/Linked-Lists","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/04-Csharp/03-Collections/03-Linked-Lists.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Linked Lists","description":"","sidebar_position":3,"language":"C#","tags":[],"draft":false},"sidebar":"csharpSidebar","previous":{"title":"Lists","permalink":"/my-documentation/docs/Csharp/Collections/Lists"},"next":{"title":"Sorted Lists","permalink":"/my-documentation/docs/Csharp/Collections/Sorted-Lists"}}');var s=t(74848),r=t(28453);const d={title:"Linked Lists",description:"",sidebar_position:3,language:"C#",tags:[],draft:!1},l=void 0,o={},a=[{value:"Add Items",id:"add-items",level:2},{value:"Knoten mit bestimmten Wert suchen",id:"knoten-mit-bestimmten-wert-suchen",level:2},{value:"Elemente entfernen",id:"elemente-entfernen",level:2},{value:"Anzahl der Elemente",id:"anzahl-der-elemente",level:2},{value:"Iteration mittels Knotenreferenz",id:"iteration-mittels-knotenreferenz",level:2}];function c(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Eine Linked List ist eine lineare Datensammlung, bei der die Elemente (Knoten) nicht zusammenh\xe4ngend im Speicher abgelegt sind.\nJeder Knoten enth\xe4lt einen Wert und einen Verweis auf den n\xe4chsten Knoten in der Liste. Dies unterscheidet sie von Arrays,\nbei denen die Elemente direkt aufeinander folgen."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Vorteile"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flexibilit\xe4t bei der Gr\xf6\xdfe:"})," Linked Lists k\xf6nnen dynamisch wachsen oder schrumpfen, da Knoten bei Bedarf hinzugef\xfcgt oder\nentfernt werden k\xf6nnen."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Effizientes Einf\xfcgen und Entfernen:"})," Das Einf\xfcgen oder Entfernen von Elementen an beliebiger Stelle ist in der Regel schneller als bei Arrays, da keine Elemente verschoben werden m\xfcssen."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Nachteile"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Zugriffszeit:"})," Der Zugriff auf ein Element an einer bestimmten Position kann l\xe4nger dauern als bei Arrays, da die Liste vom Anfang bis zum gew\xfcnschten Element durchlaufen werden muss."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Zus\xe4tzlicher Speicherbedarf:"})," Jeder Knoten ben\xf6tigt zus\xe4tzlichen Speicher f\xfcr den Verweis auf den n\xe4chsten Knoten."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"add-items",children:"Add Items"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'var linkedList = new LinkedList<string>();\n\nlinkedList.AddFirst("Clara");     // Element am Anfang hinzuf\xfcgen\nlinkedList.AddLast("Anna");       // Element am Ende hinzuf\xfcgen\n'})}),"\n",(0,s.jsx)(n.h2,{id:"knoten-mit-bestimmten-wert-suchen",children:"Knoten mit bestimmten Wert suchen"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'LinkedListNode<string> nodeBernd = linkedList.Find("Bernd");\nif (nodeBernd != null)\n{\n\t// Hinzuf\xfcgen eines Elements nach einem bekannten Knoten\n\tlinkedList.AddAfter(nodeBernd, "Dieter");\n\n\t// Hinzuf\xfcgen eines Elements vor einem bekannten Knoten\n\tlinkedList.AddBefore(nodeBernd, "Eva");\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"elemente-entfernen",children:"Elemente entfernen"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'// Entfernen eines Elements per Wert\nlinkedList.Remove("Clara");\n\n// Entfernen des ersten und letzten Knotens\nlinkedList.RemoveFirst();\nlinkedList.RemoveLast();\n'})}),"\n",(0,s.jsx)(n.h2,{id:"anzahl-der-elemente",children:"Anzahl der Elemente"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'Console.WriteLine($"\\nAnzahl der Elemente: {linkedList.Count}");\n'})}),"\n",(0,s.jsx)(n.h2,{id:"iteration-mittels-knotenreferenz",children:"Iteration mittels Knotenreferenz"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'Console.WriteLine("\\nIteration mit LinkedListNode<T>:");\nfor (LinkedListNode<string> node = linkedList.First; node != null; node = node.Next)\n{\n\tConsole.WriteLine(node.Value);\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);