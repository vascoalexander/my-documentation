"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[4339],{28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>a});var i=n(96540);const s={},r=i.createContext(s);function l(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:t},e.children)}},73514:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/git-rebase-40aeaad2bba2f6906d4a27b90ce3087b.svg"},91457:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/soft-reset-d188a44e6f7c5b7427a0671a43333647.svg"},92446:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/staging-4cf18707ff001af53fd1bf8d7d025371.svg"},99551:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"Tools/GIT","title":"GIT","description":"GitHub Documentation","source":"@site/docs/08-Tools/01-GIT.mdx","sourceDirName":"08-Tools","slug":"/Tools/GIT","permalink":"/my-documentation/docs/Tools/GIT","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/08-Tools/01-GIT.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"draft":false,"title":"GIT"},"sidebar":"toolsSidebar","next":{"title":"Docker","permalink":"/my-documentation/docs/Tools/Docker"}}');var s=n(74848),r=n(28453);const l={draft:!1,title:"GIT"},a=void 0,c={},o=[{value:"Basics",id:"basics",level:2},{value:"Command Quicklist",id:"command-quicklist",level:3},{value:"The Staging Area",id:"the-staging-area",level:3},{value:"UNSTAGE (Reverse) A FILE / ALL FILES",id:"unstage-reverse-a-file--all-files",level:4},{value:"DISCARD LOCAL UNCOMMITTED CHANGES",id:"discard-local-uncommitted-changes",level:4},{value:"Common Operations",id:"common-operations",level:2},{value:"Undoing local changes (before Staging)",id:"undoing-local-changes-before-staging",level:3},{value:"Undoing staged changes (before commiting)",id:"undoing-staged-changes-before-commiting",level:3},{value:"Undoing committed changes",id:"undoing-committed-changes",level:3},{value:"Removing commits from a Branch",id:"removing-commits-from-a-branch",level:3},{value:"Amend (add) to the previous commit",id:"amend-add-to-the-previous-commit",level:3},{value:"Move (and stage) Files",id:"move-and-stage-files",level:3},{value:"Add a local branch that tracks a remote branch.",id:"add-a-local-branch-that-tracks-a-remote-branch",level:3},{value:"git pull vs git fetch",id:"git-pull-vs-git-fetch",level:3},{value:"Change/Set remote URL",id:"changeset-remote-url",level:3},{value:"Rebase, Reset, Merge",id:"rebase-reset-merge",level:2},{value:"git reset --soft",id:"git-reset---soft",level:3},{value:"git reset --hard",id:"git-reset---hard",level:3},{value:"git rebase",id:"git-rebase",level:3},{value:"git merge",id:"git-merge",level:3},{value:"When to Rebase, When to Merge?",id:"when-to-rebase-when-to-merge",level:3},{value:"Misc Operations",id:"misc-operations",level:2},{value:"Adding empty directories",id:"adding-empty-directories",level:3},{value:"Remove a directory",id:"remove-a-directory",level:3},{value:".gitignore FILE",id:"gitignore-file",level:2},{value:"Install &amp; Config Script",id:"install--config-script",level:2}];function d(e){const t={a:"a",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://docs.github.com/en",children:"GitHub Documentation"}),(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.a,{href:"https://skills.github.com/",children:"GitHub Skills"}),(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.a,{href:"https://git-school.github.io/visualizing-git/",children:"Git Visualization"}),(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.a,{href:"https://www.toptal.com/developers/gitignore",children:"Generate gitignore file online"})]}),"\n",(0,s.jsx)(t.h2,{id:"basics",children:"Basics"}),"\n",(0,s.jsx)(t.h3,{id:"command-quicklist",children:"Command Quicklist"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Command"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Short Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git init"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Initialize repository"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git clone [repo_url]"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Clone repository"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git status"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"View repository status"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git add [file]"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Stage changes of [file]"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git add ."})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Stage all changes"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git reset [file]"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Unstage a file while retaining other changes"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git rm [file]"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Delete file and stage the removal"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:'git commit -m "message"'})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Commit Changes"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git branch"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"List branches"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git branch [branch]"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Create branch"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git checkout [branch]"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Switch to branch"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git checkout -b [new branchname]"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Create a branch and switch to it"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git merge [branch]"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Merge branch"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git remote -v"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"View remotes"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git remote set-url origin [NEW_GIT_URL_HERE]"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Set origin url for remote repo"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git pull origin [branch]"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Pull changes"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git push origin [branch]"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Push changes"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git log"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"View commit history"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git log --oneline"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"View short commit history"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git log --oneline --decorate --graph --all"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"View commit history with graphical layout (q to quit)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git revert [commit]"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Revert commit"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git reset [commit]"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Reset to commit"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git reset --hard [commit]"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Clear staging area, rewrite working tree from [commit]"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git diff"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Diff of what is changed but not staged"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git diff --staged"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"diff of what is staged but not committed"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git tag"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"List tags"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:'git config --global user.name "name"'})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Set global username"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:'git config --global user.email "email"'})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Set global email"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git stash"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Speichert uncommittete \xc4nderungen im Stash und setzt das Arbeitsverzeichnis auf den letzten commit zur\xfcck"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git stash list"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"gestashte \xc4nderungen anzeigen"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git stash apply"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Anwendung des letzten Stashes"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git stash pop"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Anwendung des letzten Stashes und l\xf6schung aus der Liste"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsxs)(t.strong,{children:["git stash apply ",(0,s.jsx)(t.code,{children:"stash@{n}"})]})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"wendet den n-ten Stash der Liste an"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"git stash clear"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"leert die Liste"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsxs)(t.strong,{children:["git stash branch neue-branch ",(0,s.jsx)(t.code,{children:"stash@{n}"})]})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Erstellt einen neuen Branch mit den gestashten \xc4nderungen"})]})]})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",metastring:'title="github repository URL\'s"',children:"SSH: git@github.com:username/my-repository.git\nHTTPS: https://github.com/username/my-repository.git\n"})}),"\n",(0,s.jsx)(t.h3,{id:"the-staging-area",children:"The Staging Area"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Working Directory"}),": The working directory is where you make edits and create new files. It represents the current state of your project."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Staging Area"}),": Once you've made changes in your working directory that you wish to save, you first add these changes to the staging area. This area captures a snapshot of the modifications and prepares them for committing."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Repository"}),": When you're ready to finalize your changes, you commit the modifications from the staging area. This action saves a permanent snapshot of the changes in your Git repository, along with metadata such as who made the changes and when."]}),"\n"]}),"\n",(0,s.jsx)("div",{class:"img-center img-200",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Staging",src:n(92446).A+""})})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git add <file>    # adds changes in a file to the staging area\ngit add .         # adds all changes to the staging area\ngit diff          # shows unstaged changes in the working directory\ngit dif --staged  # shows changes that are staged for the next commit\ngit commit        # commits the staged changes\ngit reset <file>  # removes file from the staging area\n"})}),"\n",(0,s.jsx)(t.h4,{id:"unstage-reverse-a-file--all-files",children:"UNSTAGE (Reverse) A FILE / ALL FILES"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git restore --staged <file-path>   # unstage specified file\ngit restore --staged .             # unstage all files\n"})}),"\n",(0,s.jsx)(t.h4,{id:"discard-local-uncommitted-changes",children:"DISCARD LOCAL UNCOMMITTED CHANGES"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git restore .            # discard all uncommitted changes\ngit restore path/to/file # discard changes to specified file\ngit checkout -- .        # revert working directory to last commit\n"})}),"\n",(0,s.jsx)(t.h2,{id:"common-operations",children:"Common Operations"}),"\n",(0,s.jsx)(t.h3,{id:"undoing-local-changes-before-staging",children:"Undoing local changes (before Staging)"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"git checkout file-with-unwanted-changes.txt\n"})}),"\n",(0,s.jsx)(t.p,{children:"Checks out to the repository version of the file."}),"\n",(0,s.jsx)(t.h3,{id:"undoing-staged-changes-before-commiting",children:"Undoing staged changes (before commiting)"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"git reset HEAD staged-file-with-unwanted-changes.txt\n"})}),"\n",(0,s.jsx)(t.p,{children:"Removes the file from the Staging Area. Changes in the file are still there (in the working directory), but now unstaged. To remove the changes checkout the file (see above)."}),"\n",(0,s.jsx)(t.h3,{id:"undoing-committed-changes",children:"Undoing committed changes"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"git revert HEAD\n"})}),"\n",(0,s.jsx)(t.p,{children:"Reverts the last commit (does not delete the last commit)."}),"\n",(0,s.jsx)(t.h3,{id:"removing-commits-from-a-branch",children:"Removing commits from a Branch"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"git reset --hard hashOfCommit\n"})}),"\n",(0,s.jsx)(t.p,{children:"Use the hash or a tag to reset the head to. All commits up to this point will not be shown in the log.\nIf a deleted commit has been tagged before it will show up when log is used with the --all argument. To delete it completely the tag has to be removed:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"git tag -d tag-to-remove\n"})}),"\n",(0,s.jsx)(t.h3,{id:"amend-add-to-the-previous-commit",children:"Amend (add) to the previous commit"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'git commit --amend -m "Add this commit to the last made commit"\n'})}),"\n",(0,s.jsx)(t.h3,{id:"move-and-stage-files",children:"Move (and stage) Files"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"git mv source destination\n"})}),"\n",(0,s.jsx)(t.p,{children:"Same as mv command, but the result is added to the staging area directly."}),"\n",(0,s.jsx)(t.h3,{id:"add-a-local-branch-that-tracks-a-remote-branch",children:"Add a local branch that tracks a remote branch."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"git branch --track greet origin/greet\n"})}),"\n",(0,s.jsx)(t.p,{children:"Creates and tracks the specified branch from origin on the remote repository."}),"\n",(0,s.jsx)(t.h3,{id:"git-pull-vs-git-fetch",children:"git pull vs git fetch"}),"\n",(0,s.jsx)(t.p,{children:"git fetch is used to download updates from a remote repository to your local repository without merging or modifying your local branches.\nThis command allows you to review the changes before integrating them into your local branch."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git fetch <remote>\n"})}),"\n",(0,s.jsx)(t.p,{children:"git pull is a combination of git fetch and git merge. It downloads changes and merges them into the current branch."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git pull <remote> <branch>\n"})}),"\n",(0,s.jsx)(t.h3,{id:"changeset-remote-url",children:"Change/Set remote URL"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git remote -v                        # verify current remote repository\ngit remote set-url origin <new-url>  # set new url of origin\ngit remote -v                        # verify new remote repository url\ngit fetch origin                     # sync local repository to new remote\n"})}),"\n",(0,s.jsx)(t.h2,{id:"rebase-reset-merge",children:"Rebase, Reset, Merge"}),"\n",(0,s.jsx)(t.h3,{id:"git-reset---soft",children:"git reset --soft"}),"\n",(0,s.jsxs)(t.p,{children:["When you use git reset --soft, Git moves the ",(0,s.jsx)(t.strong,{children:"HEAD"})," pointer to the specified commit while leaving the staging area and working directory unchanged.\nThis means that all changes from commits after the specified one will remain in the staging area, ready to be recommitted."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git reset --soft HEAD~1\n"})}),"\n",(0,s.jsx)(t.p,{children:"This command moves the HEAD pointer one commit back. Changes made in the latest commit are transferred to the staging area:"}),"\n",(0,s.jsx)("div",{class:"img-center img-400",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Soft-Reset",src:n(91457).A+""})})}),"\n",(0,s.jsx)(t.h3,{id:"git-reset---hard",children:"git reset --hard"}),"\n",(0,s.jsx)(t.p,{children:"The git reset --hard option can be thought of as a nuclear option.\nIt moves the HEAD pointer to the specified commit, updates the staging area to match this commit,\nand also adjusts the working directory to exactly match the commit.\nAny changes from commits made after the specified commit will be completely discarded."}),"\n",(0,s.jsx)(t.p,{children:"Alle lokalen \xc4nderungen verwerfen und die Branch auf den Zustand des Remote-Repositories\n(z.\u202fB. origin/master oder origin/main) zur\xfccksetzen:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git fetch origin\ngit reset --hard origin/master\ngit clean -fd # remove untracked files\n"})}),"\n",(0,s.jsx)(t.h3,{id:"git-rebase",children:"git rebase"}),"\n",(0,s.jsx)(t.p,{children:"Rebasing effectively saves the changes in your current branch, temporarily \u201cremoves\u201d the commits you\u2019ve made on your branch,\napplies the new commits from the other branch, and then reapplies your changes one commit at a time on top of these."}),"\n",(0,s.jsx)(t.p,{children:"It\u2019s important to note that rebasing rewrites commit history by generating new commits for each original commit.\nThis process can result in a cleaner and more understandable project history."}),"\n",(0,s.jsx)("div",{class:"img-center img-600",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Git-Rebase",src:n(73514).A+""})})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Above Situation:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git checkout feature  \ngit rebase main\n"})}),"\n",(0,s.jsx)(t.p,{children:"After the rebase the Feature branch includes the commits from main and keeps the commits that have been commited earlier to the feature branch.\nThe main branch is untouched, but the commitment history has changed."}),"\n",(0,s.jsx)(t.p,{children:"If a conflict arises, Git will show you which files are conflicting.\nYou\u2019ll have to open these files, resolve the conflicts, and then continue the rebase like so:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"# After resolving conflicts\ngit add .\ngit rebase --continue\n"})}),"\n",(0,s.jsx)(t.p,{children:"If you want to abort the rebase for any reason, you can do so with the following command:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git rebase --abort\n"})}),"\n",(0,s.jsx)(t.h3,{id:"git-merge",children:"git merge"}),"\n",(0,s.jsx)(t.p,{children:"Once your feature is ready and tested, you\u2019ll want to merge it back into the main project.\nFirst, switch back to the branch you want to merge your changes into. Assuming you want to merge your changes to main branch:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git checkout master\n"})}),"\n",(0,s.jsx)(t.p,{children:"Then, merge your feature branch:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git merge <feature-branch>\n"})}),"\n",(0,s.jsx)(t.p,{children:"After merging your changes locally, push them to the remote repository to make them available to your teammate and update the live version of the website:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git push origin master\n"})}),"\n",(0,s.jsx)(t.h3,{id:"when-to-rebase-when-to-merge",children:"When to Rebase, When to Merge?"}),"\n",(0,s.jsx)(t.p,{children:"Don\u2019t use rebase \u2026"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"If the branch is public and shared with others. Rewriting publicly shared branches will tend to screw up other members of the team."}),"\n",(0,s.jsxs)(t.li,{children:["When the\xa0",(0,s.jsx)(t.em,{children:"exact"}),"\xa0history of the commit branch is important (since rebase rewrites the commit history)."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Given the above guidelines, I tend to use rebase for short-lived, local branches and merge for branches in the public repository."}),"\n",(0,s.jsx)(t.h2,{id:"misc-operations",children:"Misc Operations"}),"\n",(0,s.jsx)(t.h3,{id:"adding-empty-directories",children:"Adding empty directories"}),"\n",(0,s.jsxs)(t.p,{children:["Create a placeholder file named .gitkeep in the empty directory.\nThe\xa0",(0,s.jsx)(t.strong,{children:".gitkeep"})," file has no special meaning to Git, but it\u2019s a widely-accepted convention that signals the intention to keep the directory in the repository."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'echo "" .gitkeep                                    # create .gitkeep file\ngit add .gitkeep                                    # stage the file\ngit commit -m "add empty directory with .gitkeep"   # commit the changes\n'})}),"\n",(0,s.jsx)(t.h3,{id:"remove-a-directory",children:"Remove a directory"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git rm -r <directory> # removes a dir from git repository recursively\n"})}),"\n",(0,s.jsx)(t.h2,{id:"gitignore-file",children:".gitignore FILE"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Gecached Dateien aus gitignore entfernen:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'git rm -r --cached .\ngit add .\ngit commit -m "Remove all files in .gitignore"\n'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Check gitignore Syntax"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git check-ignore -v <file>\n"})}),"\n",(0,s.jsx)(t.h2,{id:"install--config-script",children:"Install & Config Script"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git clone https://gist.github.com/a0947ac3153923fb4fb27385a76d56c0.git\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'# ===============================\n# Script: git_setup.sh\n# Beschreibung: Konfiguriert Git (Name, E-Mail), erzeugt SSH-Key und f\xfcgt ihn dem SSH-Agent hinzu.\n# ===============================\n\n# 1. Git global konfigurieren\nread -p "Gib deinen Git-Benutzernamen ein: " GIT_USER\nread -p "Gib deine Git-E-Mail ein: " GIT_EMAIL\n\ngit config --global user.name "$GIT_USER"\ngit config --global user.email "$GIT_EMAIL"\n\necho "Current Git config:"\ngit config --global --list\n\n# 2. SSH-Key erzeugen\nKEY_PATH="$HOME/.ssh/id_ed25519"\nif [ -f "$KEY_PATH" ]; then\n  echo "SSH-Key bereits vorhanden unter $KEY_PATH"\nelse\n  ssh-keygen -t ed25519 -C "$GIT_EMAIL" -f "$KEY_PATH" -N ""\n  echo "SSH-Key wurde unter $KEY_PATH erzeugt."\nfi\n\n# 3. SSH-Agent starten und Key laden\neval "$(ssh-agent -s)"\nssh-add "$KEY_PATH"\n\n# 4. Public Key anzeigen\necho "\n-------- Kopiere diesen Public Key und f\xfcge ihn bei GitHub/GitLab hinzu: --------"\ncat "$KEY_PATH.pub"\necho "----------------------------------------------------------------------------"\n\necho "Git-Setup abgeschlossen."\n'})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);