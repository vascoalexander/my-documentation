"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[7093],{5623:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"Resourcen/Quick-References/CSharp-quickref","title":"C#","description":"","source":"@site/docs/07-Resourcen/01-Quick-References/CSharp-quickref.mdx","sourceDirName":"07-Resourcen/01-Quick-References","slug":"/Resourcen/Quick-References/CSharp-quickref","permalink":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/07-Resourcen/01-Quick-References/CSharp-quickref.mdx","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"description":"","sidebar_position":5,"toc_max_heading_level":4,"title":"C#"},"sidebar":"resourcenSidebar","previous":{"title":"Python","permalink":"/my-documentation/docs/Resourcen/Quick-References/Python-quickref"},"next":{"title":"Dokumentationen","permalink":"/my-documentation/docs/category/dokumentationen"}}');var r=t(4848),s=t(8453),a=t(5537),l=t(9329);const o={description:"",sidebar_position:5,toc_max_heading_level:4,title:"C#"},c=void 0,d={},h=[{value:"<strong>Types</strong>",id:"types",level:2},{value:"<strong>Value Types</strong>",id:"value-types",level:3},{value:"Primitive Datentypen",id:"primitive-datentypen",level:4},{value:"Ganzzahlige Datentypen",id:"ganzzahlige-datentypen",level:4},{value:"Gleitkommazahlen",id:"gleitkommazahlen",level:4},{value:"Char / Boolean",id:"char--boolean",level:4},{value:"Tuples",id:"tuples",level:4},{value:"Enum",id:"enum",level:4},{value:"Struct",id:"struct",level:4},{value:"<strong>Reference Types</strong>",id:"reference-types",level:3},{value:"String",id:"string",level:4},{value:"Array",id:"array",level:4},{value:"Class",id:"class",level:4},{value:"Interface",id:"interface",level:4},{value:"Delegate",id:"delegate",level:4},{value:"<strong>Generic Collections</strong>",id:"generic-collections",level:3},{value:"List",id:"list",level:4},{value:"Linked List",id:"linked-list",level:4},{value:"SortedList",id:"sortedlist",level:4},{value:"Dictionary",id:"dictionary",level:4},{value:"Stack",id:"stack",level:4},{value:"Queue",id:"queue",level:4},{value:"HashSet",id:"hashset",level:4},{value:"Dynamic Types",id:"dynamic-types",level:3},{value:"Type Conversion",id:"type-conversion",level:3},{value:"Typecasting",id:"typecasting",level:3},{value:"Type-Testoperatoren",id:"type-testoperatoren",level:3},{value:"<code>is</code> Operator",id:"is-operator",level:4},{value:"<code>as</code> Operator",id:"as-operator",level:4},{value:"<strong>Operatoren</strong>",id:"operatoren",level:2},{value:"Arithmetic Operators",id:"arithmetic-operators",level:3},{value:"Combined Assignment Operators",id:"combined-assignment-operators",level:3},{value:"Comparison Operators",id:"comparison-operators",level:3},{value:"Logical Operators",id:"logical-operators",level:3},{value:"Bitwise Operators",id:"bitwise-operators",level:3},{value:"Operator Precedents",id:"operator-precedents",level:3},{value:"<strong>Statements</strong>",id:"statements",level:2},{value:"if-Statements",id:"if-statements",level:3},{value:"switch case",id:"switch-case",level:3},{value:"while, do...while",id:"while-dowhile",level:3},{value:"for-loop",id:"for-loop",level:3},{value:"foreach-loop",id:"foreach-loop",level:3},{value:"return Statement",id:"return-statement",level:3},{value:"yield Statement",id:"yield-statement",level:3},{value:"checked / unchecked",id:"checked--unchecked",level:3},{value:"lock Statement",id:"lock-statement",level:3},{value:"using Statement",id:"using-statement",level:3},{value:"Exception Handling",id:"exception-handling",level:3},{value:"<strong>Classes &amp; Methods</strong>",id:"classes--methods",level:2},{value:"<strong>Object-Oriented programming</strong>",id:"object-oriented-programming",level:2},{value:"<strong>Delegates</strong>",id:"delegates",level:2},{value:"<strong>Events</strong>",id:"events",level:2},{value:"<strong>Constants</strong>",id:"constants",level:2},{value:"<strong>LINQ</strong>",id:"linq",level:2},{value:"<strong>Working with Files</strong>",id:"working-with-files",level:2},{value:"<strong>String Interpolation</strong>",id:"string-interpolation",level:2},{value:"<strong>Keywords</strong>",id:"keywords",level:2}];function u(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/andredarcie/csharp-quick-reference-guide?tab=readme-ov-file",children:(0,r.jsx)(n.strong,{children:"C# Quick-Reference [Github]"})}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsxs)(n.a,{href:"https://github.com/LabinatorSolutions/csharp-cheat-sheet",children:[(0,r.jsx)(n.strong,{children:"C# Cheat Sheet [Github"}),"]"]})]}),"\n",(0,r.jsx)(n.h2,{id:"types",children:(0,r.jsx)(n.strong,{children:"Types"})}),"\n",(0,r.jsx)(n.h3,{id:"value-types",children:(0,r.jsx)(n.strong,{children:"Value Types"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-types",children:(0,r.jsx)(n.strong,{children:"Docs Microsoft - Value Types"})})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Direkt auf dem ",(0,r.jsx)(n.strong,{children:"Stack"})," gespeichert (schnell)"]}),"\n",(0,r.jsx)(n.li,{children:"Wert wird direkt kopiert, wenn zugewiesen (x = y \u2192 Kopie von y)"}),"\n",(0,r.jsx)(n.li,{children:"Enthalten den tats\xe4chlichen Wert, nicht eine Referenz."}),"\n",(0,r.jsxs)(n.li,{children:["Kein null m\xf6glich, au\xdfer mit ",(0,r.jsx)(n.code,{children:"Nullable<T>"})," (int?, double?, etc.)"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"primitive-datentypen",children:"Primitive Datentypen"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Alle primitiven Datentypen (int, double, etc.) sind Value Types, weil sie direkt auf dem Stack gespeichert werden."}),"\n",(0,r.jsxs)(n.li,{children:["Nicht alle Value Types sind primitive Datentypen, weil struct, enum, DateTime oder ",(0,r.jsx)(n.code,{children:"Tuple<T1, T2>"})," auch Value Types sind, aber keine primitiven Datentypen."]}),"\n"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{style:{textAlign:"left"},children:(0,r.jsx)(n.strong,{children:"Kategorie"})}),(0,r.jsx)(n.th,{style:{textAlign:"left"},children:(0,r.jsx)(n.strong,{children:"Beispiele"})}),(0,r.jsx)(n.th,{style:{textAlign:"left"},children:(0,r.jsx)(n.strong,{children:"Beschreibung"})})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.strong,{children:"Primitive Datentypen"})}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,r.jsx)(n.code,{children:"int"}),", ",(0,r.jsx)(n.code,{children:"double"}),", ",(0,r.jsx)(n.code,{children:"bool"}),", ",(0,r.jsx)(n.code,{children:"char"}),", ",(0,r.jsx)(n.code,{children:"byte"}),", ",(0,r.jsx)(n.code,{children:"float"}),", ",(0,r.jsx)(n.code,{children:"decimal"}),", ",(0,r.jsx)(n.code,{children:"short"}),", ",(0,r.jsx)(n.code,{children:"long"}),", ",(0,r.jsx)(n.code,{children:"sbyte"}),", ",(0,r.jsx)(n.code,{children:"ushort"}),", ",(0,r.jsx)(n.code,{children:"uint"}),", ",(0,r.jsx)(n.code,{children:"ulong"})]}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:["Basieren direkt auf ",(0,r.jsx)(n.code,{children:"struct"}),", haben vordefinierte Gr\xf6\xdfen und keine eigene Logik."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.strong,{children:"Value Types"})}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,r.jsx)(n.strong,{children:"Alle primitiven Datentypen +"})," ",(0,r.jsx)(n.code,{children:"enum"}),", ",(0,r.jsx)(n.code,{children:"struct"}),", ",(0,r.jsx)(n.code,{children:"Tuple<T1, T2>"}),", ",(0,r.jsx)(n.code,{children:"bool"}),", ",(0,r.jsx)(n.code,{children:"DateTime"}),", ",(0,r.jsx)(n.code,{children:"decimal"}),", ",(0,r.jsx)(n.code,{children:"TimeSpan"})]}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:["Werttypen, die entweder ",(0,r.jsx)(n.strong,{children:"primitive Typen"})," oder ",(0,r.jsxs)(n.strong,{children:["benutzerdefinierte Strukturen (",(0,r.jsx)(n.code,{children:"struct"}),")"]})," sind."]})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"ganzzahlige-datentypen",children:"Ganzzahlige Datentypen"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types",children:(0,r.jsx)(n.strong,{children:"Microsoft Docs - Integral numeric Types"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="Bytes"',children:"byte myUnsignedByte = 8; // Size: 8 bits  | Range: 0 to 255\nsbyte mySignedByte = -8; // Size: 8 bits  | Range: -128 to +127\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="Unsigned Integers"',children:"ushort myUnsignedShort = 16; // Size: 16 bits  | Range: 0 to 65535\nuint myUnsignedInt = 32;     // Size: 32 bits  | Range: 0 to 2^32-1\nulong myUnsignedLong = 64;   // Size: 64 bits  | Range: 0 to 2^64-1\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="Signed Integers"',children:"short mySignedShort = 16; // Size: 16 bits  | Range: -32768 to +32767\nint mySignedInt = 32;     // Size: 32 bits  | Range: -2^31  to +2^31-1\nlong mySignedLong = -64;  // Size: 64 bits  | Range: -2^63  to +2^63-1\n"})}),"\n",(0,r.jsx)(n.h4,{id:"gleitkommazahlen",children:"Gleitkommazahlen"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/floating-point-numeric-types",children:(0,r.jsx)(n.strong,{children:"Microsoft Docs - Floating Point numeric Types"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="Floating-Point Types"',children:"float myFloat = 3.14F;     // Size: 32 bits  | Range: 7 digits of precision\ndouble myDouble = 3.14D;   // Size: 64 bits  | Range: 15-16 digits of precision\ndecimal myDecimal = 3.14M; // Size: 128 bits | Range: 28-29 digits of precision\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"float"})," ist schnell, aber weniger genau."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"double"})," ist der Standard f\xfcr wissenschaftliche Berechnungen."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"decimal"})," ist ideal f\xfcr Geldbetr\xe4ge, weil es pr\xe4ziser ist."]}),"\n"]})}),"\n",(0,r.jsx)(n.h4,{id:"char--boolean",children:"Char / Boolean"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="Unicode Characters"',children:"char myChar = 'a'; // Size: 16 bits  | Range: Unicode character\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="Booleans"',children:"bool myBool = true; // Size: 4 bits   | Range: true or false\n"})}),"\n",(0,r.jsx)(n.h4,{id:"tuples",children:"Tuples"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-tuples",children:(0,r.jsx)(n.strong,{children:"Microsoft Docs - Tuple types"})}),(0,r.jsx)(n.br,{}),"\n","Available in C# 7.0 and later, the tuples feature provides concise syntax to group multiple data elements in a lightweight data structure."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="Tuple Type"',children:'(double, int) t1 = (4.5, 3);\nConsole.WriteLine($"Tuple with elements {t1.Item1} and {t1.Item2}."); // Output => Tuple with elements 4.5 and 3.\n\n(double Sum, int Count) t2 = (4.5, 3);\nConsole.WriteLine($"Sum of {t2.Count} elements is {t2.Sum}."); // Output => Sum of 2 elements is 7.5.\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="List of tuples"',children:'List<(int zahl, string name)> list = new List<(int zahl, string name)>();\nlist.Add((1, "str1"));\nlist.Add((3, "str2"));\n\nforeach ((int zahl, string name) in list)\n{\n    Console.WriteLine(name + ": " + zahl);    \n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"enum",children:"Enum"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/enum",children:(0,r.jsx)(n.strong,{children:"Microsoft Docs - Enumeration Types"})}),(0,r.jsx)(n.br,{}),"\n","Enums in C# sind eine Gruppe zusammengeh\xf6riger Konstanten."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'using System;\n\nenum Wochentag\n{\n    Montag,\n    Dienstag,\n    Mittwoch,\n    Donnerstag,\n    Freitag,\n    Samstag,\n    Sonntag\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Wochentag heute = Wochentag.Mittwoch;\n        Console.WriteLine($"Heute ist {heute}.");\n        \n        if (heute == Wochentag.Samstag || heute == Wochentag.Sonntag)\n        {\n            Console.WriteLine("Es ist Wochenende!");\n        }\n        else\n        {\n            Console.WriteLine("Es ist ein Arbeitstag.");\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"struct",children:"Struct"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/struct",children:(0,r.jsx)(n.strong,{children:"Microsoft Docs - Structure Types"})}),(0,r.jsx)(n.br,{}),"\n","Ein struct ist ein Werttyp in C#, der \xe4hnlich wie eine Klasse (class) funktioniert, aber in vielen F\xe4llen effizienter ist."]}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(l.A,{value:"first",label:"2D-Koordinaten",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'// Punkt speichert zwei Werte direkt im Stack \u2192 schneller als eine Klasse.\n// Strukturen sind perfekt f\xfcr einfache Datencontainer.\n\nstruct Punkt\n{\n    public int X;\n    public int Y;\n\n    public Punkt(int x, int y)\n    {\n        X = x;\n        Y = y;\n    }\n\n    public void Anzeigen()\n    {\n        Console.WriteLine($"Punkt: ({X}, {Y})");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Punkt p1 = new Punkt(10, 20);\n        p1.Anzeigen(); // Ausgabe: Punkt: (10, 20)\n    }\n}\n'})})}),(0,r.jsx)(l.A,{value:"second",label:"Farbe (mit Auto-Properities)",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'// Farbe ist ein idealer Kandidat f\xfcr struct, da es nur Daten speichert.\n// Auto-Properties ({ get; }) machen es unver\xe4nderlich (immutable), was in vielen Szenarien n\xfctzlich ist.\n\nstruct Farbe\n{\n    public byte Rot { get; }\n    public byte Gr\xfcn { get; }\n    public byte Blau { get; }\n\n    public Farbe(byte rot, byte gr\xfcn, byte blau)\n    {\n        Rot = rot;\n        Gr\xfcn = gr\xfcn;\n        Blau = blau;\n    }\n\n    public override string ToString()\n    {\n        return $"RGB({Rot}, {Gr\xfcn}, {Blau})";\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Farbe rot = new Farbe(255, 0, 0);\n        Console.WriteLine(rot); // Ausgabe: RGB(255, 0, 0)\n    }\n}\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Wann struct statt class?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Klein & einfach \u2192 struct"}),"\n",(0,r.jsx)(n.li,{children:"Mutable & komplex \u2192 class"}),"\n",(0,r.jsx)(n.li,{children:"Vererbung notwendig? \u2192 class"}),"\n",(0,r.jsx)(n.li,{children:"H\xe4ufige \xc4nderungen der Daten? \u2192 class"}),"\n",(0,r.jsx)(n.li,{children:"Performance-kritisch? \u2192 struct"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"reference-types",children:(0,r.jsx)(n.strong,{children:"Reference Types"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Werden auf dem ",(0,r.jsx)(n.strong,{children:"Heap"})," gespeichert, aber die Referenz darauf liegt im Stack."]}),"\n",(0,r.jsxs)(n.li,{children:["Speichern eine ",(0,r.jsx)(n.strong,{children:"Referenz (Zeiger) auf die Daten"}),", nicht den Wert selbst."]}),"\n",(0,r.jsx)(n.li,{children:"Eine Zuweisung kopiert die Referenz, nicht die Daten (\xc4nderungen wirken sich auf alle Referenzen aus)."}),"\n"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Typ"}),(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Beschreibung"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"class"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Definiert komplexe Objekte mit Methoden und Eigenschaften."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"interface"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Definiert ein Verhalten, das Klassen implementieren m\xfcssen."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"delegate"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Referenz auf eine Methode (wie ein Funktionszeiger)."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"array"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Sammlung von Elementen gleichen Typs mit fester Gr\xf6\xdfe."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Eine Zeichenkette (immutable, \xe4ndert sich nicht direkt)."})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"string",children:"String"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/strings/",children:(0,r.jsx)(n.strong,{children:"Microsoft Docs - Strings"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'string fooString = "\\"escape\\" quotes and add \\n (new lines) and \\t (tabs)";\nConsole.WriteLine(fooString);\n\n// You can access each character of the string with an indexer:\nchar charFromString = fooString[1]; // => \'e\'\n\n// Strings are immutable: you can\'t do fooString[1] = \'X\';\n\n// Compare strings with current culture, ignoring case\nstring.Compare(fooString, "x", StringComparison.CurrentCultureIgnoreCase);\n\n// Formatting, based on sprintf\nstring fooFs = string.Format("Check Check, {0} {1}, {0} {1:0.0}", 1, 2);\n\n// Dates & Formatting\nDateTime fooDate = DateTime.Now;\nConsole.WriteLine(fooDate.ToString("hh:mm, dd MMM yyyy"));\n\n// String Interpolation\nstring myName = "Jane Doe";\nConsole.WriteLine($"My name is: {myName}. It is great to be here!");\n\n// String Builder\nStringBuilder sb = new StringBuilder();\nsb.Append("Hello ");\nsb.AppendLine("World!");\nConsole.WriteLine(sb);\n\n// Verbatim String\n// You can use the @ symbol before a string literal to escape all characters in the string\nstring path = "C:\\\\Users\\\\User\\\\Desktop";\nstring verbatimPath = @"C:\\Users\\User\\Desktop";\nConsole.WriteLine(path == verbatimPath);  // => true\n\n// You can split a string over two lines with the @ symbol. To escape " use ""\nstring bazString = @"Here\'s some stuff\non a new line! ""Wow!"", the masses cried";\n\n// Popular String Methods & Properties\nstring myText = "some text";\n\nConsole.WriteLine(myText.IndexOf(\'t\')); // Outputs => 5\n\nmyText = myText.Insert(0, "This is ");\nConsole.WriteLine(myText); // Outputs => "This is some text"\n\nmyText = myText.Replace("This is", "Here is");\nConsole.WriteLine(myText); // Outputs => "Here is some text"\n\nif(myText.Contains("some"))\nConsole.WriteLine("found"); // Outputs "found"\n\nmyText = myText.Remove(4);\nConsole.WriteLine(myText); // Outputs "Here"\n\nmyText = myText.Substring(2, 3);\nConsole.WriteLine(myText); // Outputs "re"\n'})}),"\n",(0,r.jsx)(n.h4,{id:"array",children:"Array"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.array?view=net-9.0",children:(0,r.jsx)(n.strong,{children:"Microsoft Docs - Array Class"})}),(0,r.jsx)(n.br,{}),"\n","An array is a data structure that contains a number of variables that are accessed through computed indices.\nThe variables contained in an array, also called the elements of the array, are all of the same type, and this type is called the element type of the array."]}),"\n",(0,r.jsx)(n.p,{children:"Array types are reference types, and the declaration of an array variable simply sets aside space for a reference to an array instance.\nActual array instances are created dynamically at run-time using the new operator. The new operation specifies the length of the new array instance,\nwhich is then fixed for the lifetime of the instance. The indices of the elements of an array range from 0 to Length - 1.\nThe new operator automatically initializes the elements of an array to their default value, which,\nfor example, is zero for all numeric types and null for all reference types."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="Array of simple Types"',children:"int[] a1   = new int[10];        // One-Dimensional Array\nint[,] a2  = new int[10, 5];     // Two-Dimensional Array\nint[,,] a3 = new int[10, 5, 2];  // Three-Dimensional Array\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Jagged Array"}),(0,r.jsx)(n.br,{}),"\n","An array with elements of an array type."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="Jagged Array - Syntax"',children:"data_type[][] name_of_array = new data_type[rows][]\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="Beispiel 1"',children:"int[][] jaggedArray = new int[3][]; // Jagged Array\njaggedArray[0] = new int[10];\njaggedArray[1] = new int[5];\njaggedArray[2] = new int[20];\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="Beispiel 2"',children:"int[][] anotherJaggedArray = new int[][] // Another way to declare Jagged Arrays\n{\n    new int[] {1,8,2,7,9},\n    new int[] {2,4,6},\n    new int[] {33,42}\n};\n\nint x = anotherJaggedArray[2][1];\nConsole.WriteLine(x); // Outputs => 42\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Array Properties & Methods"}),(0,r.jsx)(n.br,{}),"\n","The Array class in C# provides various properties and methods to work with arrays.\nThe Array class implements the IEnumerable interface, so you can LINQ extension methods such as Max(), Min(), Sum(), Average() and many others."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-C",children:"using System;\nusing System.Linq;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        int[] integersArray = new int[5]{80, 20, 35, 18, 9};\n\n        Console.WriteLine(integersArray.Max());\n        Console.WriteLine(integersArray.Min());\n        Console.WriteLine(integersArray.Sum());\n        Console.WriteLine(integersArray.Average());\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"System.Array class"}),(0,r.jsx)(n.br,{}),"\n","Includes methods for creating, manipulating, searching, and sorting arrays."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'using System;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        int[] integersArray = {20, 9, 16, 50, 3};\n\n        Console.WriteLine("Original Array:");\n        foreach(int element in integersArray)\n        {\n            Console.WriteLine(element);\n        }\n\n        Console.WriteLine("Sorted Array:");\n        Array.Sort(integersArray);\n        foreach(int element in integersArray)\n        {\n            Console.WriteLine(element);\n        }\n\n        Console.WriteLine("Reversed Array:");\n        Array.Reverse(integersArray);\n        Array.ForEach<int>(integersArray, n => Console.WriteLine(n));\n\n        Console.WriteLine(Array.BinarySearch(integersArray, 9));\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"class",children:"Class"}),"\n",(0,r.jsxs)(n.p,{children:["Eine Klasse dient als Bauplan f\xfcr Objekte. Sie fasst ",(0,r.jsx)(n.strong,{children:"Daten (Felder, Eigenschaften)"})," und ",(0,r.jsx)(n.strong,{children:"Verhalten (Methoden, Ereignisse)"})," zusammen."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="Einfache Klasse mit Konstruktor"',children:'public class Person {\n    // Felder bzw Attribute\n    public string Name {get, private set};\n    public int Age {get, private set};\n\n    // Konstruktor\n    public Person(string name, int age) {\n        Name = name;\n        Age = age;\n    }\n    // Greet()-Methode\n    public void Greet() {\n        Console.WriteLine($"Hallo, mein Name ist {Name} und ich bin {Age} Jahre alt.");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Person p = new Person("Max", 30);  // Konstruktor wird aufgerufen\n        p.Greet();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"interface",children:"Interface"}),"\n",(0,r.jsx)(n.p,{children:"Ein Interface definiert einen Vertrag (Methoden, Eigenschaften etc.), den implementierende Klassen erf\xfcllen m\xfcssen. Es erm\xf6glicht lose Kopplung."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'public interface IBeweglich\n{\n    void Bewege();\n}\n\npublic class Auto : IBeweglich\n{\n    public void Bewege()\n    {\n        Console.WriteLine("Das Auto f\xe4hrt.");\n    }\n}\n\npublic class Fahrrad : IBeweglich\n{\n    public void Bewege()\n    {\n        Console.WriteLine("Das Fahrrad rollt.");\n    }\n}\n\n// Anwendung:\nIBeweglich fahrzeug = new Auto();\nfahrzeug.Bewege();  // Ausgabe: Das Auto f\xe4hrt.\n\nfahrzeug = new Fahrrad();\nfahrzeug.Bewege();  // Ausgabe: Das Fahrrad rollt.\n'})}),"\n",(0,r.jsx)(n.h4,{id:"delegate",children:"Delegate"}),"\n",(0,r.jsx)(n.p,{children:"Ein Delegate ist ein typisierter Verweis auf eine oder mehrere Methoden. Er erm\xf6glicht es, Methoden als Objekte zu behandeln."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"// Delegate-Definition:\npublic delegate int Operation(int a, int b);\n\npublic class Rechner\n{\n    public int Addieren(int a, int b) => a + b;\n    public int Multiplizieren(int a, int b) => a * b;\n}\n\n// Anwendung:\nvar rechner = new Rechner();\n\n// Zuweisung der Methode an den Delegate:\nOperation op = rechner.Addieren;\nConsole.WriteLine(op(3, 4));  // Ausgabe: 7\n\n// Delegate neu zuweisen:\nop = rechner.Multiplizieren;\nConsole.WriteLine(op(3, 4));  // Ausgabe: 12\n"})}),"\n",(0,r.jsx)(n.h3,{id:"generic-collections",children:(0,r.jsx)(n.strong,{children:"Generic Collections"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/standard/generics/collections",children:(0,r.jsx)(n.strong,{children:"Microsoft Docs - Generic collections"})})}),"\n",(0,r.jsx)(n.p,{children:"A collection is used to group related objects. Unlike an array, it is dynamic and can also group objects.\nA collection can grow and shrink to accommodate any number of objects. Collection classes are organized into\nnamespaces and contain built in methods for processing elements within the collection."}),"\n",(0,r.jsx)(n.p,{children:"The for statement and the foreach statement are used to iterate through collections. Since a collection is a class\nyou must first declare an instance of the class before you can add elements to that collection."}),"\n",(0,r.jsx)(n.h4,{id:"list",children:"List"}),"\n",(0,r.jsxs)(n.p,{children:["A list is similar to an array, but the elements in a list can be inserted and removed dynamically. The C# generic\ncollection ",(0,r.jsx)(n.code,{children:"List<T>"})," class requires all elements be of the same type T."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Erstellen einer Liste vom Typ string\n        List<string> namen = new List<string>();\n\n        // Hinzuf\xfcgen von Elementen\n        namen.Add("Anna");\n        namen.Add("Bernd");\n        namen.Add("Clara");\n\n        // Einf\xfcgen eines Elements an einem bestimmten Index (Index 1)\n        namen.Insert(1, "Dieter");\n\n        // \xdcberpr\xfcfen, ob ein bestimmter Wert existiert\n        bool enth\xe4ltClara = namen.Contains("Clara");\n        Console.WriteLine($"Enth\xe4lt Clara? {enth\xe4ltClara}");\n\n        // Entfernen eines Elements per Wert\n        namen.Remove("Bernd");\n\n        // Entfernen eines Elements per Index (erstes Element)\n        namen.RemoveAt(0);\n\n        // Iteration \xfcber die Liste\n        Console.WriteLine("Aktuelle Liste:");\n        foreach (string name in namen)\n        {\n            Console.WriteLine(name);\n        }\n\n        // Sortieren der Liste\n        namen.Sort();\n        Console.WriteLine("Sortierte Liste:");\n        namen.ForEach(Console.WriteLine);\n\n        // Liste umkehren\n        namen.Reverse();\n        Console.WriteLine("Umgekehrte Liste:");\n        namen.ForEach(Console.WriteLine);\n\n        // Zugriff auf ein Element per Index (Beispiel: erstes Element, falls vorhanden)\n        if (namen.Count > 0)\n        {\n            Console.WriteLine($"Erstes Element: {namen[0]}");\n        }\n\n        // Suchen eines Elements (erstes Element, das mit \'C\' beginnt)\n        string nameMitC = namen.Find(name => name.StartsWith("C"));\n        Console.WriteLine($"Erster Name, der mit \'C\' beginnt: {nameMitC}");\n\n        // Finden aller Elemente, die einer Bedingung entsprechen (z.B. L\xe4nge > 4)\n        List<string> langeNamen = namen.FindAll(name => name.Length > 4);\n        Console.WriteLine("Namen mit mehr als 4 Zeichen:");\n        langeNamen.ForEach(Console.WriteLine);\n\n        // Umwandeln der Liste in ein Array\n        string[] namenArray = namen.ToArray();\n        Console.WriteLine("Array-Ausgabe:");\n        foreach (var n in namenArray)\n        {\n            Console.WriteLine(n);\n        }\n\n        // Leeren der Liste\n        namen.Clear();\n        Console.WriteLine($"Anzahl der Elemente nach Clear: {namen.Count}");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"linked-list",children:"Linked List"}),"\n",(0,r.jsx)(n.p,{children:"Eine Linked List ist eine lineare Datensammlung, bei der die Elemente (Knoten) nicht zusammenh\xe4ngend im Speicher abgelegt sind.\nJeder Knoten enth\xe4lt einen Wert und einen Verweis auf den n\xe4chsten Knoten in der Liste. Dies unterscheidet sie von Arrays,\nbei denen die Elemente direkt aufeinander folgen."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Vorteile"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Flexibilit\xe4t bei der Gr\xf6\xdfe:"})," Linked Lists k\xf6nnen dynamisch wachsen oder schrumpfen, da Knoten bei Bedarf hinzugef\xfcgt oder\nentfernt werden k\xf6nnen."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Effizientes Einf\xfcgen und Entfernen:"})," Das Einf\xfcgen oder Entfernen von Elementen an beliebiger Stelle ist in der Regel schneller als bei Arrays, da keine Elemente verschoben werden m\xfcssen."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Nachteile"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Zugriffszeit:"})," Der Zugriff auf ein Element an einer bestimmten Position kann l\xe4nger dauern als bei Arrays, da die Liste vom Anfang bis zum gew\xfcnschten Element durchlaufen werden muss."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Zus\xe4tzlicher Speicherbedarf:"})," Jeder Knoten ben\xf6tigt zus\xe4tzlichen Speicher f\xfcr den Verweis auf den n\xe4chsten Knoten."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Erstellen einer LinkedList vom Typ string\n        LinkedList<string> linkedList = new LinkedList<string>();\n\n        // Hinzuf\xfcgen von Elementen\n        linkedList.AddLast("Anna");       // Element am Ende hinzuf\xfcgen\n        linkedList.AddLast("Bernd");\n        linkedList.AddFirst("Clara");     // Element am Anfang hinzuf\xfcgen\n\n        // Ausgabe der initialen LinkedList\n        Console.WriteLine("Initiale LinkedList:");\n        foreach (string item in linkedList)\n        {\n            Console.WriteLine(item);\n        }\n\n        // Suchen eines Knotens mit einem bestimmten Wert\n        LinkedListNode<string> nodeBernd = linkedList.Find("Bernd");\n        if (nodeBernd != null)\n        {\n            // Hinzuf\xfcgen eines Elements nach einem bekannten Knoten\n            linkedList.AddAfter(nodeBernd, "Dieter");\n\n            // Hinzuf\xfcgen eines Elements vor einem bekannten Knoten\n            linkedList.AddBefore(nodeBernd, "Eva");\n        }\n\n        // Entfernen eines Elements per Wert\n        linkedList.Remove("Clara");\n\n        // Entfernen des ersten und letzten Knotens\n        linkedList.RemoveFirst();\n        linkedList.RemoveLast();\n\n        // Ausgabe der LinkedList nach \xc4nderungen\n        Console.WriteLine("\\nLinkedList nach \xc4nderungen:");\n        foreach (string item in linkedList)\n        {\n            Console.WriteLine(item);\n        }\n\n        // Ausgabe der Anzahl der Elemente\n        Console.WriteLine($"\\nAnzahl der Elemente: {linkedList.Count}");\n\n        // Iteration \xfcber die LinkedList mittels Knotenreferenzen\n        Console.WriteLine("\\nIteration mit LinkedListNode<T>:");\n        for (LinkedListNode<string> node = linkedList.First; node != null; node = node.Next)\n        {\n            Console.WriteLine(node.Value);\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"sortedlist",children:"SortedList"}),"\n",(0,r.jsxs)(n.p,{children:["A sorted list is a collection of key/value pairs that are automatically sorted by key. A key can be used to access its corresponding value in the sorted list.\nThe C# generic collection ",(0,r.jsx)(n.code,{children:"SortedList<K, V>"})," class requires all element key/value pairs to be of the same type K, V.\nDuplicate keys are not permitted, which ensures that every key/value pair is unique."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Erstellen einer SortedList (sortiert nach Schl\xfcsseln)\n        SortedList<string, int> sortedList = new SortedList<string, int>();\n\n        // Hinzuf\xfcgen von Schl\xfcssel-Wert-Paaren\n        sortedList.Add("Clara", 30);\n        sortedList.Add("Anna", 25);\n        sortedList.Add("Bernd", 35);\n\n        // Zugriff auf ein Element per Schl\xfcssel\n        Console.WriteLine($"Anna ist {sortedList["Anna"]} Jahre alt.");\n\n        // Iteration \xfcber die SortedList (automatisch sortiert nach Schl\xfcssel)\n        Console.WriteLine("\\nSortedList Eintr\xe4ge:");\n        foreach (KeyValuePair<string, int> pair in sortedList)\n        {\n            Console.WriteLine($"{pair.Key}: {pair.Value}");\n        }\n\n        // Entfernen eines Elements per Schl\xfcssel\n        sortedList.Remove("Bernd");\n\n        // \xdcberpr\xfcfen, ob ein Schl\xfcssel existiert\n        if (sortedList.ContainsKey("Clara"))\n        {\n            Console.WriteLine("\\nClara ist in der SortedList vorhanden.");\n        }\n\n        // Aktualisieren eines Wertes\n        sortedList["Anna"] = 26;\n\n        // Zugriff auf Schl\xfcssel und Werte als separate Sammlungen\n        IList<string> keys = sortedList.Keys;\n        IList<int> values = sortedList.Values;\n\n        Console.WriteLine("\\nSchl\xfcssel:");\n        foreach (var key in keys)\n        {\n            Console.WriteLine(key);\n        }\n\n        Console.WriteLine("\\nWerte:");\n        foreach (var value in values)\n        {\n            Console.WriteLine(value);\n        }\n\n        // Anzahl der Elemente in der SortedList\n        Console.WriteLine($"\\nAnzahl der Elemente: {sortedList.Count}");\n\n        // L\xf6schen aller Eintr\xe4ge\n        sortedList.Clear();\n        Console.WriteLine($"\\nAnzahl der Elemente nach Clear: {sortedList.Count}");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"dictionary",children:"Dictionary"}),"\n",(0,r.jsxs)(n.p,{children:["A dictionary is a collection of unique key/value pairs where a key is used to access the corresponding value. Dictionaries are used in database indexing, cache implementations, and so on.\nThe C# generic collection ",(0,r.jsx)(n.code,{children:"Dictionary<K, V>"})," class requires all key/value pairs be of the same type K, V. Duplicate keys are not permitted to ensure that every key/value pair is unique."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Erstellen eines Dictionaries (Schl\xfcssel: string, Wert: int)\n        Dictionary<string, int> dictionary = new Dictionary<string, int>();\n\n        // Hinzuf\xfcgen von Schl\xfcssel-Wert-Paaren\n        dictionary.Add("Anna", 25);\n        dictionary.Add("Bernd", 35);\n        dictionary.Add("Clara", 30);\n\n        // Zugriff auf ein Element per Schl\xfcssel\n        Console.WriteLine($"Anna ist {dictionary["Anna"]} Jahre alt.");\n\n        // Iteration \xfcber alle Elemente im Dictionary\n        Console.WriteLine("\\nDictionary Eintr\xe4ge:");\n        foreach (KeyValuePair<string, int> pair in dictionary)\n        {\n            Console.WriteLine($"{pair.Key}: {pair.Value}");\n        }\n\n        // \xdcberpr\xfcfen, ob ein bestimmter Schl\xfcssel existiert\n        if (dictionary.ContainsKey("Bernd"))\n        {\n            Console.WriteLine("\\nBernd ist im Dictionary vorhanden.");\n        }\n\n        // Aktualisieren eines Wertes \xfcber den Schl\xfcssel\n        dictionary["Clara"] = 31;\n\n        // Iteration \xfcber alle Schl\xfcssel\n        Console.WriteLine("\\nSchl\xfcssel im Dictionary:");\n        foreach (string key in dictionary.Keys)\n        {\n            Console.WriteLine(key);\n        }\n\n        // Iteration \xfcber alle Werte\n        Console.WriteLine("\\nWerte im Dictionary:");\n        foreach (int value in dictionary.Values)\n        {\n            Console.WriteLine(value);\n        }\n\n        // Entfernen eines Elements per Schl\xfcssel\n        dictionary.Remove("Bernd");\n\n        // Ausgabe der Anzahl der Elemente im Dictionary\n        Console.WriteLine($"\\nAnzahl der Elemente: {dictionary.Count}");\n\n        // L\xf6schen aller Eintr\xe4ge im Dictionary\n        dictionary.Clear();\n        Console.WriteLine($"Anzahl der Elemente nach Clear: {dictionary.Count}");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"SortedList vs Dictonary"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Verwenden Sie eine ",(0,r.jsx)(n.strong,{children:"SortedList"}),", wenn:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Sie h\xe4ufig auf Elemente \xfcber den Index zugreifen m\xfcssen."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Verwenden Sie ein ",(0,r.jsx)(n.strong,{children:"Dictionary"}),", wenn:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Sie haupts\xe4chlich \xfcber den Schl\xfcssel auf Elemente zugreifen."}),"\n",(0,r.jsx)(n.li,{children:"Performance beim Einf\xfcgen und Entfernen wichtig ist."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"stack",children:"Stack"}),"\n",(0,r.jsx)(n.p,{children:"A stack is a Last In, First Out (LIFO) collection of elements where the last element that goes into the stack will be the first element that comes out."}),"\n",(0,r.jsx)(n.p,{children:"Inserting an element onto a stack is called pushing. Deleting an element from a stack is called popping.\nPushing and popping can be performed only at the top of the stack."}),"\n",(0,r.jsxs)(n.p,{children:["Stacks can be used to create undo-redo functionalities, parsing expressions (infix to postfix/prefix conversion), and much more.\nThe C# generic collection ",(0,r.jsx)(n.code,{children:"Stack<T>"})," class requires all elements to be of the same type T."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Erstellen eines Stacks vom Typ int\n        Stack<int> stack = new Stack<int>();\n\n        // Hinzuf\xfcgen von Elementen (Push)\n        stack.Push(10);\n        stack.Push(20);\n        stack.Push(30);\n\n        // Ausgabe der Anzahl der Elemente\n        Console.WriteLine($"Anzahl der Elemente: {stack.Count}");\n\n        // Zugriff auf das oberste Element ohne es zu entfernen (Peek)\n        Console.WriteLine($"Oberstes Element (Peek): {stack.Peek()}");\n\n        // Entfernen des obersten Elements (Pop)\n        Console.WriteLine($"Entferntes Element (Pop): {stack.Pop()}");\n\n        // Ausgabe des aktuellen Stacks\n        Console.WriteLine("\\nStack-Inhalt nach Pop:");\n        foreach (int item in stack)\n        {\n            Console.WriteLine(item);\n        }\n\n        // Verwenden von TryPeek und TryPop\n        if (stack.TryPeek(out int topElement))\n        {\n            Console.WriteLine($"\\nOberstes Element (TryPeek): {topElement}");\n        }\n\n        if (stack.TryPop(out int poppedElement))\n        {\n            Console.WriteLine($"Entferntes Element (TryPop): {poppedElement}");\n        }\n\n        // Stack leeren\n        stack.Clear();\n        Console.WriteLine($"\\nAnzahl der Elemente nach Clear: {stack.Count}");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"queue",children:"Queue"}),"\n",(0,r.jsx)(n.h4,{id:"hashset",children:"HashSet"}),"\n",(0,r.jsx)(n.h3,{id:"dynamic-types",children:"Dynamic Types"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Typ"}),(0,r.jsx)(n.th,{children:"Beschreibung"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"object"})}),(0,r.jsxs)(n.td,{children:["Der Basistyp f\xfcr ",(0,r.jsx)(n.strong,{children:"alle"})," Datentypen in C#. Kann alles speichern."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"dynamic"})}),(0,r.jsx)(n.td,{children:"Typ wird erst zur Laufzeit bestimmt. Flexibler, aber unsicherer."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"var"})}),(0,r.jsx)(n.td,{children:"Compiler erkennt den Typ automatisch aus der Initialisierung."})]})]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="object"',children:'object obj = 42;\nobj = "Hallo"; // Erlaubt (aber keine Typensicherheit)\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="dynamic"',children:'dynamic d = 10;\nd = "Text"; // Erlaubt, aber erst zur Laufzeit \xfcberpr\xfcft!\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="var"',children:'var x = 10; // Compiler erkennt `int`\nvar y = "Hallo"; // Compiler erkennt `string`\n'})}),"\n",(0,r.jsx)(n.h3,{id:"type-conversion",children:"Type Conversion"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/types/casting-and-type-conversions",children:(0,r.jsx)(n.strong,{children:"Microsoft Docs - Casting and Type Conversions"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"Convert.ToBoolean(x);    // Converts a type to a Boolean value\nConvert.ToByte(x);       // Converts a type to a byte\nConvert.ToChar(x);       // Converts a type to a single Unicode character\nConvert.ToDateTime(x);   // Converts a type (integer or string type) to date-time structures\nConvert.ToDecimal(x);    // Converts a floating point or integer type to a decimal type\nConvert.ToDouble(x);     // Converts a type to a double type\nConvert.ToInt16(x);      // Converts a type to a 16-bit integer\nConvert.ToInt32(x);      // Converts a type to a 32-bit integer\nConvert.ToInt64(x);      // Converts a type to a 64-bit integer\nConvert.ToSbyte(x);      // Converts a type to a signed byte type\nConvert.ToSingle(x);     // Converts a type to a small floating point number\nConvert.ToString(x);     // Converts a type to a string\nConvert.ToType(x);       // Converts a type to a specified type\nConvert.ToUInt16(x);     // Converts a type to an unsigned int type\nConvert.ToUInt32(x);     // Converts a type to an unsigned long type\nConvert.ToUInt64(x);     // Converts a type to an unsigned big integer\n"})}),"\n",(0,r.jsx)(n.h3,{id:"typecasting",children:"Typecasting"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Implizite Konvertierung (automatisch)"}),(0,r.jsx)(n.br,{}),"\n","Eine Umwandlung, die automatisch erfolgt, weil sie sicher ist (d.\u202fh. es geht keine Information verloren)."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"converting a smaller type to a larger type size"}),(0,r.jsx)(n.br,{}),"\n","char -> int -> long -> float -> double"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"int zahl = 42;\ndouble d = zahl;  // int -> double: implizite Umwandlung (widening conversion)\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Explizite Konvertierung (manuell)"}),(0,r.jsx)(n.br,{}),"\n","Eine Umwandlung, bei der der Programmierer ausdr\xfccklich angibt, dass ein Typ in einen anderen umgewandelt werden soll.\nDies ist oft erforderlich, wenn Daten verloren gehen k\xf6nnen oder die Konvertierung nicht automatisch durchgef\xfchrt wird (narrowing conversion)."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"converting a larger type to a smaller size type:"}),(0,r.jsx)(n.br,{}),"\n","double -> float -> long -> int -> char"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"double pi = 3.14159;\nint ganzZahl = (int)pi;  // double -> int: explizite Umwandlung, Nachkommabereich geht verloren\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/de-de/dotnet/csharp/language-reference/language-specification/conversions#103-explicit-conversions",children:"Microsoft C# Spezifikationen - Explizite Konvertierung"})}),"\n",(0,r.jsx)(n.h3,{id:"type-testoperatoren",children:"Type-Testoperatoren"}),"\n",(0,r.jsxs)(n.h4,{id:"is-operator",children:[(0,r.jsx)(n.code,{children:"is"})," Operator"]}),"\n",(0,r.jsx)(n.p,{children:"Pr\xfcft, ob ein Objekt zu einem bestimmten Typ kompatibel ist."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'if (obj is string)\n{\n    Console.WriteLine("obj ist ein String.");\n}\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"as-operator",children:[(0,r.jsx)(n.code,{children:"as"})," Operator"]}),"\n",(0,r.jsx)(n.p,{children:"Versucht, ein Objekt in einen bestimmten Typ zu konvertieren, und gibt dabei null zur\xfcck, falls die Konvertierung nicht m\xf6glich ist."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"SomeType x = y as SomeType;\nif (x != null)\n{\n  // Do something\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"operatoren",children:(0,r.jsx)(n.strong,{children:"Operatoren"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/",children:(0,r.jsx)(n.strong,{children:"Microsoft Language Specification - Operators and Expressions"})})}),"\n",(0,r.jsx)(n.h3,{id:"arithmetic-operators",children:"Arithmetic Operators"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"float myFloat = 0;\n\nmyFloat = 3 + 2; // Addition       => 5\nmyFloat = 3 - 2; // Subtraction    => 1\nmyFloat = 3 * 2; // Multiplication => 6\nmyFloat = 3 / 2; // Division       => 1\nmyFloat = 3 % 2; // Modulus        => 1\n\n/*\n    Notice that the division sign gives an incorrect result.\n    This is because it operates on two integer values and will therefore round the result and return an integer.\n    To get the correct value, one of the numbers needs to be converted into a floating-point number.\n*/\nmyFloat = 3 / (float) 2; // 1.5\n"})}),"\n",(0,r.jsx)(n.h3,{id:"combined-assignment-operators",children:"Combined Assignment Operators"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"float myFloat = 0;\n\nmyFloat += 2; // myNumber = myNumber + 2\nmyFloat -= 2; // myNumber = myNumber - 2\nmyFloat *= 2; // myNumber = myNumber * 2\nmyFloat /= 2; // myNumber = myNumber / 2\nmyFloat %= 2; // myNumber = myNumber % 2\n"})}),"\n",(0,r.jsx)(n.h3,{id:"comparison-operators",children:"Comparison Operators"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'Console.WriteLine($"3 == 2? {3 == 2}"); // => false\nConsole.WriteLine($"3 != 2? {3 != 2}"); // => true\nConsole.WriteLine($"3 > 2? {3 > 2}");   // => true\nConsole.WriteLine($"3 < 2? {3 < 2}");   // => false\nConsole.WriteLine($"2 <= 2? {2 <= 2}"); // => true\nConsole.WriteLine($"2 >= 2? {2 >= 2}"); // => true\n'})}),"\n",(0,r.jsx)(n.h3,{id:"logical-operators",children:"Logical Operators"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"bool myBool;\n\nmyBool = (true && false); // Logical AND => (false)\nmyBool = (true || false); // Logical OR  => (true)\nmyBool = !(true);         // Logical NOT => (false)\n\nConsole.WriteLine(myBool);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"bitwise-operators",children:"Bitwise Operators"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"int myInteger;\n\n// The bitwise operators can manipulate individual bits inside an integer.\n\nmyInteger = 5 & 4;  // and (0b101 & 0b100 = 0b100 = 4)\nmyInteger = 5 | 4;  // or (0b101 | 0b100 = 0b101 = 5)\nmyInteger = 5 ^ 4;  // xor (0b101 ^ 0b100 = 0b001 = 1)\nmyInteger = 4 << 1; // left shift (0b100 << 1 = 0b1000 = 8)\nmyInteger = 4 >> 1; // right shift (0b100 >> 1 = 0b10 = 2)\nmyInteger = ~ 4;    // invert (~0b00000100 = 0b11111011 = -5)\n\n// These bitwise operators have shorthand assignment operators, just like the arithmetic operators.\n\nmyInteger = 5;\nmyInteger &= 4; // and (0b101 & 0b100 = 0b100 = 4)\n\nmyInteger = 5;\nmyInteger |= 4; // or (0b101 | 0b100 = 0b101 = 5)\n\nmyInteger = 5;\nmyInteger ^= 4; // xor (0b101 ^ 0b100 = 0b001 = 1)\n\nmyInteger = 5;\nmyInteger <<= 1; // left shift (0b101 << 1 = 0b1010 = 10)\n\nmyInteger = 5;\nmyInteger >>= 1; // right shift (0b101 >> 1 = 0b10 = 2)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"operator-precedents",children:"Operator Precedents"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"/*\n\n- parentheses ()\n\n- Postfix Increment and Decrement         ++, --\n- Prefix Increment, Decrement and Unary   ++, --, +, -, !, ~\n\n- Multiplicative                          *, /, %\n- Additive                                +, -\n\n- Shift                                   <<, >>\n- Relational                              <, <=, >, >=\n- Equality                                ==, !=\n\n- Bitwise AND                             &\n- Bitwise XOR                             ^\n- Bitwise OR                              |\n\n- Logical AND                             &&\n- Logical OR                              ||\n\n- Ternary                                 ? :\n- Assignment                              =, +=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>=\n\n*/\n"})}),"\n",(0,r.jsx)(n.h2,{id:"statements",children:(0,r.jsx)(n.strong,{children:"Statements"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/statements",children:(0,r.jsx)(n.strong,{children:"Microsoft Docs - Statements"})})}),"\n",(0,r.jsx)(n.h3,{id:"if-statements",children:"if-Statements"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="if...else if...else"',children:'int time = 22;\n\nif (time < 10)\n{\n  Console.WriteLine("Good morning.");\n}\nelse if (time < 20)\n{\n  Console.WriteLine("Good day.");\n}\nelse\n{\n  Console.WriteLine("Good evening.");\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="Ternary Operators"',children:'// A simple if/else can be written as follows\n// <condition> ? <true> : <false>\nint toCompare = 17;\nstring isTrue = toCompare == 17 ? "True" : "False";\n'})}),"\n",(0,r.jsx)(n.h3,{id:"switch-case",children:"switch case"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'// A switch works with the byte, short, char, and int data types.\n// It also works with enumerated types (discussed in Enum Types),\n// the String class, and a few special classes that wrap\n// primitive types: Character, Byte, Short, and Integer.\nint month = 3;\nstring monthString;\nswitch (month)\n{\n    case 1:\n        monthString = "January";\n        break;\n    case 2:\n        monthString = "February";\n        break;\n    case 3:\n        monthString = "March";\n        break;\n    // You can assign more than one case to an action\n    // But you can\'t add an action without a break before another case\n    // (if you want to do this, you would have to explicitly add a goto case x\n    case 6:\n    case 7:\n    case 8:\n        monthString = "Summer time!!";\n        break;\n    default:\n        monthString = "Some other month";\n        break;\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"while-dowhile",children:"while, do...while"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="While loop"',children:"\nint fooWhile = 0;\n\nwhile (fooWhile < 100)\n{\n    // Iterated 100 times, fooWhile 0->99\n    fooWhile++;\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="Do...While loop"',children:"// Do While Loop\nint fooDoWhile = 0;\n\ndo\n{\n    // Start iteration 100 times, fooDoWhile 0->99\n    if (false)\n    {\n        continue; // skip the current iteration\n    }\n\n    fooDoWhile++;\n\n    if (fooDoWhile == 50)\n    {\n        break; // breaks from the loop completely\n    }\n\n} while (fooDoWhile < 100);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"for-loop",children:"for-loop"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="For loop"',children:'for (int i = 0; i < 10; i++)\n{\n   Console.WriteLine($"value of i: {i}");\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="Nested loops"',children:'for (int i = 0; i < 10; i++)\n{\n   for (int j = 0; j < 10; j++) \n   {\n      Console.WriteLine($"i: {i}, j: {j}");\n   }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"foreach-loop",children:"foreach-loop"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="Foreach, in"',children:'ArrayList numbers = new ArrayList();\nnumbers.Add(1);\nnumbers.Add(2);\nnumbers.Add(3);\n\nConsole.WriteLine($"Count: {numbers.Count}");\n\nforeach (int number in numbers)\n{\n   Console.Write(number + " ");\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"return-statement",children:"return Statement"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"static int Add(int a, int b)\n{\n    return a + b;\n}\n\nstatic void Main(string[] args)\n{\n    Console.WriteLine(Add(1, 2));\n    return;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"yield-statement",children:"yield Statement"}),"\n",(0,r.jsx)(n.p,{children:"Das yield-Schl\xfcsselwort in C# wird in Iteratoren verwendet und erm\xf6glicht die schrittweise Bereitstellung von Werten, ohne dass eine gesamte Sammlung im Speicher gehalten werden muss. Es vereinfacht die Implementierung von Enumeratoren und verbessert die Speicher- sowie Performance-Effizienz."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Es gibt zwei Varianten:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"yield return"})," \u2013 Gibt einen einzelnen Wert zur\xfcck und pausiert die Methode, bis der n\xe4chste Wert angefordert wird."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"yield break"}),"  \u2013 Beendet die Iteration vorzeitig."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"static IEnumerable<int> Range(int from, int to)\n{\n    for (int i = from; i < to; i++)\n    {\n        yield return i;\n    }\n    yield break;\n}\n\nstatic void Main(string[] args)\n{\n    foreach (int x in Range(-10,10))\n    {\n        Console.WriteLine(x);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"yield ist besonders n\xfctzlich f\xfcr gro\xdfe Datenmengen, Streaming-Verarbeitung und Lazy Computation."}),"\n",(0,r.jsx)(n.h3,{id:"checked--unchecked",children:"checked / unchecked"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"static void Main(string[] args)\n{\n    int i = int.MaxValue;\n    checked\n    {\n        Console.WriteLine(i + 1);\n    }\n    // System.OverflowException \n    unchecked\n    {\n        Console.WriteLine(i + 1);\n    }\n    // Overflow - dies ist das default Verhalten: \n    // auch ohne das unchecked Statement w\xfcrde es zum Overflow kommen\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"lock-statement",children:"lock Statement"}),"\n",(0,r.jsxs)(n.p,{children:["Das lock-Statement in C# wird verwendet, um ",(0,r.jsx)(n.strong,{children:"Datenraces"})," und ",(0,r.jsx)(n.strong,{children:"Konkurrenzprobleme"})," bei der parallelen Ausf\xfchrung von Threads zu vermeiden.\nEs sorgt daf\xfcr, dass nur ein Thread gleichzeitig auf einen kritischen Abschnitt des Codes zugreifen kann, und verhindert so Konflikte."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Das lock-Objekt"}),(0,r.jsx)(n.br,{}),"\n","Das lock-Statement verwendet ein ",(0,r.jsx)(n.strong,{children:"Schl\xfcsselobjekt"}),", das von jedem Thread verwendet wird, um zu synchronisieren,\nwann ein Thread den Zugriff auf einen kritischen Abschnitt des Codes erlangen kann.\nSolange das lock-Objekt von einem Thread verwendet wird, kann kein andere Thread der dasselbe lock-Objekt nutzt fortfahren, sondern\nmuss warten bis das Objekt wieder freigegben wurde."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="Beispiel"',children:"class Counter\n{\n    private int _count = 0;\n    private readonly object _lockObj = new object();  // Lock-Objekt\n\n    public void Increment()\n    {\n        lock (_lockObj)\n        {\n            _count++;  // Nur ein Thread kann diesen Abschnitt gleichzeitig betreten\n        }\n    }\n\n    public int GetCount()\n    {\n        return _count;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"using-statement",children:"using Statement"}),"\n",(0,r.jsxs)(n.p,{children:["Das using-Statement in C# wird verwendet, um Ressourcen wie ",(0,r.jsx)(n.strong,{children:"Datenbankverbindungen"}),", ",(0,r.jsx)(n.strong,{children:"Dateihandles"})," oder ",(0,r.jsx)(n.strong,{children:"Netzwerkverbindungen"})," zu verwalten\nund sie nach Gebrauch ",(0,r.jsx)(n.strong,{children:"automatisch freizugeben"}),", sobald sie nicht mehr ben\xf6tigt werden."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"using"})," stellt sicher, dass Ressourcen nach ihrer Verwendung automatisch freigegeben werden, ohne dass man explizit eine Dispose()-Methode aufrufen musst."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"using (StreamReader reader = new StreamReader(\"datei.txt\"))\n{\n    string line = reader.ReadLine();\n    Console.WriteLine(line);\n}\n// Sobald der Block verlassen wird, wird 'reader.Dispose()' aufgerufen und die Datei wird automatisch geschlossen.\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"using-Direktive (Namespace)"}),"\nNeben dem using-Statement gibt es auch die using-Direktive, mit der du Namespaces importierst,\num den Code leserlicher zu machen und die Notwendigkeit zu vermeiden, lange Namespace-Pfade zu schreiben."]}),"\n",(0,r.jsx)(n.h3,{id:"exception-handling",children:"Exception Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'static double Divide(double x, double y)\n{\n    if (y == 0)\n    {\n      throw new DivideByZeroException();\n    }\n    return x / y;\n}\n\nstatic void Main(string[] args)\n{\n    try\n    {\n        if (args.Length != 2)\n        {\n            throw new Exception("Two numbers are required");\n        }\n        double x = double.Parse(args[0]);\n        double y = double.Parse(args[1]);\n        Console.WriteLine(Divide(x, y));\n    }\n\n    catch (Exception e)\n    {\n        Console.WriteLine(e.Message);\n    }\n\n    finally\n    {\n        Console.WriteLine("Terminating!");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"classes--methods",children:(0,r.jsx)(n.strong,{children:"Classes & Methods"})}),"\n",(0,r.jsx)(n.h2,{id:"object-oriented-programming",children:(0,r.jsx)(n.strong,{children:"Object-Oriented programming"})}),"\n",(0,r.jsx)(n.h2,{id:"delegates",children:(0,r.jsx)(n.strong,{children:"Delegates"})}),"\n",(0,r.jsx)(n.h2,{id:"events",children:(0,r.jsx)(n.strong,{children:"Events"})}),"\n",(0,r.jsx)(n.h2,{id:"constants",children:(0,r.jsx)(n.strong,{children:"Constants"})}),"\n",(0,r.jsx)(n.h2,{id:"linq",children:(0,r.jsx)(n.strong,{children:"LINQ"})}),"\n",(0,r.jsx)(n.h2,{id:"working-with-files",children:(0,r.jsx)(n.strong,{children:"Working with Files"})}),"\n",(0,r.jsx)(n.h2,{id:"string-interpolation",children:(0,r.jsx)(n.strong,{children:"String Interpolation"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'// {index der variablen die eingesetzt wird:FORMAT}\n// C - Currency; U - Universal full date/time\n// Ausgabe: 150,00 \u20ac Samstag, 8. Februar 2025 18:25:11\nstatic DateTime thisDate = DateTime.Now;\nConsole.WriteLine("{0:C} {1:U}", 150, thisDate);\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'using System;\nclass Sample \n{\n    enum Color {Yellow = 1, Blue, Green};\n    static DateTime thisDate = DateTime.Now;\n\n    public static void Main() \n    {\n        Console.Clear();\n\n        // Format a negative integer or floating-point number in various ways.\n        Console.WriteLine("Standard Numeric Format Specifiers");\n        Console.WriteLine(\n            "(C) Currency: . . . . . . . . {0:C}\\n" +\n            "(D) Decimal:. . . . . . . . . {0:D}\\n" +\n            "(E) Scientific: . . . . . . . {1:E}\\n" +\n            "(F) Fixed point:. . . . . . . {1:F}\\n" +\n            "(G) General:. . . . . . . . . {0:G}\\n" +\n            "    (default):. . . . . . . . {0} (default = \'G\')\\n" +\n            "(N) Number: . . . . . . . . . {0:N}\\n" +\n            "(P) Percent:. . . . . . . . . {1:P}\\n" +\n            "(R) Round-trip: . . . . . . . {1:R}\\n" +\n            "(X) Hexadecimal:. . . . . . . {0:X}\\n",\n            -123, -123.45f); \n\n        // Format the current date in various ways.\n        Console.WriteLine("Standard DateTime Format Specifiers");\n        Console.WriteLine(\n            "(d) Short date: . . . . . . . {0:d}\\n" +\n            "(D) Long date:. . . . . . . . {0:D}\\n" +\n            "(t) Short time: . . . . . . . {0:t}\\n" +\n            "(T) Long time:. . . . . . . . {0:T}\\n" +\n            "(f) Full date/short time: . . {0:f}\\n" +\n            "(F) Full date/long time:. . . {0:F}\\n" +\n            "(g) General date/short time:. {0:g}\\n" +\n            "(G) General date/long time: . {0:G}\\n" +\n            "    (default):. . . . . . . . {0} (default = \'G\')\\n" +\n            "(M) Month:. . . . . . . . . . {0:M}\\n" +\n            "(R) RFC1123:. . . . . . . . . {0:R}\\n" +\n            "(s) Sortable: . . . . . . . . {0:s}\\n" +\n            "(u) Universal sortable: . . . {0:u} (invariant)\\n" +\n            "(U) Universal full date/time: {0:U}\\n" +\n            "(Y) Year: . . . . . . . . . . {0:Y}\\n", \n            thisDate);\n\n        // Format a Color enumeration value in various ways.\n        Console.WriteLine("Standard Enumeration Format Specifiers");\n        Console.WriteLine(\n            "(G) General:. . . . . . . . . {0:G}\\n" +\n            "    (default):. . . . . . . . {0} (default = \'G\')\\n" +\n            "(F) Flags:. . . . . . . . . . {0:F} (flags or integer)\\n" +\n            "(D) Decimal number: . . . . . {0:D}\\n" +\n            "(X) Hexadecimal:. . . . . . . {0:X}\\n", \n            Color.Green);       \n    }\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="This code example produces the following results:"',children:"/*\nStandard Numeric Format Specifiers\n(C) Currency: . . . . . . . . ($123.00)\n(D) Decimal:. . . . . . . . . -123\n(E) Scientific: . . . . . . . -1.234500E+002\n(F) Fixed point:. . . . . . . -123.45\n(G) General:. . . . . . . . . -123\n    (default):. . . . . . . . -123 (default = 'G')\n(N) Number: . . . . . . . . . -123.00\n(P) Percent:. . . . . . . . . -12,345.00 %\n(R) Round-trip: . . . . . . . -123.45\n(X) Hexadecimal:. . . . . . . FFFFFF85\n\nStandard DateTime Format Specifiers\n(d) Short date: . . . . . . . 6/26/2004\n(D) Long date:. . . . . . . . Saturday, June 26, 2004\n(t) Short time: . . . . . . . 8:11 PM\n(T) Long time:. . . . . . . . 8:11:04 PM\n(f) Full date/short time: . . Saturday, June 26, 2004 8:11 PM\n(F) Full date/long time:. . . Saturday, June 26, 2004 8:11:04 PM\n(g) General date/short time:. 6/26/2004 8:11 PM\n(G) General date/long time: . 6/26/2004 8:11:04 PM\n    (default):. . . . . . . . 6/26/2004 8:11:04 PM (default = 'G')\n(M) Month:. . . . . . . . . . June 26\n(R) RFC1123:. . . . . . . . . Sat, 26 Jun 2004 20:11:04 GMT\n(s) Sortable: . . . . . . . . 2004-06-26T20:11:04\n(u) Universal sortable: . . . 2004-06-26 20:11:04Z (invariant)\n(U) Universal full date/time: Sunday, June 27, 2004 3:11:04 AM\n(Y) Year: . . . . . . . . . . June, 2004\n\nStandard Enumeration Format Specifiers\n(G) General:. . . . . . . . . Green\n    (default):. . . . . . . . Green (default = 'G')\n(F) Flags:. . . . . . . . . . Green (flags or integer)\n(D) Decimal number: . . . . . 3\n(X) Hexadecimal:. . . . . . . 00000003\n*/\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="The snippet below examplifies how to format strings in a table format."',children:'using System;\n\nclass Program {\n    static void Main(string[] args) {\n        string headers = $"{"First Name", -20} {"Last Name", -20} {"Value", -20} {"Time", -20}";\n        string line\t= $"{"Luiz", -20} {"Parente", -20} {20, -20:C} {DateTime.Now, -20:d}";\n\n        Console.WriteLine(headers);\n        Console.WriteLine(line);\n    }\n}\n\n/*\nThis code example produces the following results:\n\nFirst Name           Last Name            Value                Time                \nLuiz                 Parente              $20.00               2/9/2020            \n*/\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://gist.github.com/luizcentennial/c6353c2ae21815420e616a6db3897b4c",children:"Source"})}),"\n",(0,r.jsx)(n.h2,{id:"keywords",children:(0,r.jsx)(n.strong,{children:"Keywords"})})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},9329:(e,n,t)=>{t.d(n,{A:()=>a});t(6540);var i=t(4164);const r={tabItem:"tabItem_Ymn6"};var s=t(4848);function a(e){let{children:n,hidden:t,className:a}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,i.A)(r.tabItem,a),hidden:t,children:n})}},5537:(e,n,t)=>{t.d(n,{A:()=>C});var i=t(6540),r=t(4164),s=t(5627),a=t(6347),l=t(372),o=t(604),c=t(1861),d=t(8749);function h(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:r}}=e;return{value:n,label:t,attributes:i,default:r}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function g(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const r=(0,a.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(s),(0,i.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})}),[s,r])]}function p(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,s=u(e),[a,o]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!g({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:s}))),[c,h]=m({queryString:t,groupId:r}),[p,x]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,s]=(0,d.Dv)(t);return[r,(0,i.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:r}),f=(()=>{const e=c??p;return g({value:e,tabValues:s})?e:null})();(0,l.A)((()=>{f&&o(f)}),[f]);return{selectedValue:a,selectValue:(0,i.useCallback)((e=>{if(!g({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),x(e)}),[h,x,s]),tabValues:s}}var x=t(9136);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=t(4848);function j(e){let{className:n,block:t,selectedValue:i,selectValue:a,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),d=e=>{const n=e.currentTarget,t=o.indexOf(n),r=l[t].value;r!==i&&(c(n),a(r))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>{o.push(e)},onKeyDown:h,onClick:d,...s,className:(0,r.A)("tabs__item",f.tabItem,s?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function b(e){let{lazy:n,children:t,selectedValue:s}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===s));return e?(0,i.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function v(e){const n=p(e);return(0,y.jsxs)("div",{className:(0,r.A)("tabs-container",f.tabList),children:[(0,y.jsx)(j,{...n,...e}),(0,y.jsx)(b,{...n,...e})]})}function C(e){const n=(0,x.A)();return(0,y.jsx)(v,{...e,children:h(e.children)},String(n))}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(6540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);