"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[2912],{28453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>l});var i=s(96540);const r={},t=i.createContext(r);function d(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),i.createElement(t.Provider,{value:n},e.children)}},68586:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>d,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Csharp/Classes-OOP/Access-Modifier","title":"Access Modifiers","description":"","source":"@site/docs/04-Csharp/04-Classes-OOP/03-Access-Modifier.md","sourceDirName":"04-Csharp/04-Classes-OOP","slug":"/Csharp/Classes-OOP/Access-Modifier","permalink":"/my-documentation/docs/Csharp/Classes-OOP/Access-Modifier","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/04-Csharp/04-Classes-OOP/03-Access-Modifier.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"created":"2025-03-09, 11:33","title":"Access Modifiers","description":"","sidebar_position":3,"draft":false},"sidebar":"csharpSidebar","previous":{"title":"Classes & Objects","permalink":"/my-documentation/docs/Csharp/Classes-OOP/Classes-Objects"},"next":{"title":"Struct","permalink":"/my-documentation/docs/Csharp/Classes-OOP/Struct"}}');var r=s(74848),t=s(28453);const d={created:"2025-03-09, 11:33",title:"Access Modifiers",description:"",sidebar_position:3,draft:!1},l=void 0,a={},c=[];function o(e){const n={br:"br",em:"em",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Definition Assembly"})}),"\n",(0,r.jsx)(n.p,{children:"Eine Assembly ist in der .NET-Welt die kleinste zusammenh\xe4ngende Einheit, die vom Laufzeitsystem (CLR) verwaltet wird. Sie entsteht durch den Kompilierungsprozess und wird in Form einer ausf\xfchrbaren Datei (.exe) oder einer dynamischen Linkbibliothek (.dll) bereitgestellt. Eine Assembly enth\xe4lt:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Den kompilierten Code"})," in Intermediate Language (IL), der von der CLR zur Ausf\xfchrung in nativen Maschinencode umgewandelt wird."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Ein Manifest"}),", das Metadaten \xfcber die Assembly bereitstellt \u2013 dazu geh\xf6ren Versionierung, Kultur, Abh\xe4ngigkeiten zu anderen Assemblies und eine \xdcbersicht der enthaltenen Typen."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Optionale Ressourcen"})," wie Bilder, Texte oder andere Dateien, die innerhalb der Assembly eingebettet sind."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Access Modifier"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"public"}),(0,r.jsx)(n.br,{}),"\n","Auf Mitglieder, die als ",(0,r.jsx)(n.em,{children:"public"})," deklariert sind, kann ",(0,r.jsx)(n.strong,{children:"von \xfcberall"})," zugegriffen werden \u2013 also aus derselben Assembly sowie aus anderen Projekten, die auf diese Assembly verweisen."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"private"}),(0,r.jsx)(n.br,{}),"\n","Mitglieder, die als ",(0,r.jsx)(n.em,{children:"private"})," markiert sind, sind ",(0,r.jsx)(n.strong,{children:"ausschlie\xdflich innerhalb der eigenen Klasse"})," oder Struktur sichtbar. Das ist die restriktivste Zugriffsebene und die Standardeinstellung, wenn kein Modifizierer angegeben wird."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"internal"}),(0,r.jsx)(n.br,{}),"\n","Mit ",(0,r.jsx)(n.em,{children:"internal"})," deklarierte Mitglieder sind ",(0,r.jsx)(n.strong,{children:"nur innerhalb der gleichen Assembly"})," zug\xe4nglich. Dadurch bleibt der Zugriff auf den Code auf das aktuelle Projekt beschr\xe4nkt, w\xe4hrend er f\xfcr externe Assemblies unsichtbar bleibt."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"protected"}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.em,{children:"Protected"}),"-Mitglieder sind innerhalb der eigenen Klasse sowie in allen Klassen, die davon erben (",(0,r.jsx)(n.strong,{children:"abgeleitete Klassen"}),"), zug\xe4nglich \u2013 auch wenn diese in einer anderen Assembly definiert sind."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"protected internal"}),(0,r.jsx)(n.br,{}),"\n","Dieser Modifizierer kombiniert ",(0,r.jsx)(n.em,{children:"protected"})," und ",(0,r.jsx)(n.em,{children:"internal"}),": Ein Mitglied kann entweder innerhalb derselben Assembly (wie bei ",(0,r.jsx)(n.em,{children:"internal"}),") oder in abgeleiteten Klassen (wie bei ",(0,r.jsx)(n.em,{children:"protected"}),") verwendet werden. Es gilt also eine ODER-Bedingung."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"private protected"}),(0,r.jsx)(n.br,{}),"\n","Mit ",(0,r.jsx)(n.em,{children:"private protected"})," wird der Zugriff weiter eingeschr\xe4nkt: Das Mitglied ist nur in der eigenen Klasse und in abgeleiteten Klassen verf\xfcgbar, jedoch nur innerhalb derselben Assembly. Somit verhindert dieser Modifizierer den Zugriff aus abgeleiteten Klassen in anderen Assemblies."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Diese Zugriffsmodifizierer helfen dabei, die Sichtbarkeit von Klassen und deren Mitgliedern gezielt zu steuern und so eine saubere Kapselung und Strukturierung des Codes zu erreichen."})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);