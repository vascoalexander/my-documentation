"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[7264],{59754:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"Csharp/Strings/Format-Specifiers","title":"Format Specifiers","description":"","source":"@site/docs/04-Csharp/02-Strings/03-Format-Specifiers.md","sourceDirName":"04-Csharp/02-Strings","slug":"/Csharp/Strings/Format-Specifiers","permalink":"/my-documentation/docs/Csharp/Strings/Format-Specifiers","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/04-Csharp/02-Strings/03-Format-Specifiers.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"created":"2025-02-24, 07:03","title":"Format Specifiers","description":"","sidebar_position":3,"language":"C#","tags":[],"draft":false},"sidebar":"csharpSidebar","previous":{"title":"String Formatting","permalink":"/my-documentation/docs/Csharp/Strings/String-Formatting"},"next":{"title":"DateTime struct","permalink":"/my-documentation/docs/Csharp/Strings/DateTime Struct"}}');var r=t(74848),i=t(28453);const o={created:"2025-02-24, 07:03",title:"Format Specifiers",description:"",sidebar_position:3,language:"C#",tags:[],draft:!1},s=void 0,d={},l=[{value:"DateTime Formats",id:"datetime-formats",level:2}];function c(e){const n={code:"code",h2:"h2",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"datetime-formats",children:"DateTime Formats"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'DateTime tempDate = new DateTime(2025, 18, 02);\nConsole.WriteLine(tempDate.ToString("MMMM dd, yyyy"));\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'// Format a negative integer or floating-point number in various ways.\nConsole.WriteLine("Standard Numeric Format Specifiers");\nConsole.WriteLine(\n    "(C) Currency: . . . . . . . . {0:C}\\n" +\n    "(D) Decimal:. . . . . . . . . {0:D}\\n" +\n    "(E) Scientific: . . . . . . . {1:E}\\n" +\n    "(F) Fixed point:. . . . . . . {1:F}\\n" +\n    "(G) General:. . . . . . . . . {0:G}\\n" +\n    "    (default):. . . . . . . . {0} (default = \'G\')\\n" +\n    "(N) Number: . . . . . . . . . {0:N}\\n" +\n    "(P) Percent:. . . . . . . . . {1:P}\\n" +\n    "(R) Round-trip: . . . . . . . {1:R}\\n" +\n    "(X) Hexadecimal:. . . . . . . {0:X}\\n",\n    -123, -123.45f); \n\n// Format the current date in various ways.\nConsole.WriteLine("Standard DateTime Format Specifiers");\nConsole.WriteLine(\n    "(d) Short date: . . . . . . . {0:d}\\n" +\n    "(D) Long date:. . . . . . . . {0:D}\\n" +\n    "(t) Short time: . . . . . . . {0:t}\\n" +\n    "(T) Long time:. . . . . . . . {0:T}\\n" +\n    "(f) Full date/short time: . . {0:f}\\n" +\n    "(F) Full date/long time:. . . {0:F}\\n" +\n    "(g) General date/short time:. {0:g}\\n" +\n    "(G) General date/long time: . {0:G}\\n" +\n    "    (default):. . . . . . . . {0} (default = \'G\')\\n" +\n    "(M) Month:. . . . . . . . . . {0:M}\\n" +\n    "(R) RFC1123:. . . . . . . . . {0:R}\\n" +\n    "(s) Sortable: . . . . . . . . {0:s}\\n" +\n    "(u) Universal sortable: . . . {0:u} (invariant)\\n" +\n    "(U) Universal full date/time: {0:U}\\n" +\n    "(Y) Year: . . . . . . . . . . {0:Y}\\n", \n    thisDate);\n\n// Format a Color enumeration value in various ways.\nConsole.WriteLine("Standard Enumeration Format Specifiers");\nConsole.WriteLine(\n    "(G) General:. . . . . . . . . {0:G}\\n" +\n    "    (default):. . . . . . . . {0} (default = \'G\')\\n" +\n    "(F) Flags:. . . . . . . . . . {0:F} (flags or integer)\\n" +\n    "(D) Decimal number: . . . . . {0:D}\\n" +\n    "(X) Hexadecimal:. . . . . . . {0:X}\\n", \n    Color.Green);       \n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"/*\nStandard Numeric Format Specifiers\n(C) Currency: . . . . . . . . ($123.00)\n(D) Decimal:. . . . . . . . . -123\n(E) Scientific: . . . . . . . -1.234500E+002\n(F) Fixed point:. . . . . . . -123.45\n(G) General:. . . . . . . . . -123\n    (default):. . . . . . . . -123 (default = 'G')\n(N) Number: . . . . . . . . . -123.00\n(P) Percent:. . . . . . . . . -12,345.00 %\n(R) Round-trip: . . . . . . . -123.45\n(X) Hexadecimal:. . . . . . . FFFFFF85\n\nStandard DateTime Format Specifiers\n(d) Short date: . . . . . . . 6/26/2004\n(D) Long date:. . . . . . . . Saturday, June 26, 2004\n(t) Short time: . . . . . . . 8:11 PM\n(T) Long time:. . . . . . . . 8:11:04 PM\n(f) Full date/short time: . . Saturday, June 26, 2004 8:11 PM\n(F) Full date/long time:. . . Saturday, June 26, 2004 8:11:04 PM\n(g) General date/short time:. 6/26/2004 8:11 PM\n(G) General date/long time: . 6/26/2004 8:11:04 PM\n    (default):. . . . . . . . 6/26/2004 8:11:04 PM (default = 'G')\n(M) Month:. . . . . . . . . . June 26\n(R) RFC1123:. . . . . . . . . Sat, 26 Jun 2004 20:11:04 GMT\n(s) Sortable: . . . . . . . . 2004-06-26T20:11:04\n(u) Universal sortable: . . . 2004-06-26 20:11:04Z (invariant)\n(U) Universal full date/time: Sunday, June 27, 2004 3:11:04 AM\n(Y) Year: . . . . . . . . . . June, 2004\n\nStandard Enumeration Format Specifiers\n(G) General:. . . . . . . . . Green\n    (default):. . . . . . . . Green (default = 'G')\n(F) Flags:. . . . . . . . . . Green (flags or integer)\n(D) Decimal number: . . . . . 3\n(X) Hexadecimal:. . . . . . . 00000003\n*/\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var a=t(96540);const r={},i=a.createContext(r);function o(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);