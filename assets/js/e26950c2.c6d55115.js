"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[5709],{28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var s=i(96540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}},74053:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Tools/mise-und-poetry","title":"Mise & Poetry","description":"Diese Anleitung dokumentiert die Einrichtung einer modernen","source":"@site/docs/08-Tools/03-mise-und-poetry.md","sourceDirName":"08-Tools","slug":"/Tools/mise-und-poetry","permalink":"/my-documentation/docs/Tools/mise-und-poetry","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/08-Tools/03-mise-und-poetry.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Mise & Poetry","draft":false},"sidebar":"toolsSidebar","previous":{"title":"Docker","permalink":"/my-documentation/docs/Tools/Docker"}}');var r=i(74848),t=i(28453);const l={title:"Mise & Poetry",draft:!1},o="Entwicklungsumgebung mit mise, Poetry und pre-commit einrichten",d={},c=[{value:"\u2728 \xdcbersicht der Tools",id:"-\xfcbersicht-der-tools",level:2},{value:"mise",id:"mise",level:3},{value:"Poetry",id:"poetry",level:3},{value:"pre-commit",id:"pre-commit",level:3},{value:"\u26a1 Installation &amp; Setup",id:"-installation--setup",level:2},{value:"1. mise installieren",id:"1-mise-installieren",level:3},{value:"2. Python und Poetry \xfcber mise installieren",id:"2-python-und-poetry-\xfcber-mise-installieren",level:3},{value:"3. Projekt initialisieren",id:"3-projekt-initialisieren",level:3},{value:"5. Abh\xe4ngigkeiten verwalten",id:"5-abh\xe4ngigkeiten-verwalten",level:3},{value:"6. pre-commit einrichten",id:"6-pre-commit-einrichten",level:3},{value:"mise mit nodejs und yarn",id:"mise-mit-nodejs-und-yarn",level:2},{value:"\u2699 Wichtige Befehle",id:"-wichtige-befehle",level:2},{value:"mise",id:"mise-1",level:3},{value:"Poetry",id:"poetry-1",level:3},{value:"pre-commit",id:"pre-commit-1",level:3},{value:"\ud83d\udcc4 Hinweis zu <code>requirements.txt</code>",id:"-hinweis-zu-requirementstxt",level:2}];function a(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"entwicklungsumgebung-mit-mise-poetry-und-pre-commit-einrichten",children:"Entwicklungsumgebung mit mise, Poetry und pre-commit einrichten"})}),"\n",(0,r.jsxs)(n.p,{children:["Diese Anleitung dokumentiert die Einrichtung einer modernen\nPython-Entwicklungsumgebung unter Linux mit Hilfe von ",(0,r.jsx)(n.strong,{children:"mise"}),", ",(0,r.jsx)(n.strong,{children:"Poetry"}),"\nund ",(0,r.jsx)(n.strong,{children:"pre-commit"}),". Ziel ist eine saubere, reproduzierbare und einfach\nwartbare Projektstruktur."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-\xfcbersicht-der-tools",children:"\u2728 \xdcbersicht der Tools"}),"\n",(0,r.jsx)(n.h3,{id:"mise",children:"mise"}),"\n",(0,r.jsx)(n.p,{children:"Ein Runtime-Manager (Alternative zu asdf), der Sprachen wie Python, Node,\nGo etc. verwaltet. Nutzt TOML-Konfigurationsdateien f\xfcr per-Projekt-Versionen."}),"\n",(0,r.jsx)(n.h3,{id:"poetry",children:"Poetry"}),"\n",(0,r.jsxs)(n.p,{children:["Ein Tool zur Paketverwaltung f\xfcr Python. Es ersetzt ",(0,r.jsx)(n.code,{children:"pip"})," und ",(0,r.jsx)(n.code,{children:"virtualenv"}),"\ndurch ein ganzheitliches Konzept zur Projektverwaltung: Abh\xe4ngigkeiten,\nVersionierung, Packaging und Lockfiles."]}),"\n",(0,r.jsx)(n.h3,{id:"pre-commit",children:"pre-commit"}),"\n",(0,r.jsx)(n.p,{children:"Ein Framework zur Verwaltung von Git-Hooks, das automatisch Formatierung,\nLinting, uvm. beim Commit durchf\xfchren kann."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-installation--setup",children:"\u26a1 Installation & Setup"}),"\n",(0,r.jsx)(n.h3,{id:"1-mise-installieren",children:"1. mise installieren"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"curl https://mise.run | sh\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Dann in der Shell-Konfigurationsdatei aktivieren:",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Info:"})," mise activate setzt die tools / runtime Pfade auf $PATH"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"~/.bashrc"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# mise (Runtime Manager)\nif command -v mise &> /dev/null; then\n  eval "$(mise activate bash)"\nfi\n'})}),"\n",(0,r.jsx)(n.p,{children:"(mise activate zsh in der zshrc)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Beachte"}),": $PATH Variablen die nach der Aktivierung von Mise gesetzt werden\n\xfcberschreiben den von mise gesetzten Pfad ggfs.!"]}),"\n",(0,r.jsx)(n.h1,{id:"mise-completion-f\xfcr-zsh",children:"mise Completion f\xfcr Zsh"}),"\n",(0,r.jsx)(n.p,{children:"F\xfcr die autocompletion in der z-shell ben\xf6tigten wir das tool usage:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mise install usage\nmise set --global usage\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In der zshrc am Ende nach ",(0,r.jsx)(n.code,{children:"source $ZSH/oh-my-zsh.sh"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'autoload -Uz compinit\ncompinit\nautoload -U +X bashcompinit && bashcompinit\neval "$(mise completion zsh)"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Shell neustarten oder ",(0,r.jsx)(n.code,{children:"source ~/.zshrc"})," / ",(0,r.jsx)(n.code,{children:"source ~/.bashrc"})," oder ",(0,r.jsx)(n.code,{children:"zsh -l"})]}),"\n",(0,r.jsx)(n.h3,{id:"2-python-und-poetry-\xfcber-mise-installieren",children:"2. Python und Poetry \xfcber mise installieren"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mise install python@<python-version>\nmise install poetry@<poetry-version>\nmise use --global python@<python-version>\nmise use --global poetry@<poetry-version>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Hinweis: Anstelle der versionsnummer ",(0,r.jsx)(n.code,{children:"latest"})," setzen\num die aktuelleste stabile version zu nutzen."]}),"\n",(0,r.jsxs)(n.p,{children:["mise use --global setzt die tools / runtimes auf required in der globalen\nconfiguration. Wenn mise aktiviert wird, werden die pfade von den mit mise installierten\nruntimes in $PATH \xfcbernommen. Diese global gesetzten Pfade k\xf6nnen durch lokale in der\n",(0,r.jsx)(n.code,{children:"mise.toml"})," oder ",(0,r.jsx)(n.code,{children:"tool-versions"})," Datei gesetzte Pfade \xfcberschrieben werden."]}),"\n",(0,r.jsx)(n.h3,{id:"3-projekt-initialisieren",children:"3. Projekt initialisieren"}),"\n",(0,r.jsx)(n.p,{children:"Erstellen einer mise.toml falls die Python version von der global gesetzten\nabweicht oder andere configs n\xf6tig sind."}),"\n",(0,r.jsx)(n.p,{children:"F\xfcr bestehendes Projekt, dann die pyproject.toml anpassen (s.u.)."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"poetry init\n"})}),"\n",(0,r.jsx)(n.p,{children:"F\xfcr ein neues Projekt."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"poetry new my-project\n"})}),"\n",(0,r.jsx)(n.p,{children:"Operating mode setzen\nDefault ist true -> wenn das projekt als Paket genutzt werden soll und ggfs\nver\xf6ffentlicht."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:"[tool.poetry]\npackage-mode = false\n"})}),"\n",(0,r.jsx)(n.h3,{id:"5-abh\xe4ngigkeiten-verwalten",children:"5. Abh\xe4ngigkeiten verwalten"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"poetry add pillow pypdf2 ttkbootstrap\npoetry add --group dev ruff\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Wenn die Abh\xe4ngigkeiten gesetzt sind mit ",(0,r.jsx)(n.code,{children:"poetry install"})," installieren."]}),"\n",(0,r.jsx)(n.h3,{id:"6-pre-commit-einrichten",children:"6. pre-commit einrichten"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"poetry add --group dev pre-commit\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:".pre-commit-config.yaml"})," anlegen:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"repos:\n  - repo: https://github.com/psf/black\n    rev: 23.11.0\n    hooks:\n      - id: black\n\n  - repo: https://github.com/pre-commit/mirrors-isort\n    rev: v5.10.1\n    hooks:\n      - id: isort\n\n  - repo: https://github.com/charliermarsh/ruff-pre-commit\n    rev: v0.4.5\n    hooks:\n      - id: ruff\n"})}),"\n",(0,r.jsx)(n.p,{children:"Dann aktivieren:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"poetry run pre-commit install\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"mise-mit-nodejs-und-yarn",children:"mise mit nodejs und yarn"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Die package.json ist die absolute Wahrheit und definiert die Parameter und Abh\xe4ngigkeiten f\xfcr das Projekt"}),"\n",(0,r.jsx)(n.li,{children:"Mise stellt die node version bereit (mise.toml), node stellt \xfcber corepack die yarn version (package.json) bereit"}),"\n",(0,r.jsxs)(n.li,{children:["ggfs muss corepack einmalig aktiviert werden ",(0,r.jsx)(n.code,{children:"corepack enable"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-wichtige-befehle",children:"\u2699 Wichtige Befehle"}),"\n",(0,r.jsx)(n.h3,{id:"mise-1",children:"mise"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"mise install <tool>@<version>"})," \u2013 Installiert ein Tool in bestimmter Version"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"mise use -g <tool>@<version>"})," \u2013 Setzt globale Version"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"mise set <tool>@<version>"})," \u2013 Setzt Projekt-spezifische Version (generiert ",(0,r.jsx)(n.code,{children:".tool-versions"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"mise doctor"})," \u2013 Diagnose"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"mise cache clear"})," - Cache s\xe4ubern (zb bei build prozessen ggfs wichtig)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"mise run"})," - Run tasks"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"mise which"})," - Shows the path that a tool's bin points to."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"mise ls"})," - List installed and active tool versions"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"poetry-1",children:"Poetry"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"poetry init"})," \u2013 Projekt initialisieren"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"poetry add <pkg>"})," \u2013 Abh\xe4ngigkeit hinzuf\xfcgen"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"poetry install"})," \u2013 Abh\xe4ngigkeiten installieren"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"poetry shell"})," \u2013 Virtuelle Umgebung betreten"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"poetry run <cmd>"})," \u2013 Befehl in der Umgebung ausf\xfchren"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"poetry update"})," \u2013 Abh\xe4ngigkeiten aktualisieren"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"pre-commit-1",children:"pre-commit"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"poetry run pre-commit install"})," \u2013 Git-Hooks aktivieren"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"poetry run pre-commit run --all-files"})," \u2013 Alle Hooks manuell ausf\xfchren"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"-hinweis-zu-requirementstxt",children:["\ud83d\udcc4 Hinweis zu ",(0,r.jsx)(n.code,{children:"requirements.txt"})]}),"\n",(0,r.jsxs)(n.p,{children:["Poetry verwendet ",(0,r.jsx)(n.code,{children:"pyproject.toml"})," und ",(0,r.jsx)(n.code,{children:"poetry.lock"}),". Ein Export ist optional:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"poetry export -f requirements.txt --output requirements.txt  # Nur mit Plugin oder neueren Versionen\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"Damit steht ein solides, modulares Setup zur Verf\xfcgung, das sich leicht auf andere Projekte \xfcbertragen l\xe4sst."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);