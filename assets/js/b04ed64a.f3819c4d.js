"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[7859],{5793:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"Infrastruktur/Devops/Git/Grundlagen","title":"Grundlagen","description":"THE STAGING AREA","source":"@site/docs/06-Infrastruktur/04-Devops/01-Git/Grundlagen.mdx","sourceDirName":"06-Infrastruktur/04-Devops/01-Git","slug":"/Infrastruktur/Devops/Git/Grundlagen","permalink":"/my-documentation/docs/Infrastruktur/Devops/Git/Grundlagen","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/06-Infrastruktur/04-Devops/01-Git/Grundlagen.mdx","tags":[],"version":"current","frontMatter":{"draft":false},"sidebar":"infrastrukturSidebar","previous":{"title":"GIT","permalink":"/my-documentation/docs/category/git"}}');var i=n(4848),s=n(8453);const a={draft:!1},o=void 0,c={},h=[{value:"THE STAGING AREA",id:"the-staging-area",level:3},{value:"UNSTAGE (Reverse) A FILE / ALL FILES",id:"unstage-reverse-a-file--all-files",level:4},{value:"DISCARD LOCAL UNCOMMITTED CHANGES",id:"discard-local-uncommitted-changes",level:4},{value:"GIT PULL vs GIT FETCH",id:"git-pull-vs-git-fetch",level:3},{value:"GIT RESET --soft",id:"git-reset---soft",level:3},{value:"GIT RESET --hard",id:"git-reset---hard",level:3},{value:"GIT REBASE",id:"git-rebase",level:3},{value:"GIT MERGE",id:"git-merge",level:3},{value:"ADDING EMPTY DIRECTORIES TO REPOSITORY",id:"adding-empty-directories-to-repository",level:3},{value:"REMOVE DIRECTORY FROM REPOSITORY",id:"remove-directory-from-repository",level:3},{value:"CHANGE REMOTE REPOSITORY URL",id:"change-remote-repository-url",level:3}];function l(e){const t={code:"code",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h3,{id:"the-staging-area",children:"THE STAGING AREA"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Working Directory"}),": The working directory is where you make edits and create new files. It represents the current state of your project."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Staging Area"}),": Once you've made changes in your working directory that you wish to save, you first add these changes to the staging area. This area captures a snapshot of the modifications and prepares them for committing."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Repository"}),": When you're ready to finalize your changes, you commit the modifications from the staging area. This action saves a permanent snapshot of the changes in your Git repository, along with metadata such as who made the changes and when."]}),"\n"]}),"\n",(0,i.jsx)("div",{class:"img-center img-200",children:(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Staging",src:n(6112).A+""})})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"git add <file>    # adds changes in a file to the staging area\ngit add .         # adds all changes to the staging area\ngit diff          # shows unstaged changes in the working directory\ngit dif --staged  # shows changes that are staged for the next commit\ngit commit        # commits the staged changes\ngit reset <file>  # removes file from the staging area\n"})}),"\n",(0,i.jsx)(t.h4,{id:"unstage-reverse-a-file--all-files",children:"UNSTAGE (Reverse) A FILE / ALL FILES"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"git restore --staged <file-path>   # unstage specified file\ngit restore --staged .             # unstage all files\n"})}),"\n",(0,i.jsx)(t.h4,{id:"discard-local-uncommitted-changes",children:"DISCARD LOCAL UNCOMMITTED CHANGES"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"git restore .            # discard all uncommitted changes\ngit restore path/to/file # discard changes to specified file\ngit checkout -- .        # revert working directory to last commit\n"})}),"\n",(0,i.jsx)(t.h3,{id:"git-pull-vs-git-fetch",children:"GIT PULL vs GIT FETCH"}),"\n",(0,i.jsx)(t.p,{children:"git fetch is used to download updates from a remote repository to your local repository without merging or modifying your local branches.\nThis command allows you to review the changes before integrating them into your local branch."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"git fetch <remote>\n"})}),"\n",(0,i.jsx)(t.p,{children:"git pull is a combination of git fetch and git merge. It downloads changes and merges them into the current branch."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"git pull <remote> <branch>\n"})}),"\n",(0,i.jsx)(t.h3,{id:"git-reset---soft",children:"GIT RESET --soft"}),"\n",(0,i.jsxs)(t.p,{children:["When you use git reset --soft, Git moves the ",(0,i.jsx)(t.strong,{children:"HEAD"})," pointer to the specified commit while leaving the staging area and working directory unchanged.\nThis means that all changes from commits after the specified one will remain in the staging area, ready to be recommitted."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"git reset --soft HEAD~1\n"})}),"\n",(0,i.jsx)(t.p,{children:"This command moves the HEAD pointer one commit back. Changes made in the latest commit are transferred to the staging area:"}),"\n",(0,i.jsx)("div",{class:"img-center img-400",children:(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Soft-Reset",src:n(7195).A+""})})}),"\n",(0,i.jsx)(t.h3,{id:"git-reset---hard",children:"GIT RESET --hard"}),"\n",(0,i.jsx)(t.p,{children:"The git reset --hard option can be thought of as a nuclear option.\nIt moves the HEAD pointer to the specified commit, updates the staging area to match this commit,\nand also adjusts the working directory to exactly match the commit.\nAny changes from commits made after the specified commit will be completely discarded."}),"\n",(0,i.jsx)(t.h3,{id:"git-rebase",children:"GIT REBASE"}),"\n",(0,i.jsx)(t.p,{children:"Rebasing effectively saves the changes in your current branch, temporarily \u201cremoves\u201d the commits you\u2019ve made on your branch,\napplies the new commits from the other branch, and then reapplies your changes one commit at a time on top of these."}),"\n",(0,i.jsx)(t.p,{children:"It\u2019s important to note that rebasing rewrites commit history by generating new commits for each original commit.\nThis process can result in a cleaner and more understandable project history."}),"\n",(0,i.jsx)("div",{class:"img-center img-600",children:(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Git-Rebase",src:n(8288).A+""})})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Above Situation:"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"git checkout feature  \ngit rebase main\n"})}),"\n",(0,i.jsx)(t.p,{children:"After the rebase the Feature branch includes the commits from main and keeps the commits that have been commited earlier to the feature branch.\nThe main branch is untouched, but the commitment history has changed."}),"\n",(0,i.jsx)(t.p,{children:"If a conflict arises, Git will show you which files are conflicting.\nYou\u2019ll have to open these files, resolve the conflicts, and then continue the rebase like so:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# After resolving conflicts\ngit add .\ngit rebase --continue\n"})}),"\n",(0,i.jsx)(t.p,{children:"If you want to abort the rebase for any reason, you can do so with the following command:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"git rebase --abort\n"})}),"\n",(0,i.jsx)(t.h3,{id:"git-merge",children:"GIT MERGE"}),"\n",(0,i.jsx)(t.p,{children:"Once your feature is ready and tested, you\u2019ll want to merge it back into the main project.\nFirst, switch back to the branch you want to merge your changes into. Assuming you want to merge your changes to main branch:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"git checkout master\n"})}),"\n",(0,i.jsx)(t.p,{children:"Then, merge your feature branch:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"git merge <feature-branch>\n"})}),"\n",(0,i.jsx)(t.p,{children:"After merging your changes locally, push them to the remote repository to make them available to your teammate and update the live version of the website:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"git push origin master\n"})}),"\n",(0,i.jsx)(t.h3,{id:"adding-empty-directories-to-repository",children:"ADDING EMPTY DIRECTORIES TO REPOSITORY"}),"\n",(0,i.jsxs)(t.p,{children:["Create a placeholder file named .gitkeep in the empty directory.\nThe\xa0",(0,i.jsx)(t.strong,{children:".gitkeep"})," file has no special meaning to Git, but it\u2019s a widely-accepted convention that signals the intention to keep the directory in the repository."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'echo "" .gitkeep                                    # create .gitkeep file\ngit add .gitkeep                                    # stage the file\ngit commit -m "add empty directory with .gitkeep"   # commit the changes\n'})}),"\n",(0,i.jsx)(t.h3,{id:"remove-directory-from-repository",children:"REMOVE DIRECTORY FROM REPOSITORY"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"git rm -r <directory> # removes a dir from git repository recursively\n"})}),"\n",(0,i.jsx)(t.h3,{id:"change-remote-repository-url",children:"CHANGE REMOTE REPOSITORY URL"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"git remote -v                        # verify current remote repository\ngit remote set-url origin <new-url>  # set new url of origin\ngit remote -v                        # verify new remote repository url\ngit fetch origin                     # sync local repository to new remote\n"})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8288:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/git-rebase-40aeaad2bba2f6906d4a27b90ce3087b.svg"},7195:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/soft-reset-d188a44e6f7c5b7427a0671a43333647.svg"},6112:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/staging-4cf18707ff001af53fd1bf8d7d025371.svg"},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(6540);const i={},s=r.createContext(i);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);