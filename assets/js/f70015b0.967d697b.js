"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[4250],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(96540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},59069:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Csharp/Basics/Switch-Expressions","title":"Switch Expressions","description":"","source":"@site/docs/04-Csharp/01-Basics/09-Switch-Expressions.md","sourceDirName":"04-Csharp/01-Basics","slug":"/Csharp/Basics/Switch-Expressions","permalink":"/my-documentation/docs/Csharp/Basics/Switch-Expressions","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/04-Csharp/01-Basics/09-Switch-Expressions.md","tags":[{"inline":true,"label":"property","permalink":"/my-documentation/docs/tags/property"},{"inline":true,"label":"tuple","permalink":"/my-documentation/docs/tags/tuple"},{"inline":true,"label":"switch","permalink":"/my-documentation/docs/tags/switch"},{"inline":true,"label":"when","permalink":"/my-documentation/docs/tags/when"}],"version":"current","sidebarPosition":9,"frontMatter":{"created":"2025-02-23, 10:35","title":"Switch Expressions","description":"","siedbar_posisiton":9,"language":"C#","tags":["property","tuple","switch","when"]},"sidebar":"csharpSidebar","previous":{"title":"Statements","permalink":"/my-documentation/docs/Csharp/Basics/Statements"},"next":{"title":"Ternary Operators","permalink":"/my-documentation/docs/Csharp/Basics/Ternary-Operators"}}');var r=t(74848),i=t(28453);const a={created:"2025-02-23, 10:35",title:"Switch Expressions",description:"",siedbar_posisiton:9,language:"C#",tags:["property","tuple","switch","when"]},o=void 0,c={},l=[{value:"Switch Expression",id:"switch-expression",level:3},{value:"Property Pattern",id:"property-pattern",level:3},{value:"Tuple Pattern",id:"tuple-pattern",level:3},{value:"When-Klausel",id:"when-klausel",level:3}];function p(e){const n={code:"code",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"switch-expression",children:"Switch Expression"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'string currentColor = Console.ReadLine();\nstring action = currentColor switch\n\n{\n  "Rot" => "Anhalten",\n  "Gelb" => "Warten",\n  "Gr\xfcn" => "Fahren",\n  _ => throw new InvalidOperationException("Ung\xfcltige Farbe")\n};\n\nConsole.WriteLine(action);\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"property-pattern",children:"Property Pattern"}),"\n",(0,r.jsxs)(n.p,{children:["Eigenschaften von Objekten direkt im ",(0,r.jsx)(n.code,{children:"case"}),"-Ausdruck \xfcberpr\xfcfen"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class Punkt\n{\n  public int X { get; set; }\n  public int Y { get; set; }\n}\n\nPunkt p = new Punkt { X = 1, Y = 2 };\nstring beschreibung = p switch\n{\n  { X: 0, Y: 0 } => "Ursprung",\n  { X: 0, Y: var y } => $"Y-Achse, Y={y}",\n  { X: var x, Y: 0 } => $"X-Achse, X={x}",\n  { X: var x, Y: var y } => $"Punkt ({x}, {y})"\n};\n\nConsole.WriteLine(beschreibung); // Ausgabe: Punkt (1, 2)\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"tuple-pattern",children:"Tuple Pattern"}),"\n",(0,r.jsx)(n.p,{children:"mehrere Werte gleichzeitig in einem Tupel \xfcberpr\xfcfen"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'(int x, int y) = (1, 2);\nstring position = (x, y) switch\n{\n  (0, 0) => "Ursprung",\n  (0, _) => "Y-Achse",\n  (_, 0) => "X-Achse",\n  (_, _) => "Andere"\n};\n\nConsole.WriteLine(position); // Ausgabe: Andere\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"when-klausel",children:"When-Klausel"}),"\n",(0,r.jsxs)(n.p,{children:["zus\xe4tzliche Bedingungen mit ",(0,r.jsx)(n.code,{children:"when"})," hinzuf\xfcgen"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'Console.Write("Enter a number: ");\nint number = Convert.ToInt32(Console.ReadLine());\n\nswitch (number)\n{\n    case var x when x < 0:\n        Console.WriteLine("Less than 0");\n        break;\n    case var x when x >= 0 && x <= 3:\n        Console.WriteLine("Between 0 and 3");\n        break;\n    case var x when x > 3:\n        Console.WriteLine("Higher than 3");\n        break;\n};\n\nstring message = number switch\n{\n    var x when x < 0 => "Less than 0",\n    var x when x >= 0 && x <= 3 => "Between 0 and 3",\n    var x when x > 3 => "Higher than 3",\n};\nConsole.WriteLine(message);\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);