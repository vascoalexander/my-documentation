"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[8340],{11494:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>a,toc:()=>E});const a=JSON.parse('{"id":"DB/SQL/Datentypen","title":"Datentypen","description":"","source":"@site/docs/07-DB/02-SQL/04-Datentypen.md","sourceDirName":"07-DB/02-SQL","slug":"/DB/SQL/Datentypen","permalink":"/my-documentation/docs/DB/SQL/Datentypen","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/07-DB/02-SQL/04-Datentypen.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"description":"","draft":false,"title":"Datentypen"},"sidebar":"dbSidebar","previous":{"title":"DQL","permalink":"/my-documentation/docs/DB/SQL/DQL"},"next":{"title":"Operators","permalink":"/my-documentation/docs/DB/SQL/Operators"}}');var r=t(74848),i=t(28453);const o={sidebar_position:4,description:"",draft:!1,title:"Datentypen"},l=void 0,s={},E=[{value:"SQL Server",id:"sql-server",level:3}];function m(e){const n={code:"code",h3:"h3",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"sql-server",children:"SQL Server"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Numerische Datentypen:\nDECLARE @intExample INT = 123;                              -- Ganze Zahlen (4 Byte)\nDECLARE @bigIntExample BIGINT = 1234567890123;              -- Gro\xdfe ganze Zahlen (8 Byte)\nDECLARE @smallIntExample SMALLINT = 12345;                  -- Kleinere ganze Zahlen (2 Byte)\nDECLARE @tinyIntExample TINYINT = 255;                      -- Sehr kleine ganze Zahlen (1 Byte)\nDECLARE @decimalExample DECIMAL(10,2) = 12345.67;           -- Exakte Werte, (Pr\xe4zision, Skala)\nDECLARE @floatExample FLOAT = 123.456;                      -- Gleitkommazahlen (approx.)\n\n-- Geldwerte:\nDECLARE @moneyExample MONEY = 12345.67;                     -- W\xe4hrungswerte\nDECLARE @smallMoneyExample SMALLMONEY = 1234.56;            -- Kleinere Geldwerte\n\n-- Zeichenketten:\nDECLARE @charExample CHAR(10) = 'Hallo';                    -- Feste L\xe4nge\nDECLARE @varCharExample VARCHAR(50) = 'Hallo Welt';         -- Variable L\xe4nge\nDECLARE @nVarCharExample NVARCHAR(50) = N'Hallo Unicode';   -- Unicode, variable L\xe4nge\nDECLARE @textExample VARCHAR(MAX) = 'Langer Text...';       -- F\xfcr gro\xdfe Texte (statt TEXT)\n\n-- Datum und Zeit:\nDECLARE @dateExample DATE = '2025-02-13';                   -- Nur Datum\nDECLARE @timeExample TIME = '14:30:00';                     -- Nur Zeit\nDECLARE @dateTimeExample DATETIME = '2025-02-13 14:30:00';  -- Datum + Zeit\n\n-- Boolean:\nDECLARE @bitExample BIT = 1;                                -- 0 oder 1 (false/true)\n\n-- Bin\xe4re Datentypen:\nDECLARE @binaryExample BINARY(4) = 0x12345678;              -- Feste Bin\xe4rl\xe4nge\nDECLARE @varBinaryExample VARBINARY(50) = 0x1234567890;     -- Variable Bin\xe4rl\xe4nge\nDECLARE @varBinaryMaxExample VARBINARY(MAX) = 0xABCDEF;     -- Gro\xdfe Bin\xe4rdaten\n\n-- Sonstige:\nDECLARE @guidExample UNIQUEIDENTIFIER = NEWID();            -- Globally Unique Identifier (GUID)\n"})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var a=t(96540);const r={},i=a.createContext(r);function o(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);