"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[6634],{32933:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Csharp/Classes-OOP/Classes-Objects","title":"Classes & Objects","description":"","source":"@site/docs/04-Csharp/04-Classes-OOP/01-Classes-Objects.md","sourceDirName":"04-Csharp/04-Classes-OOP","slug":"/Csharp/Classes-OOP/Classes-Objects","permalink":"/my-documentation/docs/Csharp/Classes-OOP/Classes-Objects","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/04-Csharp/04-Classes-OOP/01-Classes-Objects.md","tags":[{"inline":true,"label":"Konstruktor","permalink":"/my-documentation/docs/tags/konstruktor"},{"inline":true,"label":"getter","permalink":"/my-documentation/docs/tags/getter"},{"inline":true,"label":"setter","permalink":"/my-documentation/docs/tags/setter"},{"inline":true,"label":"properties","permalink":"/my-documentation/docs/tags/properties"}],"version":"current","sidebarPosition":1,"frontMatter":{"created":"2025-02-23, 11:33","title":"Classes & Objects","description":"","sidebar_position":1,"language":"C#","tags":["Konstruktor","getter","setter","properties"]},"sidebar":"csharpSidebar","previous":{"title":"Classes & OOP","permalink":"/my-documentation/docs/category/classes--oop"},"next":{"title":"Struct","permalink":"/my-documentation/docs/Csharp/Classes-OOP/Struct"}}');var r=t(74848),i=t(28453);const a={created:"2025-02-23, 11:33",title:"Classes & Objects",description:"",sidebar_position:1,language:"C#",tags:["Konstruktor","getter","setter","properties"]},o=void 0,l={},c=[{value:"Simple Class with Constructor",id:"simple-class-with-constructor",level:2},{value:"Person Class with Full Name Property",id:"person-class-with-full-name-property",level:2},{value:"Explizite Getter und Setter",id:"explizite-getter-und-setter",level:2},{value:"Properties (ausf\xfchrliche Schreibweise)",id:"properties-ausf\xfchrliche-schreibweise",level:2},{value:"Expression-bodied Properties",id:"expression-bodied-properties",level:2},{value:"Properties (Auto-Properties)",id:"properties-auto-properties",level:2},{value:"Konstruktor mit \xdcberladung",id:"konstruktor-mit-\xfcberladung",level:2},{value:"Konstruktor Aufruf mit this",id:"konstruktor-aufruf-mit-this",level:2}];function u(e){const n={code:"code",h2:"h2",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"simple-class-with-constructor",children:"Simple Class with Constructor"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'public class Person \n{\n    public string Name {get, private set};\n    public int Age {get, private set};\n\n\t// Einfacher Konstruktor\n    public Person(string name, int age) \n    {\n        Name = name;\n        Age = age;\n    }\n    \n\tpublic void Greet() \n\t{  \n\t    Console.WriteLine($"Hallo, mein Name ist {Name} " +  \n\t                      $"und ich bin {Age} Jahre alt.");  \n\t}\n}\n\nclass Program \n{\n    static void Main() \n    {\n        Person p = new Person("Max", 30);\n        p.Greet();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"person-class-with-full-name-property",children:"Person Class with Full Name Property"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'public class Person  \n{  \n    public string FirstName { get; set; }  \n    public string LastName { get; set; }  \n  \n    public string FullName =>   \n        $"{FirstName ?? "Unknown"} {LastName ?? "Unknown"}";  \n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"explizite-getter-und-setter",children:"Explizite Getter und Setter"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'public class Person\n{\n    private string name;\n\n    // Getter-Methode\n    public string GetName()\n    {\n        return name;\n    }\n\n    // Setter-Methode\n    public void SetName(string value)\n    {\n        // Hier k\xf6nnte man auch Validierungen einbauen\n        name = value;\n    }\n}\n\n// Nutzung:\nvar person = new Person();\nperson.SetName("Max");\nConsole.WriteLine(person.GetName()); // Ausgabe: Max\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"properties-ausf\xfchrliche-schreibweise",children:"Properties (ausf\xfchrliche Schreibweise)"}),"\n",(0,r.jsx)(n.p,{children:"Properties kapseln intern oft ein privates Feld (Backing Field) und bieten einen direkten Zugriff \xfcber eine kompakte Syntax."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'public class Person\n{\n    private string _name;\n\n    public string Name\n    {\n        get { return _name; }\n        set { _name = value; }  // Hier k\xf6nnen auch Pr\xfcfungen eingebaut werden\n    }\n}\n\n// Nutzung:\nvar person = new Person();\nperson.Name = "Max";\nConsole.WriteLine(person.Name); // Ausgabe: Max\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"expression-bodied-properties",children:"Expression-bodied Properties"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"public class Papier  \n{  \n    private double _laenge;  \n    private double _breite;  \n  \n    public double Laenge  \n    {  \n        get => _laenge;  \n        set => _laenge = value;  \n    }  \n    public double Breite  \n    {  \n        get => _breite;  \n        set => _breite = value;  \n    }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"properties-auto-properties",children:"Properties (Auto-Properties)"}),"\n",(0,r.jsx)(n.p,{children:"Bei Auto-Properties \xfcbernimmt der Compiler die Erstellung eines versteckten Backing Fields"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'public class Person \n{ \n\tpublic string Name { get; set; } \n} \n// Nutzung: \nvar person = new Person { Name = "Max" }; Console.WriteLine(person.Name); \n// Ausgabe: Max\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"konstruktor-mit-\xfcberladung",children:"Konstruktor mit \xdcberladung"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'// man kann mehrere Konstruktoren mit verschiedenen Parametern\n// definieren (Konstruktor \xdcberladung)\nclass Person {\n    public string Name;\n    public int Age;\n\n    // Konstruktor 1\n    public Person(string name, int age) {\n        Name = name;\n        Age = age;\n    }\n\n    // Konstruktor 2 (Standardwerte)\n    public Person() {\n        Name = "Unbekannt";\n        Age = 0;\n    }\n}\n\nclass Program {\n    static void Main() {\n        Person p1 = new Person("Anna", 25);\n        Person p2 = new Person();  // Standardwerte werden gesetzt\n\n        Console.WriteLine($"{p1.Name}, {p1.Age} Jahre");\n        Console.WriteLine($"{p2.Name}, {p2.Age} Jahre");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"konstruktor-aufruf-mit-this",children:"Konstruktor Aufruf mit this"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'class Beispiel\n{\n    // Konstruktor ohne Parameter, der den anderen Konstruktor \n    // mit this(..., ...) aufruft\n    public Beispiel() : this("Heute ist der ", DateTime.Today)\n    {\n    }\n    \n    // Konstruktor mit zwei Parametern\n    public Beispiel(string text, DateTime datum)\n    {\n        Console.WriteLine(text + datum.ToShortDateString());\n    }\n    \n    // Hauptmethode\n    public static void Main(string[] args)\n    {\n\t    Beispiel beispiel1 = new Beispiel("Morgen ist der ", DateTime.Today.AddDays(1));\n        // Aufruf des ersten Konstruktors\n        // Ausgabe: Morgen ist der {dd.MM.yyyy}\n        \n        Beispiel beispiel2 = new Beispiel();\n        // Aufruf des zweiten Konstruktors\n        // Ausgabe: Heute ist der {dd.MM.yyyy}\n    }\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(96540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);