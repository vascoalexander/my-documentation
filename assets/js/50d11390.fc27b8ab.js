"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[7246],{90658:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"Csharp/Basics/Conversion-Casting","title":"Conversion & Casting","description":"","source":"@site/docs/04-Csharp/01-Basics/11-Conversion-Casting.md","sourceDirName":"04-Csharp/01-Basics","slug":"/Csharp/Basics/Conversion-Casting","permalink":"/my-documentation/docs/Csharp/Basics/Conversion-Casting","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/04-Csharp/01-Basics/11-Conversion-Casting.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"created":"2025-02-23, 10:25","title":"Conversion & Casting","description":"","sidebar_position":11,"language":"C#","tags":[]},"sidebar":"csharpSidebar","previous":{"title":"Ternary Operators","permalink":"/my-documentation/docs/Csharp/Basics/Ternary-Operators"},"next":{"title":"Generics","permalink":"/my-documentation/docs/Csharp/Basics/Generics"}}');var r=t(74848),i=t(28453);const s={created:"2025-02-23, 10:25",title:"Conversion & Casting",description:"",sidebar_position:11,language:"C#",tags:[]},a=void 0,c={},l=[{value:"Type Conversion",id:"type-conversion",level:2},{value:"Type Casting",id:"type-casting",level:2},{value:"Type Testoperatoren",id:"type-testoperatoren",level:2},{value:"<code>is</code> Operator",id:"is-operator",level:3},{value:"<code>as</code> Operator",id:"as-operator",level:3},{value:"Related Links",id:"related-links",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"type-conversion",children:"Type Conversion"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"Convert.ToBoolean(x);    // Converts a type to a Boolean value\nConvert.ToByte(x);       // Converts a type to a byte\nConvert.ToChar(x);       // Converts a type to a single Unicode character\nConvert.ToDateTime(x);   // Converts a type (integer or string type) to date-time structures\nConvert.ToDecimal(x);    // Converts a floating point or integer type to a decimal type\nConvert.ToDouble(x);     // Converts a type to a double type\nConvert.ToInt16(x);      // Converts a type to a 16-bit integer\nConvert.ToInt32(x);      // Converts a type to a 32-bit integer\nConvert.ToInt64(x);      // Converts a type to a 64-bit integer\nConvert.ToSbyte(x);      // Converts a type to a signed byte type\nConvert.ToSingle(x);     // Converts a type to a small floating point number\nConvert.ToString(x);     // Converts a type to a string\nConvert.ToType(x);       // Converts a type to a specified type\nConvert.ToUInt16(x);     // Converts a type to an unsigned int type\nConvert.ToUInt32(x);     // Converts a type to an unsigned long type\nConvert.ToUInt64(x);     // Converts a type to an unsigned big integer\n"})}),"\n",(0,r.jsx)(n.h2,{id:"type-casting",children:"Type Casting"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Implizite Konvertierung (automatisch)"}),(0,r.jsx)(n.br,{}),"\n","Eine Umwandlung, die automatisch erfolgt, weil sie sicher ist (d.\u202fh. es geht keine Information verloren)."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"converting a smaller type to a larger type size"}),(0,r.jsx)(n.br,{}),"\n","char -> int -> long -> float -> double"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"int zahl = 42;\ndouble d = zahl;  \n// int -> double: implizite Umwandlung (widening conversion)\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Explizite Konvertierung (manuell)"}),(0,r.jsx)(n.br,{}),"\n","Eine Umwandlung, bei der der Programmierer ausdr\xfccklich angibt, dass ein Typ in einen anderen umgewandelt werden soll.\nDies ist oft erforderlich, wenn Daten verloren gehen k\xf6nnen oder die Konvertierung nicht automatisch durchgef\xfchrt wird (narrowing conversion)."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"converting a larger type to a smaller size type:"}),(0,r.jsx)(n.br,{}),"\n","double -> float -> long -> int -> char"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"double pi = 3.14159;\nint ganzZahl = (int)pi;  \n// double -> int: explizite Umwandlung, Nachkommabereich geht verloren\n"})}),"\n",(0,r.jsx)(n.h2,{id:"type-testoperatoren",children:"Type Testoperatoren"}),"\n",(0,r.jsxs)(n.h3,{id:"is-operator",children:[(0,r.jsx)(n.code,{children:"is"})," Operator"]}),"\n",(0,r.jsx)(n.p,{children:"Pr\xfcft, ob ein Objekt zu einem bestimmten Typ kompatibel ist."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'if (obj is string)\n{\n    Console.WriteLine("obj ist ein String.");\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"as-operator",children:[(0,r.jsx)(n.code,{children:"as"})," Operator"]}),"\n",(0,r.jsx)(n.p,{children:"Versucht, ein Objekt in einen bestimmten Typ zu konvertieren, und gibt dabei null zur\xfcck, falls die Konvertierung nicht m\xf6glich ist."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"SomeType x = y as SomeType;\nif (x != null)\n{\n  // Do something\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"related-links",children:"Related Links"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/types/casting-and-type-conversions",children:(0,r.jsx)(n.strong,{children:"Microsoft Docs - Casting and Type Conversions"})}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/de-de/dotnet/csharp/language-reference/language-specification/conversions#103-explicit-conversions",children:"Microsoft C# Spezifikationen - Explizite Konvertierung"})]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var o=t(96540);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);