"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[1047],{1726:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Csharp/Basics/Enum","title":"Enums","description":"","source":"@site/docs/04-Csharp/01-Basics/06-Enum.md","sourceDirName":"04-Csharp/01-Basics","slug":"/Csharp/Basics/Enum","permalink":"/my-documentation/docs/Csharp/Basics/Enum","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/04-Csharp/01-Basics/06-Enum.md","tags":[{"inline":true,"label":"menu","permalink":"/my-documentation/docs/tags/menu"},{"inline":true,"label":"switch","permalink":"/my-documentation/docs/tags/switch"},{"inline":true,"label":"enum","permalink":"/my-documentation/docs/tags/enum"}],"version":"current","sidebarPosition":6,"frontMatter":{"created":"2025-02-23, 14:37","title":"Enums","description":"","sidebar_position":6,"language":"C#","tags":["menu","switch","enum"]},"sidebar":"csharpSidebar","previous":{"title":"Tuples","permalink":"/my-documentation/docs/Csharp/Basics/Tuples"},"next":{"title":"Operatoren","permalink":"/my-documentation/docs/Csharp/Basics/Operatoren"}}');var i=t(74848),a=t(28453);const s={created:"2025-02-23, 14:37",title:"Enums",description:"",sidebar_position:6,language:"C#",tags:["menu","switch","enum"]},o=void 0,u={},c=[{value:"Enum.GetName()",id:"enumgetname",level:2},{value:"Cast zu numerischen Typen",id:"cast-zu-numerischen-typen",level:2},{value:"Numerische Typen zu Enums",id:"numerische-typen-zu-enums",level:2},{value:"Enum.Parse",id:"enumparse",level:2},{value:"Iterieren \xfcber ein enum",id:"iterieren-\xfcber-ein-enum",level:2},{value:"Enum mit Extensionklasse",id:"enum-mit-extensionklasse",level:2},{value:"Enum mit switch case",id:"enum-mit-switch-case",level:2},{value:"Enums und Flags",id:"enums-und-flags",level:2},{value:"Related Links",id:"related-links",level:2}];function l(n){const e={a:"a",code:"code",h2:"h2",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"Enums in C# sind eine Gruppe zusammengeh\xf6riger Konstanten."}),"\n",(0,i.jsx)(e.h2,{id:"enumgetname",children:"Enum.GetName()"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-csharp",children:"public enum Color {\n    RED = 1,\n    GREEN = 2,\n    BLUE = 3\n}\n\nstring name = Enum.GetName(typeof(Color), 2);\nConsole.WriteLine(name); // Ausgabe: GREEN\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"cast-zu-numerischen-typen",children:"Cast zu numerischen Typen"}),"\n",(0,i.jsx)(e.p,{children:"In C# sind Enums im Grunde genommen benannte numerische Konstanten."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-csharp",children:"enum Wochentage { Montag, Dienstag, Mittwoch, Donnerstag, Freitag, Samstag, Sonntag }\n\nWochentage heute = Wochentage.Dienstag;\nint tagesnummer = (int)heute; // tagesnummer ist 1\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"numerische-typen-zu-enums",children:"Numerische Typen zu Enums"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-csharp",children:"Wochentage tag = (Wochentage)2; // tag ist Wochentage.Mittwoch\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"enumparse",children:"Enum.Parse"}),"\n",(0,i.jsxs)(e.p,{children:["C# bietet die ",(0,i.jsx)(e.code,{children:"Enum.Parse()"}),"- und ",(0,i.jsx)(e.code,{children:"Enum.TryParse()"}),"-Methoden, um Strings in Enum-Werte zu konvertieren."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-csharp",children:'Wochentage tag = (Wochentage)Enum.Parse(typeof(Wochentage), "Freitag");\n'})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"iterieren-\xfcber-ein-enum",children:"Iterieren \xfcber ein enum"}),"\n",(0,i.jsxs)(e.p,{children:["Die ",(0,i.jsx)(e.code,{children:"Enum.GetValues()"}),"-Methode gibt ein Array mit den Werten der konstanten Elemente eines angegebenen Enumerationstyps zur\xfcck."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-csharp",children:"enum Wochentage { Montag, Dienstag, Mittwoch, Donnerstag, Freitag, Samstag, Sonntag }\n\nArray wochentage = Enum.GetValues(typeof(Wochentage));\nforeach (Wochentage tag in wochentage)\n{\n    Console.WriteLine(tag);\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"enum-mit-extensionklasse",children:"Enum mit Extensionklasse"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-csharp",children:'public enum Color\n{\n    Red,\n    Green,\n    Blue\n}\n\npublic static class ColorExtensions\n{\n    public static string Description(this Color color)\n    {\n        switch (color)\n        {\n            case Color.Red:\n                return "This is red";\n            case Color.Green:\n                return "This is green";\n            case Color.Blue:\n                return "This is blue";\n            default:\n                return "Unknown color";\n        }\n    }\n}\n\n// Verwendung:\nColor myColor = Color.Green;\nstring description = myColor.Description();\nConsole.WriteLine(description); // Ausgabe: This is green\n'})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"enum-mit-switch-case",children:"Enum mit switch case"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-csharp",children:'enum MenuOptionen  \n{  \n\tNeueDatei,  \n\tDatei\xd6ffnen,  \n\tDateiSpeichern,  \n\tBeenden  \n}\n\nstatic void Main()  \n{        \n\tswitch (GetMenuChoice())  \n\t{            \n\t\tcase MenuOptionen.NeueDatei:  \n\t\t\tConsole.WriteLine("Neue Datei wird erstellt...");  \n\t\t\tbreak;  \n\t\tcase MenuOptionen.Datei\xd6ffnen:  \n\t\t\tConsole.WriteLine("Datei wird ge\xf6ffnet...");  \n\t\t\tbreak;  \n\t\tcase MenuOptionen.DateiSpeichern:  \n\t\t\tConsole.WriteLine("Datei wird gespeichert...");  \n\t\t\tbreak;  \n\t\tcase MenuOptionen.Beenden:  \n\t\t\tConsole.WriteLine("Anwendung wird beendet...");  \n\t\t\tEnvironment.Exit(0);  \n\t\t\tbreak;  \n\t\tdefault:  \n\t\t\tConsole.WriteLine("Ung\xfcltige Option.");  \n\t\t\tbreak;  \n\t}    \n}\n\nstatic MenuOptionen GetMenuChoice()  \n{        \n\tConsole.WriteLine("Bitte w\xe4hlen Sie eine Option:");  \n\tConsole.WriteLine("1. Neue Datei");  \n\tConsole.WriteLine("2. Datei \xf6ffnen");  \n\tConsole.WriteLine("3. Datei speichern");  \n\tConsole.WriteLine("4. Beenden");  \n\n\tint choice;  \n\twhile (!int.TryParse(Console.ReadLine(), out choice))  \n\t\tConsole.WriteLine("Ung\xfcltige Eingabe.");  \n\treturn (MenuOptionen)(choice - 1);  \n}\n'})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-csharp",children:"public enum VerbindungsStatus\n{\n\tGetrennt,\n\tVerbindet,\n\tVerbunden,\n\tFehler\n}\n\npublic void VerbindungsStatusVerarbeiten(VerbindungsStatus status)\n{\n\tswitch (status)\n\t{\n\t\tcase VerbindungsStatus.Getrennt:\n\t\t\t// Logik zum Herstellen einer Verbindung\n\t\t\tbreak;\n\t\tcase VerbindungsStatus.Verbindet:\n\t\t\t// Logik, w\xe4hrend der Verbindungsvorgang l\xe4uft\n\t\t\tbreak;\n\t\tcase VerbindungsStatus.Verbunden:\n\t\t\t// Logik f\xfcr eine aktive Verbindung\n\t\t\tbreak;\n\t\tcase VerbindungsStatus.Fehler:\n\t\t\t// Fehlerbehandlungslogik\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-csharp",children:'public enum BenutzerRolle\n{\n\tAdministrator,\n\tModerator,\n\tBenutzer,\n\tGast\n}\n\npublic bool HatZugriff(BenutzerRolle rolle, string ressource)\n{\n\tswitch (rolle)\n\t{\n\t\tcase BenutzerRolle.Administrator:\n\t\t\treturn true;\n\t\tcase BenutzerRolle.Moderator:\n\t\t\treturn ressource != "Admin-Bereich";\n\t\tcase BenutzerRolle.Benutzer:\n\t\t\treturn ressource == "Benutzer-Bereich";\n\t\tcase BenutzerRolle.Gast:\n\t\t\treturn false;\n\t\tdefault:\n\t\t\treturn false;\n\t}\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"enums-und-flags",children:"Enums und Flags"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-csharp",children:'namespace Enums;\n\n[Flags] \npublic enum Month\n{               // In Binary\n    Jan = 1,    // 000000000001\n    Feb = 2,    // 000000000010\n    Mar = 4,    // 000000000100\n    Apr = 8,    // 000000001000\n    May = 16,   // 000000010000\n    Jun = 32,   // 000000100000\n    Jul = 64,   // 000001000000\n    Aug = 128,  // 000010000000\n    Sep = 256,  // 000100000000\n    Oct = 512,  // 001000000000\n    Nov = 1024, // 010000000000\n    Dec = 2048  // 100000000000\n}\n\npublic enum ReportType\n{\n    Sum,\n    Average,\n    Min,\n    Max\n}\nclass Program\n{\n    static void Main()\n    {\n        decimal[] data = new decimal[12];\n        PopulateMonthlyExpenditureData(data);\n\n        Month months = Month.Apr | Month.Aug;\n        // bitwise OR => 10001000 => flags f\xfcr April und August gesetzt = 136 als int\n        \n        decimal[] reportData = GetReportData(months, data);\n\n        OutputReport(ReportType.Sum, months, reportData);\n        OutputReport(ReportType.Average, months, reportData);\n        OutputReport(ReportType.Min, months, reportData);\n        OutputReport(ReportType.Max, months, reportData);\n        \n        Console.ReadKey();\n    }\n    \n    public static void OutputReport(ReportType reportType, Month includedMonths, decimal[] reportData)\n    {\n        switch (reportType)\n        {\n            case ReportType.Sum:\n                Console.WriteLine($"Total expenditure for months, {includedMonths} is {reportData.Sum()}");\n                break;\n            case ReportType.Average:\n                Console.WriteLine($"Average expenditure for months, {includedMonths} is {reportData.Average()}");\n                break;\n            case ReportType.Min:\n                Console.WriteLine($"Min expenditure for months, {includedMonths} is {reportData.Min()}");\n                break;\n            case ReportType.Max:\n                Console.WriteLine($"Max expenditure for months, {includedMonths} is {reportData.Max()}");\n                break;\n            default:\n                throw new Exception("Invalid report type!");\n        }\n    }\n\n    public static decimal[] GetReportData(Month months, decimal[] data)\n    {\n        int count = 0;\n        int testMonthInclusion = 0;\n\n        int reportDataLength = CountBits((int)months);\n\n        decimal[] reportData = new decimal[reportDataLength];\n\n        int index = 0;\n\n        foreach (var item in Enum.GetValues(typeof(Month)))\n        {\n            testMonthInclusion = (int)months & (int)item;\n\n            if (testMonthInclusion > 0)\n            {\n                index = (int)Math.Round(Math.Log((int)item, 2));\n\n                reportData[count] = data[index];\n\n                count++;\n            }\n        }\n\n        return reportData;\n    }\n    public static int CountBits(int value)\n    {\n        // Brian Kernighans\'s Algorithm\n        // Counts the number of set bits\n        \n        int count = 0;\n\n        while (value != 0)\n        {\n            count++;\n            value &= value - 1;\n            // 10001000 & (136)\n            // 10000111   (135)\n            // 10000000   (128)\n        }\n\n        return count;\n    }\n\n    public static void PopulateMonthlyExpenditureData(decimal[] data)\n    {\n        data[0] = 5000;\n        data[1] = 3000.50m;\n        data[2] = 4000.30m;\n        data[3] = 2000;\n        data[4] = 3500;\n        data[5] = 4000.20m;\n        data[6] = 1000.50m;\n        data[7] = 500;\n        data[8] = 600;\n        data[9] = 6000;\n        data[10] = 3000;\n        data[11] = 10000;\n    }\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"related-links",children:"Related Links"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/enum",children:(0,i.jsx)(e.strong,{children:"Microsoft Docs - Enumeration Types"})})})]})}function d(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>o});var r=t(96540);const i={},a=r.createContext(i);function s(n){const e=r.useContext(a);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),r.createElement(a.Provider,{value:e},n.children)}}}]);