"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[949],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(96540);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}},46287:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Csharp/Classes-OOP/Methoden-Funktionen","title":"Methoden & Funktionen","description":"","source":"@site/docs/04-Csharp/04-Classes-OOP/01-Methoden-Funktionen.md","sourceDirName":"04-Csharp/04-Classes-OOP","slug":"/Csharp/Classes-OOP/Methoden-Funktionen","permalink":"/my-documentation/docs/Csharp/Classes-OOP/Methoden-Funktionen","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/04-Csharp/04-Classes-OOP/01-Methoden-Funktionen.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"created":"2025-03-02, 09:10","title":"Methoden & Funktionen","description":"","sidebar_position":1,"draft":false},"sidebar":"csharpSidebar","previous":{"title":"Classes & OOP","permalink":"/my-documentation/docs/category/classes--oop"},"next":{"title":"Classes & Objects","permalink":"/my-documentation/docs/Csharp/Classes-OOP/Classes-Objects"}}');var s=t(74848),a=t(28453);const i={created:"2025-03-02, 09:10",title:"Methoden & Funktionen",description:"",sidebar_position:1,draft:!1},o=void 0,d={},c=[{value:"Named Parameters",id:"named-parameters",level:2},{value:"Out Parameters",id:"out-parameters",level:2},{value:"Ref Parameters",id:"ref-parameters",level:2},{value:"Generische Parametern",id:"generische-parametern",level:2},{value:"Generischer R\xfcckgabewert",id:"generischer-r\xfcckgabewert",level:2},{value:"Dynamischer R\xfcckgabewert",id:"dynamischer-r\xfcckgabewert",level:2}];function l(e){const n={code:"code",h2:"h2",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"named-parameters",children:"Named Parameters"}),"\n",(0,s.jsx)(n.p,{children:"Namentliche Parameter Zuweisung beim Function-Call. Die Reihenfolge der Parameter spielt in dem Fall keine Rolle mehr."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'static void Main()\n{\n\tstring nameInput = "MyName";\n\tint ageInput = "MyAge";\n\tstring addressInput = "MyAddress";\n\t\n\tPrintDetails(age: ageInput, name: nameInput, address: addressInput)\n}\nstatic void PrintDetails(string name, int age, string address)\n{\n\tConsole.WriteLine($"Name: {name}; Age: {age}; Address: {address}")\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"out-parameters",children:"Out Parameters"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'static void Main()\n{\n\tvar shoppingList = new List<string> {"Coffee", "Milk"};\n\tConsole.Write("Enter an item to search: ");\n\tstring search = Console.ReadLine();\n\t\n\tConsole.WriteLine((FindInList(search, shoppingList, out int index)) ?  \n\t    $"Found {search} at index {index}" :   \n\t    $"{search} not Found");\n}\n\nstatic bool FindInList(string s, List<string> list, out int index)\n{\n\tindex = -1;\n\tfor (int i = 0; i < list.Count; i++)\n\t{\n\t\tif (list[i].ToLower().Equals(s.ToLower()))\n\t\t\tindex = i;\n\t}\n\treturn index > -1;\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"ref-parameters",children:"Ref Parameters"}),"\n",(0,s.jsx)(n.p,{children:"Assigns a Parameter by its Reference (reference to the location in memory)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'string name = "John";\nConsole.Write("Enter your new name: ");\nstring newName = Console.ReadLine();\n\nif (ChangeName(ref name, newName))\n\tConsole.WriteLine($"Your new name is {name}!");\nelse\n\tConsole.WriteLine($"New name cannot be empty or null!");\n\nstatic bool ChangeName(ref string name, string newName)\n{\n\tif (!string.IsNullOrEmpty(newName))\n\t{\n\t\tname = newName;\n\t\treturn true;\n\t}\n\treturn false;\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"generische-parametern",children:"Generische Parametern"}),"\n",(0,s.jsxs)(n.p,{children:["Generics are not specific to a particular data type. Add ",(0,s.jsx)(n.code,{children:"<T>"})," to: classes, methods, fields, etc.\nAllows for code reusability for different data types."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'int[] intArray = { 1, 2, 3 };\ndouble[] doubleArray = { 1.0, 2.0, 3.0 };\nstring[] stringArray = { "1", "2", "3" };\n\nDisplayElements(inArray);\nDisplayElements(doubleArray);\nDisplayElements(stringArray);\n\npublic static void DisplayElements<T>(T[] array)\n{\n\tforeach (T item in array)\n\t{\n\t\tConsole.WriteLine(item + " ");\n\t}\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"generischer-r\xfcckgabewert",children:"Generischer R\xfcckgabewert"}),"\n",(0,s.jsx)(n.p,{children:"Bei generischen Methoden definierst du einen Typparameter in der Methodensignatur. So kann der Aufrufer den Typ bestimmen, der zur\xfcckgegeben werden soll."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public T GetValue<T>(object input) \n{ \n\t(T)Convert.ChangeType(input, typeof(T)); \n}\n\n// Aufruf\nint result = GetValue<int>("123");   // result hat den Typ int\nstring text = GetValue<string>(456); // text hat den Typ string\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"dynamischer-r\xfcckgabewert",children:"Dynamischer R\xfcckgabewert"}),"\n",(0,s.jsxs)(n.p,{children:["Mit dem Schl\xfcsselwort ",(0,s.jsx)(n.code,{children:"dynamic"})," wird der R\xfcckgabetyp zur Laufzeit bestimmt, und der Compiler f\xfchrt keine statische Typpr\xfcfung durch. ",(0,s.jsx)(n.strong,{children:"Flexibel, Weniger Typsicherheit."})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public dynamic GetDynamicValue(object input)\n{\n    // Hier wird input einfach als dynamic zur\xfcckgegeben.\n    return input;\n}\n\n// Aufruf; Der Typ von value wird zur Laufzeit bestimmt.\ndynamic value = GetDynamicValue("Hallo Welt");\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);