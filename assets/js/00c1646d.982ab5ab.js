"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[9491],{28453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>u});var r=s(96540);const i={},t=r.createContext(i);function d(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),r.createElement(t.Provider,{value:n},e.children)}},41064:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>u,default:()=>a,frontMatter:()=>d,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"Web/Rest-Architektur","title":"REST-Architektur","description":"","source":"@site/docs/05-Web/04-Rest-Architektur.md","sourceDirName":"05-Web","slug":"/Web/Rest-Architektur","permalink":"/my-documentation/docs/Web/Rest-Architektur","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/05-Web/04-Rest-Architektur.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"description":"","title":"REST-Architektur"},"sidebar":"webSidebar","previous":{"title":"CSS Quickref","permalink":"/my-documentation/docs/Web/css-quickref"}}');var i=s(74848),t=s(28453);const d={description:"",title:"REST-Architektur"},u=void 0,l={},o=[{value:"Grundprinzipien der REST-Architektur",id:"grundprinzipien-der-rest-architektur",level:3},{value:"Beispiel f\xfcr eine REST-API",id:"beispiel-f\xfcr-eine-rest-api",level:3},{value:"Beispiel in Python mit Flask",id:"beispiel-in-python-mit-flask",level:3}];function c(e){const n={code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Die REST-Architektur (",(0,i.jsx)(n.strong,{children:"Representational State Transfer"}),") ist ein Architekturstil f\xfcr verteilte Systeme, insbesondere f\xfcr das Web. Sie wurde von Roy Fielding in seiner Dissertation im Jahr 2000 beschrieben und ist seitdem ein weit verbreiteter Ansatz f\xfcr die Gestaltung von Netzwerkkommunikation, insbesondere f\xfcr Web-APIs."]}),"\n",(0,i.jsx)(n.h3,{id:"grundprinzipien-der-rest-architektur",children:"Grundprinzipien der REST-Architektur"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Ressourcen"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"In REST wird alles als Ressource betrachtet. Eine Ressource kann ein Dokument, ein Bild, ein Benutzer oder ein Service sein. Ressourcen werden durch URIs (Uniform Resource Identifiers) eindeutig identifiziert."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Repr\xe4sentationen"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Ressourcen k\xf6nnen in verschiedenen Formaten dargestellt werden, wie JSON, XML, HTML oder Plain Text. Die Repr\xe4sentation einer Ressource wird dem Client zur\xfcckgegeben."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Statische Adressierung"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Jede Ressource muss eine stabile und eindeutige Adresse (URI) haben. Die URI bleibt gleich, unabh\xe4ngig von der Repr\xe4sentation oder dem Zustand der Ressource."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"HTTP-Verben"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["REST verwendet die Standard-HTTP-Methoden, um Operationen auf Ressourcen auszuf\xfchren. Die wichtigsten HTTP-Verben sind:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GET"}),": Abrufen einer Ressource."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"POST"}),": Erstellen einer neuen Ressource."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PUT"}),": Aktualisieren einer bestehenden Ressource."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"DELETE"}),": L\xf6schen einer Ressource."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PATCH"}),": Teilweise Aktualisierung einer Ressource."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Zustandslose Interaktionen"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Jede Anfrage vom Client an den Server muss alle Informationen enthalten, die notwendig sind, um sie zu verstehen und zu verarbeiten. Der Server speichert keinen Client-Zustand zwischen den Anfragen. Das bedeutet, dass jede Anfrage unabh\xe4ngig ist und der Server keine Kenntnis von fr\xfcheren Anfragen hat."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Cachebarkeit"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Antworten sollten explizit als cacheable oder non-cacheable markiert sein. Caching verbessert die Leistung und Skalierbarkeit von Webanwendungen, indem es redundante Abrufe vermeidet."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Schichtenarchitektur"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Ein REST-System kann durch mehrere Schichten bestehen, wobei jede Schicht eine spezifische Funktion hat und unabh\xe4ngig von den anderen Schichten ist. Dies erh\xf6ht die Flexibilit\xe4t und Skalierbarkeit des Systems."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"beispiel-f\xfcr-eine-rest-api",children:"Beispiel f\xfcr eine REST-API"}),"\n",(0,i.jsx)(n.p,{children:"Stellen wir uns eine REST-API f\xfcr die Verwaltung von Benutzerressourcen vor. Hier sind einige Beispiel-URIs und die zugeh\xf6rigen HTTP-Methoden:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GET /users"}),": Abrufen aller Benutzer."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["GET /users/",(0,i.jsx)(n.code,{children:"{id}"})]}),": Abrufen eines bestimmten Benutzers anhand der ID."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"POST /users"}),": Erstellen eines neuen Benutzers."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["PUT /users/",(0,i.jsx)(n.code,{children:"{id}"})]}),": Aktualisieren eines bestimmten Benutzers anhand der ID."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["DELETE /users/",(0,i.jsx)(n.code,{children:"{id}"})]}),": L\xf6schen eines bestimmten Benutzers anhand der ID."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"beispiel-in-python-mit-flask",children:"Beispiel in Python mit Flask"}),"\n",(0,i.jsx)(n.p,{children:"Hier ist ein einfaches Beispiel f\xfcr eine REST-API in Python mit dem Flask-Framework:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\nusers = []\n\n@app.route('/users', methods=['GET'])\ndef get_users():\n    return jsonify(users)\n\n@app.route('/users/<int:user_id>', methods=['GET'])\ndef get_user(user_id):\n    user = next((user for user in users if user['id'] == user_id), None)\n    if user is not None:\n        return jsonify(user)\n    return jsonify({'error': 'User not found'}), 404\n\n@app.route('/users', methods=['POST'])\ndef create_user():\n    new_user = request.get_json()\n    users.append(new_user)\n    return jsonify(new_user), 201\n\n@app.route('/users/<int:user_id>', methods=['PUT'])\ndef update_user(user_id):\n    user = next((user for user in users if user['id'] == user_id), None)\n    if user is not None:\n        update_data = request.get_json()\n        user.update(update_data)\n        return jsonify(user)\n    return jsonify({'error': 'User not found'}), 404\n\n@app.route('/users/<int:user_id>', methods=['DELETE'])\ndef delete_user(user_id):\n    global users\n    users = [user for user in users if user['id'] != user_id]\n    return '', 204\n\nif __name__ == '__main__':\n    app.run(debug=True)\n"})})]})}function a(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);