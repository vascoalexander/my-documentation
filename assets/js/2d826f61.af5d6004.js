"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[2980],{69212:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>g,frontMatter:()=>o,metadata:()=>r,toc:()=>m});const r=JSON.parse('{"id":"Csharp/Strings/String-Operations","title":"String Operations","description":"","source":"@site/docs/04-Csharp/02-Strings/01-String-Operations.md","sourceDirName":"04-Csharp/02-Strings","slug":"/Csharp/Strings/String-Operations","permalink":"/my-documentation/docs/Csharp/Strings/String-Operations","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/04-Csharp/02-Strings/01-String-Operations.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"created":"2025-02-24, 06:54","title":"String Operations","description":"","sidebar_position":1,"language":"C#","tags":[],"draft":false},"sidebar":"csharpSidebar","previous":{"title":"Strings","permalink":"/my-documentation/docs/category/strings"},"next":{"title":"String Formatting","permalink":"/my-documentation/docs/Csharp/Strings/String-Formatting"}}');var i=t(74848),s=t(28453);const o={created:"2025-02-24, 06:54",title:"String Operations",description:"",sidebar_position:1,language:"C#",tags:[],draft:!1},a=void 0,c={},m=[];function u(e){const n={code:"code",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'string fooString = "\\"escape\\" quotes and add \\n (new lines) and \\t (tabs)";\nConsole.WriteLine(fooString);\n\n// You can access each character of the string with an indexer:\nchar charFromString = fooString[1]; // => \'e\'\n\n// Strings are immutable: you can\'t do fooString[1] = \'X\';\n\n// Compare strings with current culture, ignoring case\nstring.Compare(fooString, "x", StringComparison.CurrentCultureIgnoreCase);\n\n// Formatting, based on sprintf\nstring fooFs = string.Format("Check Check, {0} {1}, {0} {1:0.0}", 1, 2);\n\n// Dates & Formatting\nDateTime fooDate = DateTime.Now;\nConsole.WriteLine(fooDate.ToString("hh:mm, dd MMM yyyy"));\n\n// String Interpolation\nstring myName = "Jane Doe";\nConsole.WriteLine($"My name is: {myName}. It is great to be here!");\n\n// String Builder\nStringBuilder sb = new StringBuilder();\nsb.Append("Hello ");\nsb.AppendLine("World!");\nConsole.WriteLine(sb);\n\n// Verbatim String\n// You can use the @ symbol before a string literal to escape all characters in the string\nstring path = "C:\\\\Users\\\\User\\\\Desktop";\nstring verbatimPath = @"C:\\Users\\User\\Desktop";\nConsole.WriteLine(path == verbatimPath);  // => true\n\n// You can split a string over two lines with the @ symbol. To escape " use ""\nstring bazString = @"Here\'s some stuff\non a new line! ""Wow!"", the masses cried";\n\n// Popular String Methods & Properties\nstring myText = "some text";\n\nConsole.WriteLine(myText.IndexOf(\'t\')); // Outputs => 5\n\nmyText = myText.Insert(0, "This is ");\nConsole.WriteLine(myText); // Outputs => "This is some text"\n\nmyText = myText.Replace("This is", "Here is");\nConsole.WriteLine(myText); // Outputs => "Here is some text"\n\nif(myText.Contains("some"))\nConsole.WriteLine("found"); // Outputs "found"\n\nmyText = myText.Remove(4);\nConsole.WriteLine(myText); // Outputs "Here"\n\nmyText = myText.Substring(2, 3);\nConsole.WriteLine(myText); // Outputs "re"\n'})})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(96540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);