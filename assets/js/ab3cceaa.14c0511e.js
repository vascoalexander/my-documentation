"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[9366],{28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>l});var r=s(96540);const a={},t=r.createContext(a);function i(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(t.Provider,{value:n},e.children)}},91488:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Csharp/Collections/Lists","title":"Lists","description":"","source":"@site/docs/04-Csharp/03-Collections/02-Lists.md","sourceDirName":"04-Csharp/03-Collections","slug":"/Csharp/Collections/Lists","permalink":"/my-documentation/docs/Csharp/Collections/Lists","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/04-Csharp/03-Collections/02-Lists.md","tags":[{"inline":true,"label":"contains","permalink":"/my-documentation/docs/tags/contains"},{"inline":true,"label":"ForEach","permalink":"/my-documentation/docs/tags/for-each"},{"inline":true,"label":"FindAll","permalink":"/my-documentation/docs/tags/find-all"}],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Lists","description":"","sidebar_position":2,"language":"C#","tags":["contains","ForEach","FindAll"],"draft":false},"sidebar":"csharpSidebar","previous":{"title":"Arrays","permalink":"/my-documentation/docs/Csharp/Collections/Arrays"},"next":{"title":"Linked Lists","permalink":"/my-documentation/docs/Csharp/Collections/Linked-Lists"}}');var a=s(74848),t=s(28453);const i={title:"Lists",description:"",sidebar_position:2,language:"C#",tags:["contains","ForEach","FindAll"],draft:!1},l=void 0,o={},c=[{value:"Add Items",id:"add-items",level:2},{value:"List Contains",id:"list-contains",level:2},{value:"List Remove, RemoveAt",id:"list-remove-removeat",level:2},{value:"Liste Sortieren",id:"liste-sortieren",level:2},{value:"List Reverse",id:"list-reverse",level:2},{value:"Ein Element suchen (erster Treffer)",id:"ein-element-suchen-erster-treffer",level:2},{value:"Suchen Aller Elemente die ...",id:"suchen-aller-elemente-die-",level:2},{value:"List to Array",id:"list-to-array",level:2},{value:"Liste leeren",id:"liste-leeren",level:2},{value:"List of Objects",id:"list-of-objects",level:2},{value:"List of Anonymous Objects",id:"list-of-anonymous-objects",level:2},{value:"Related Links",id:"related-links",level:2}];function d(e){const n={code:"code",h2:"h2",hr:"hr",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["A list is similar to an array, but the elements in a list can be inserted and removed dynamically. The C# generic\ncollection ",(0,a.jsx)(n.code,{children:"List<T>"})," class requires all elements be of the same type T."]}),"\n",(0,a.jsx)(n.h2,{id:"add-items",children:"Add Items"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'var namen = new List<string>();\n// Hinzuf\xfcgen von Elementen\nnamen.Add("Anna");\nnamen.Add("Bernd");\n// Einf\xfcgen eines Elements an einem bestimmten Index (Index 1)\nnamen.Insert(1, "Dieter");\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"list-contains",children:"List Contains"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'bool enth\xe4ltClara = namen.Contains("Clara");\nConsole.WriteLine($"Enth\xe4lt Clara? {enth\xe4ltClara}");\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"list-remove-removeat",children:"List Remove, RemoveAt"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'// per Wert\nnamen.Remove("Bernd");\n// per Index\nnamen.RemoveAt(0);\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"liste-sortieren",children:"Liste Sortieren"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'namen.Sort();\nConsole.WriteLine("Sortierte Liste:");\nnamen.ForEach(Console.WriteLine);\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"list-reverse",children:"List Reverse"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'namen.Reverse();\nConsole.WriteLine("Umgekehrte Liste:");\nnamen.ForEach(Console.WriteLine);\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"ein-element-suchen-erster-treffer",children:"Ein Element suchen (erster Treffer)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'string nameMitC = namen.Find(name => name.StartsWith("C"));\nConsole.WriteLine($"Erster Name, der mit \'C\' beginnt: {nameMitC}");\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"suchen-aller-elemente-die-",children:"Suchen Aller Elemente die ..."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'List<string> langeNamen = namen.FindAll(name => name.Length > 4);\nConsole.WriteLine("Namen mit mehr als 4 Zeichen:");\nlangeNamen.ForEach(Console.WriteLine);\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"list-to-array",children:"List to Array"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'string[] namenArray = namen.ToArray();\nConsole.WriteLine("Array-Ausgabe:");\nforeach (var n in namenArray)\n{\n\tConsole.WriteLine(n);\n}\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"liste-leeren",children:"Liste leeren"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'namen.Clear();\nConsole.WriteLine($"Anzahl der Elemente nach Clear: {namen.Count}");\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"list-of-objects",children:"List of Objects"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'var players = new List<Player>();\n\nvar player1 = new Player("Chad");\nvar player2 = new Player("Steve");\nvar player3 = new Player("Karen");\n\nplayers.Add(player1);\nplayers.Add(player2);\nplayers.Add(player3);\n\nforeach (Player player in players)\n{\n\tConsole.WriteLine(player.username);\n}\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"list-of-anonymous-objects",children:"List of Anonymous Objects"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'var players = new List<Player>();\n\nplayers.Add(new Player("Chad"));\nplayers.Add(new Player("Steve"));\nplayers.Add(new Player("Karen"));\n'})}),"\n",(0,a.jsx)(n.h2,{id:"related-links",children:"Related Links"})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);