"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[4319],{70343:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"DB/SQL/DQL","title":"DQL","description":"","source":"@site/docs/06-DB/02-SQL/03-DQL.md","sourceDirName":"06-DB/02-SQL","slug":"/DB/SQL/DQL","permalink":"/my-documentation/docs/DB/SQL/DQL","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/06-DB/02-SQL/03-DQL.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"description":"","draft":false,"title":"DQL"},"sidebar":"dbSidebar","previous":{"title":"DML","permalink":"/my-documentation/docs/DB/SQL/DML"},"next":{"title":"Datentypen","permalink":"/my-documentation/docs/DB/SQL/Datentypen"}}');var i=l(74848),t=l(28453);const r={sidebar_position:3,description:"",draft:!1,title:"DQL"},d=void 0,a={},c=[{value:"\xdcberblick",id:"\xfcberblick",level:2},{value:"SELECT",id:"select",level:2},{value:"SELECT mit WHERE",id:"select-mit-where",level:3},{value:"DISTINCT with SELECT",id:"distinct-with-select",level:3},{value:"SELECT mit GROUP BY",id:"select-mit-group-by",level:3},{value:"SELECT mit HAVING",id:"select-mit-having",level:3},{value:"SELECT mit ORDER BY",id:"select-mit-order-by",level:3},{value:"SELECT mit CASE",id:"select-mit-case",level:3},{value:"SELECT mit LIMIT",id:"select-mit-limit",level:3},{value:"SELECT TOP",id:"select-top",level:3},{value:"JOIN",id:"join",level:2},{value:"INNER JOIN",id:"inner-join",level:3},{value:"LEFT JOIN",id:"left-join",level:3},{value:"RIGHT JOIN",id:"right-join",level:3},{value:"FULL JOIN",id:"full-join",level:3},{value:"CROSS JOIN",id:"cross-join",level:3},{value:"Subselects",id:"subselects",level:2},{value:"Subquery in der WHERE-Klausel",id:"subquery-in-der-where-klausel",level:3},{value:"Korrelierte Subquery in der SELECT-Klausel",id:"korrelierte-subquery-in-der-select-klausel",level:3},{value:"Subquery im FROM-Teil (Derived Table)",id:"subquery-im-from-teil-derived-table",level:3},{value:"Subquery in einem INSERT INTO",id:"subquery-in-einem-insert-into",level:3},{value:"UNION",id:"union",level:2},{value:"INTERSECT",id:"intersect",level:2},{value:"EXCEPT",id:"except",level:2}];function h(e){const n={br:"br",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"\xfcberblick",children:"\xdcberblick"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SELECT"})," Selektieren von Daten aus einer Tabelle"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"JOINs:"})," Verkn\xfcpfen Daten aus mehreren Tabellen basierend auf gemeinsamen Schl\xfcsseln. Wichtige Typen: INNER, LEFT, RIGHT, FULL und CROSS."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Subselects (Subqueries):"})," Erm\xf6glichen verschachtelte Abfragen zur Filterung, Aggregation oder Berechnung."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"UNION:"})," Kombiniert Ergebnisse aus mehreren Abfragen (entfernt Duplikate, ",(0,i.jsx)(n.code,{children:"UNION ALL"})," beh\xe4lt sie)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"INTERSECT:"})," Gibt nur die gemeinsamen Zeilen aus zwei Abfragen zur\xfcck."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"EXCEPT:"})," Gibt Zeilen aus der ersten Abfrage zur\xfcck, die in der zweiten nicht vorkommen."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"select",children:"SELECT"}),"\n",(0,i.jsx)(n.p,{children:"Ruft Daten aus einer Tabelle ab."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT name, email \nFROM customers;\n\n-- Selektieren mit alias (AS)\nSELECT e.*\nFROM DimEmployee AS e\nORDER BY LastName;\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Reihenfolge der Syntax vs Ausf\xfchrung:"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Syntax"}),(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Ausf\xfchrung"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.strong,{children:"SELECT"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"FROM"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"FROM"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"WHERE"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"WHERE"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"GROUP BY"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"GROUP BY"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"HAVING"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"HAVING"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.strong,{children:"SELECT"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"ORDER BY"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"ORDER BY"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"select-mit-where",children:"SELECT mit WHERE"}),"\n",(0,i.jsx)(n.p,{children:"Filtert Daten basierend auf Bedingungen."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:'title="Beispiel 1"',children:"SELECT * FROM customers WHERE email = 'max@example.com';\n\n-- einzelne Bedingung\nSELECT * FROM employees \nWHERE age > 30;\n-- mehrere Bedingungen\nSELECT * FROM employees \nWHERE age > 30 AND department = 'HR';\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:'title="Beispiel 2"',children:"SELECT FirstName,\n       LastName,\n       StartDate AS FirstDay\nFROM DimEmployee\nWHERE EndDate IS NOT NULL\n      AND MaritalStatus = 'M'\nORDER BY LastName;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The following ",(0,i.jsx)(n.strong,{children:"operators"})," can be used in the\xa0",(0,i.jsx)(n.code,{children:"WHERE"}),"\xa0clause:"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Operator"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"="})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Equal"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:">"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Greater than"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"<"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Less than"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:">="})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Greater than or equal"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"<="})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Less than or equal"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"<>"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["Not equal.\xa0",(0,i.jsx)(n.strong,{children:"Note:"}),"\xa0In some versions of SQL this operator may be written as !="]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"BETWEEN"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Between a certain range"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"LIKE"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Search for a pattern"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"IN"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"To specify multiple possible values for a column"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"distinct-with-select",children:"DISTINCT with SELECT"}),"\n",(0,i.jsx)(n.p,{children:"The following example uses DISTINCT to generate a list of all unique titles in the DimEmployee table."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT DISTINCT Title\nFROM DimEmployee\nORDER BY Title;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"select-mit-group-by",children:"SELECT mit GROUP BY"}),"\n",(0,i.jsx)(n.p,{children:"The following example finds the total amount for all sales on each day."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT customer_id, COUNT(*) AS order_count\nFROM orders\nGROUP BY customer_id;\n\nSELECT OrderDateKey,\n       SUM(SalesAmount) AS TotalSales\nFROM FactInternetSales\nGROUP BY OrderDateKey\nORDER BY OrderDateKey;\n\n-- with multiple Groups\nSELECT OrderDateKey,\n       PromotionKey,\n       AVG(SalesAmount) AS AvgSales,\n       SUM(SalesAmount) AS TotalSales\nFROM FactInternetSales\nGROUP BY OrderDateKey, PromotionKey\nORDER BY OrderDateKey;\n\n-- GROUP BY and WHERE\nSELECT OrderDateKey,\n       SUM(SalesAmount) AS TotalSales\nFROM FactInternetSales\nWHERE OrderDateKey > '20020801'\nGROUP BY OrderDateKey\nORDER BY OrderDateKey;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"select-mit-having",children:"SELECT mit HAVING"}),"\n",(0,i.jsx)(n.p,{children:"Wenn Daten aggregiert wurden m\xfcssen wir HAVING anstelle von WHERE zum filtern verwenden."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT customer_id, COUNT(*) AS order_count\nFROM orders\nGROUP BY customer_id\nHAVING COUNT(*) > 2;\n\nUSE AdventureWorks2022;  \nGO  \nSELECT SalesOrderID, SUM(LineTotal) AS SubTotal  \nFROM Sales.SalesOrderDetail  \nGROUP BY SalesOrderID  \nHAVING SUM(LineTotal) > 100000.00  \nORDER BY SalesOrderID ;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"select-mit-order-by",children:"SELECT mit ORDER BY"}),"\n",(0,i.jsx)(n.p,{children:"Sortiert die Ergebnisse auf- oder absteigend."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM customers \nORDER BY name ASC;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"select-mit-case",children:"SELECT mit CASE"}),"\n",(0,i.jsx)(n.p,{children:"Erzeugt bedingte Werte."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT name,\n    CASE\n        WHEN total_amount > 100 THEN 'VIP'\n        ELSE 'Regular'\n    END AS customer_status\nFROM orders;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"select-mit-limit",children:"SELECT mit LIMIT"}),"\n",(0,i.jsx)(n.p,{children:"Begrenzt die Anzahl der zur\xfcckgegebenen Zeilen."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM customers \nLIMIT 5;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"select-top",children:"SELECT TOP"}),"\n",(0,i.jsx)(n.p,{children:"Begrenzt die Anzahl der zur\xfcckgegebenen Zeilen."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:'-- Select the first 3 records of the Customers table\nSELECT TOP 3 * FROM Customers;\n-- the first 50% of the records from the "Customers" table\nSELECT TOP 50 PERCENT * FROM Customers;\n'})}),"\n",(0,i.jsx)(n.h2,{id:"join",children:"JOIN"}),"\n",(0,i.jsx)(n.p,{children:"JOINs erm\xf6glichen es, Daten aus zwei oder mehr Tabellen anhand einer gemeinsamen Spalte zu verkn\xfcpfen."}),"\n",(0,i.jsx)(n.h3,{id:"inner-join",children:"INNER JOIN"}),"\n",(0,i.jsx)(n.p,{children:"Zeige alle Kunden, die mindestens eine Bestellung haben."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT k.Name, b.Bestelldatum\nFROM Kunden k\nINNER JOIN Bestellungen b ON k.KundenID = b.KundenID;\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Ergebnis:"})," Nur Kunden, f\xfcr die es einen passenden Eintrag in ",(0,i.jsx)(n.code,{children:"Bestellungen"})," gibt, werden angezeigt."]}),"\n",(0,i.jsx)(n.h3,{id:"left-join",children:"LEFT JOIN"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"(oder LEFT OUTER JOIN)"}),"\nZeige alle Kunden \u2013 auch jene ohne Bestellung. F\xfcr Kunden ohne Bestellung wird der Bestellwert ",(0,i.jsx)(n.code,{children:"NULL"})," sein."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT k.Name, b.Bestelldatum\nFROM Kunden k\nLEFT JOIN Bestellungen b ON k.KundenID = b.KundenID;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"right-join",children:"RIGHT JOIN"}),"\n",(0,i.jsxs)(n.p,{children:["Zeige alle Bestellungen und die zugeh\xf6rigen Kundendaten. Falls es eine Bestellung ohne zugeordneten Kunden gibt (selten), werden Kundendaten als ",(0,i.jsx)(n.code,{children:"NULL"})," angezeigt."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT k.Name, b.Bestelldatum\nFROM Kunden k\nRIGHT JOIN Bestellungen b ON k.KundenID = b.KundenID;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"full-join",children:"FULL JOIN"}),"\n",(0,i.jsx)(n.p,{children:"Zeige alle Kunden und alle Bestellungen, auch wenn keine direkte \xdcbereinstimmung vorliegt."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT k.Name, b.Bestelldatum\nFROM Kunden k\nFULL OUTER JOIN Bestellungen b ON k.KundenID = b.KundenID;\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Hinweis:"})," ",(0,i.jsx)(n.code,{children:"FULL OUTER JOIN"})," wird nicht von allen Datenbanken unterst\xfctzt (z.\u202fB. MySQL nicht standardm\xe4\xdfig)."]}),"\n",(0,i.jsx)(n.h3,{id:"cross-join",children:"CROSS JOIN"}),"\n",(0,i.jsx)(n.p,{children:"Erzeuge das kartesische Produkt zweier Tabellen. Dies liefert jede Kombination von Zeilen aus beiden Tabellen."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT k.Name, p.Produktname\nFROM Kunden k\nCROSS JOIN Produkte p;\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Ergebnis:"})," Jeder Kunde wird mit jedem Produkt kombiniert \u2013 n\xfctzlich f\xfcr bestimmte analytische Aufgaben."]}),"\n",(0,i.jsx)(n.h2,{id:"subselects",children:"Subselects"}),"\n",(0,i.jsxs)(n.p,{children:["Subqueries sind verschachtelte Abfragen, die innerhalb einer \xe4u\xdferen (Haupt\u2011)Abfrage verwendet werden. Sie k\xf6nnen in der ",(0,i.jsx)(n.code,{children:"SELECT"}),"-, ",(0,i.jsx)(n.code,{children:"FROM"}),"- oder ",(0,i.jsx)(n.code,{children:"WHERE"}),"-Klausel vorkommen."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Selbst\xe4ndige Unterabfragen:"}),(0,i.jsx)(n.br,{}),"\n","Die Unterabfrage ist von der \xe4u\xdferen, sie umgebenden Anweisung unabh\xe4ngig. Sie kann auch separat ausgef\xfchrt werden.",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Korrelierte Unterabfragen:"}),(0,i.jsx)(n.br,{}),"\n","Die Unterabfrage bezieht sich auf einen oder mehrere Werte der \xe4u\xdferen, sie umgebenden Anweisung. Sie kann nicht separat ausgef\xfchrt werden."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Unterscheidung nach Ergebnis:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"skalar"})," => liefert genau einen einzelnen Wert zur\xfcck"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"mehrwertig"})," => liefert eine Liste von einzelnen Werten zur\xfcck"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"tabellenwertig"})," => liefert eine Tabelle zur\xfcck"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"subquery-in-der-where-klausel",children:"Subquery in der WHERE-Klausel"}),"\n",(0,i.jsxs)(n.p,{children:["Finde alle Kunden, deren Stadt in der Liste der St\xe4dte aus der Tabelle ",(0,i.jsx)(n.code,{children:"Filialen"})," (z.\u202fB. in Deutschland) vorkommt."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT *\nFROM Kunden\nWHERE Stadt IN (\n    SELECT Stadt\n    FROM Filialen\n    WHERE Land = 'DE'\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"korrelierte-subquery-in-der-select-klausel",children:"Korrelierte Subquery in der SELECT-Klausel"}),"\n",(0,i.jsxs)(n.p,{children:["Zeige den Namen jedes Kunden sowie die Anzahl seiner Bestellungen.",(0,i.jsx)(n.br,{}),"\n","Angenommen, ",(0,i.jsx)(n.code,{children:"Kunden"})," hat die Spalte ",(0,i.jsx)(n.code,{children:"KundenID"})," und ",(0,i.jsx)(n.code,{children:"Bestellungen"})," hat ebenfalls eine Spalte ",(0,i.jsx)(n.code,{children:"KundenID"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT \n    k.Name,\n    (\n        SELECT COUNT(*)\n        FROM Bestellungen b\n        WHERE b.KundenID = k.KundenID\n    ) AS Bestellanzahl\nFROM Kunden k;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"subquery-im-from-teil-derived-table",children:"Subquery im FROM-Teil (Derived Table)"}),"\n",(0,i.jsx)(n.p,{children:"Ermittle Kunden, die mehr als 5 Bestellungen haben, indem Du zuerst die Bestellanzahl pro Kunde aggregierst."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT t.KundenID, t.Bestellanzahl\nFROM (\n    SELECT KundenID, COUNT(*) AS Bestellanzahl\n    FROM Bestellungen\n    GROUP BY KundenID\n) t\nWHERE t.Bestellanzahl > 5;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"subquery-in-einem-insert-into",children:"Subquery in einem INSERT INTO"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"INSERT INTO Bestellungen (KundeID, ProduktID, Bestelldatum)\nSELECT KundeID, 101, GETDATE()\nFROM Kunden\nWHERE Land = 'Deutschland';\n"})}),"\n",(0,i.jsx)(n.h2,{id:"union",children:"UNION"}),"\n",(0,i.jsxs)(n.p,{children:["Mit ",(0,i.jsx)(n.code,{children:"UNION"})," werden die Ergebnisse von zwei (oder mehr) ",(0,i.jsx)(n.code,{children:"SELECT"}),"-Abfragen kombiniert. Dabei m\xfcssen alle Abfragen die gleiche Anzahl und kompatible Datentypen von Spalten zur\xfcckgeben."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Hinweis:"})," Standardm\xe4\xdfig entfernt ",(0,i.jsx)(n.code,{children:"UNION"})," Duplikate. M\xf6chtest Du alle Zeilen (inklusive Duplikate), verwende ",(0,i.jsx)(n.code,{children:"UNION ALL"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Beispiel:"}),(0,i.jsx)(n.br,{}),"\n","Stell Dir vor, Du hast zwei Tabellen: ",(0,i.jsx)(n.code,{children:"Kunden"})," und ",(0,i.jsx)(n.code,{children:"Lieferanten"}),". Beide haben Spalten ",(0,i.jsx)(n.code,{children:"Name"})," und ",(0,i.jsx)(n.code,{children:"Stadt"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"-- Alle Namen und St\xe4dte aus beiden Tabellen (ohne Duplikate)\nSELECT Name, Stadt\nFROM Kunden\nUNION\nSELECT Name, Stadt\nFROM Lieferanten;\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"-- Mit Duplikaten, falls diese wichtig sind\nSELECT Name, Stadt\nFROM Kunden\nUNION ALL\nSELECT Name, Stadt\nFROM Lieferanten;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"intersect",children:"INTERSECT"}),"\n",(0,i.jsxs)(n.p,{children:["Mit ",(0,i.jsx)(n.code,{children:"INTERSECT"})," erh\xe4ltst Du nur die Zeilen, die in ",(0,i.jsx)(n.strong,{children:"beiden"})," Abfragen vorkommen."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Wichtig:"})," Nicht alle Datenbanksysteme unterst\xfctzen ",(0,i.jsx)(n.code,{children:"INTERSECT"})," (z.\u202fB. MySQL unterst\xfctzt es nicht nativ)."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Beispiel:"}),(0,i.jsx)(n.br,{}),"\n","Finde die Personen, die sowohl in der ",(0,i.jsx)(n.code,{children:"Kunden"}),"- als auch in der ",(0,i.jsx)(n.code,{children:"Lieferanten"}),"-Tabelle vorkommen."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT Name, Stadt\nFROM Kunden\nINTERSECT\nSELECT Name, Stadt\nFROM Lieferanten;\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Hinweis:"})," Nur die Datens\xe4tze, die in beiden Abfragen identisch sind, werden zur\xfcckgegeben."]}),"\n",(0,i.jsx)(n.h2,{id:"except",children:"EXCEPT"}),"\n",(0,i.jsxs)(n.p,{children:["Mit ",(0,i.jsx)(n.code,{children:"EXCEPT"})," (in einigen Systemen auch als ",(0,i.jsx)(n.code,{children:"MINUS"})," bekannt) erh\xe4ltst Du die Zeilen aus der ersten Abfrage, die ",(0,i.jsx)(n.strong,{children:"nicht"})," in der zweiten vorkommen."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Hinweis:"})," Auch ",(0,i.jsx)(n.code,{children:"EXCEPT"})," wird nicht in allen Datenbanksystemen unterst\xfctzt."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Beispiel:"}),(0,i.jsx)(n.br,{}),"\n","Finde alle Kunden, die ",(0,i.jsx)(n.strong,{children:"keine"})," Lieferanten sind."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT Name, Stadt\nFROM Kunden\nEXCEPT\nSELECT Name, Stadt\nFROM Lieferanten;\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Ergebnis:"})," Es werden alle Zeilen aus ",(0,i.jsx)(n.code,{children:"Kunden"})," angezeigt, die nicht exakt in ",(0,i.jsx)(n.code,{children:"Lieferanten"})," vorkommen."]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,n,l)=>{l.d(n,{R:()=>r,x:()=>d});var s=l(96540);const i={},t=s.createContext(i);function r(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);