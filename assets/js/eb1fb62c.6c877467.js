"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[1814],{2419:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>T,contentTitle:()=>d,default:()=>s,frontMatter:()=>a,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"db/ProjectDB/projektdbp2-programmierung2","title":"Programmierung V","description":"","source":"@site/docs/06-db/ProjectDB/projektdbp2-programmierung2.md","sourceDirName":"06-db/ProjectDB","slug":"/db/ProjectDB/projektdbp2-programmierung2","permalink":"/my-documentation/docs/db/ProjectDB/projektdbp2-programmierung2","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/06-db/ProjectDB/projektdbp2-programmierung2.md","tags":[],"version":"current","sidebarPosition":24,"frontMatter":{"sidebar_position":24,"description":"","draft":false,"title":"Programmierung V"},"sidebar":"dbSidebar","previous":{"title":"Programmierung IV","permalink":"/my-documentation/docs/db/ProjectDB/projektdbp2-programmierung1"}}');var i=t(4848),E=t(8453);const a={sidebar_position:24,description:"",draft:!1,title:"Programmierung V"},d=void 0,T={},o=[];function m(n){const e={code:"code",pre:"pre",...(0,E.R)(),...n.components};return(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"USE ProjektDB;\nGO\n\n--\tNutzen Sie die Datenbank ProjektDB zur \n--\tL\xf6sung dieser Aufgabe\n\n\n--\tAufgabe P2.3\n--\n--\tSchreiben Sie einen zus\xe4tzlichen Trigger f\xfcr die Tabelle\n--\tMitarbeiter, der bei einem DELETE die gel\xf6schten Datens\xe4tze\n--\tin der Tabelle MitarbeiterHistorie mit den entsprechenden\n--\tZusatz-Informationen anlegt.\n\nCREATE OR ALTER TRIGGER tr_MitarbeiterDelete\nON Mitarbeiter\nAFTER DELETE\nAS\nBEGIN\n\tINSERT INTO MitarbeiterHistorie\n\tSELECT *, 'DELETE', GETDATE(), SYSTEM_USER\n\tFROM deleted;\nEND;\nGO\n\nSELECT * FROM Mitarbeiter\n\nDELETE FROM Arbeit\nWHERE mit_id = (SELECT m.id FROM Mitarbeiter m\n\t\t\t\tJOIN Arbeit a ON a.mit_id = m.id\n\t\t\t\tWHERE m.nachname = 'Probst')\n\nDELETE FROM Mitarbeiter\nWHERE nachname = 'Probst'\n\n--\tAufgabe P2.4\n--\n--\tErweitern Sie die Tabelle Mitarbeiter um zwei Felder:\n--\t\taenderUser VARCHAR(50),\n--\t\taenderDatum DATETIME\n--\tErstellen Sie dann einen Trigger, der nach einer \xc4nderung\n--\tden User (SYSTEM_USER) und den aktuellen Zeitstempel in\n--\tden Datensatz schreibt.\n\nALTER TABLE Mitarbeiter\nADD aenderUser VARCHAR(50), aenderDatum DATETIME;\nGO\n\n\nCREATE OR ALTER TRIGGER tr_MitarbeiterAlter\nON Mitarbeiter\nAFTER UPDATE\nAS\nBEGIN\n\tUPDATE Mitarbeiter\n\tSET aenderUser = SYSTEM_USER, aenderDatum = GETDATE()\n\tWHERE id = (SELECT id FROM inserted)\nEND;\nGO\n\nSELECT * FROM Mitarbeiter;\nGO\n\nUPDATE Mitarbeiter\nSET vorname = 'Tina'\nWHERE vorname = 'Brigitte';\nGO\n\nSELECT * FROM Gehalt;\nGO\n\nALTER TABLE Mitarbeiter\nDROP COLUMN aenderUser, aenderDatum;\nGO\n\n--\tAufgabe P2.5\n--\n--\tErstellen Sie eine Log-Tabelle (Logging):\n--\t\tid INT IDENTITY,\n--\t\tmit_id INT,\n--\t\tdatumzeit DATETIME,\n--\t\tbenutzer VARCHAR(50),\n--\t\tereignis VARCHAR(100)\n--\tErstellen Sie dann einen Trigger f\xfcr die Tabelle Gehalt,\n--\tder eine \xc4nderung der Daten verhindert und statt dessen\n--\tden Versuch mit einem entsprechenden Eintrag in der \n--\tLog-Tabelle speichert.\n\nCREATE TABLE Logging (\n\tid INT IDENTITY PRIMARY KEY,\n\tmit_id INT,\n\tdatumzeit DATETIME,\n\tbenutzer VARCHAR(50),\n\tereignis VARCHAR(100)\n);\nGO\n\nCREATE OR ALTER TRIGGER tr_GehaltLog\nON Gehalt\nINSTEAD OF DELETE, INSERT, UPDATE\nAS\nBEGIN\n\tIF EXISTS (SELECt 1 FROM deleted) AND NOT EXISTS (SELECT 1 FROM inserted)\n\t\tINSERT INTO Logging\n\t\tSELECT mit_id, GETDATE(), SYSTEM_USER, 'DELETE'\n\t\tFROM deleted;\n\tELSE IF EXISTS (SELECT 1 FROM inserted) AND NOT EXISTS (SELECT 1 FROM deleted)\n\t\tINSERT INTO Logging\n\t\tSELECT mit_id, GETDATE(), SYSTEM_USER, 'INSERT'\n\t\tFROM inserted;\n\tELSE IF EXISTS (SELECT 1 FROM inserted) AND EXISTS (SELECT 1 FROM deleted)\n\t\tINSERT INTO Logging\n\t\tSELECT mit_id, GETDATE(), SYSTEM_USER, 'UPDATE'\n\t\tFROM deleted;\nEND;\nGO\n\nSELECT * FROM Gehalt;\nGO\n\nUPDATE Gehalt\nSET gehalt = 7000\nWHERE mit_id BETWEEN 3000 AND 10000;\nGO\n\nSELECT * FROM Logging;\n\n-- Klausur \n-- aufg. 1\nSELECT id, nachname\nFROM Mitarbeiter\nWHERE abt_id = 'a2';\n\n-- aufg. 2\nSELECT mit_id, umsatz, datum\nFROM Umsatz\nWHERE umsatz >= 5000;\n\n-- aufg. 3\nSELECT nachname, vorname, id\nFROM Mitarbeiter\nWHERE vorname LIKE '%l_';\n\n-- aufg. 4\nSELECT vorname, nachname, stadt\nFROM Mitarbeiter\nWHERE vorname LIKE '[aeiuo]%[aeiuo]'\n\n-- aufg. 5\nSELECT COUNT(mit_id) AS anzahl\nFROM Gehalt\nWHERE gehalt = 4000;\n\n-- aufg. 6\nSELECT abt_id, COUNT(id) AS anzahl\nFROM Mitarbeiter\nGROUP BY abt_id;\n\n-- aufg. 7\nSELECT stadt, COUNT(id) AS anzahl\nFROM Mitarbeiter\nGROUP BY stadt\nHAVING COUNT(id) = 1;\n\n-- aufg. 8\nSELECT p.bezeichnung, m.abt_id, m.vorname, m.nachname\nFROM Mitarbeiter m\nJOIN Arbeit a ON m.id = a.mit_id\nJOIN Projekt p ON p.id = a.pro_id\nWHERE p.bezeichnung = 'Merkur'\nORDER BY m.abt_id ASC, m.nachname DESC;\n\n-- aufg. 9\nSELECT m.id, m.nachname, ISNULL(SUM(u.umsatz), 0) AS umsatz\nFROM Mitarbeiter m\nLEFT JOIN Umsatz u ON m.id = u.mit_id\nGROUP BY m.id, m.nachname;\n"})})}function s(n={}){const{wrapper:e}={...(0,E.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(m,{...n})}):m(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>d});var r=t(6540);const i={},E=r.createContext(i);function a(n){const e=r.useContext(E);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),r.createElement(E.Provider,{value:e},n.children)}}}]);