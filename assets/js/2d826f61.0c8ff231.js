"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[2980],{28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>a});var i=n(96540);const r={},s=i.createContext(r);function l(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:t},e.children)}},49960:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>o,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Csharp/Strings/String-Operations","title":"String Operations","description":"","source":"@site/docs/04-Csharp/02-Strings/01-String-Operations.md","sourceDirName":"04-Csharp/02-Strings","slug":"/Csharp/Strings/String-Operations","permalink":"/my-documentation/docs/Csharp/Strings/String-Operations","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/04-Csharp/02-Strings/01-String-Operations.md","tags":[{"inline":true,"label":"stringBuilder","permalink":"/my-documentation/docs/tags/string-builder"},{"inline":true,"label":"Char-Array","permalink":"/my-documentation/docs/tags/char-array"},{"inline":true,"label":"LINQ","permalink":"/my-documentation/docs/tags/linq"},{"inline":true,"label":"Verbatim-String","permalink":"/my-documentation/docs/tags/verbatim-string"}],"version":"current","sidebarPosition":1,"frontMatter":{"created":"2025-02-24, 06:54","title":"String Operations","description":"","sidebar_position":1,"language":"C#","tags":["stringBuilder","Char-Array","LINQ","Verbatim-String"],"draft":false},"sidebar":"csharpSidebar","previous":{"title":"Strings","permalink":"/my-documentation/docs/category/strings"},"next":{"title":"String Formatting","permalink":"/my-documentation/docs/Csharp/Strings/String-Formatting"}}');var r=n(74848),s=n(28453);const l={created:"2025-02-24, 06:54",title:"String Operations",description:"",sidebar_position:1,language:"C#",tags:["stringBuilder","Char-Array","LINQ","Verbatim-String"],draft:!1},a=void 0,d={},c=[{value:"Defining and Initialising strings",id:"defining-and-initialising-strings",level:2},{value:"Char from String",id:"char-from-string",level:2},{value:"String to Char-Array",id:"string-to-char-array",level:2},{value:"String to Char-Array mit LINQ",id:"string-to-char-array-mit-linq",level:2},{value:"StringBuilder AppendLine",id:"stringbuilder-appendline",level:2},{value:"Verbatim String",id:"verbatim-string",level:2},{value:"String IndexOf",id:"string-indexof",level:2},{value:"String Insert",id:"string-insert",level:2},{value:"String Replace",id:"string-replace",level:2},{value:"String Contains",id:"string-contains",level:2},{value:"String Remove",id:"string-remove",level:2},{value:"String Substring",id:"string-substring",level:2},{value:"String Slicing",id:"string-slicing",level:2},{value:"Quick-Reference: String Methoden",id:"quick-reference-string-methoden",level:2}];function h(e){const t={code:"code",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"defining-and-initialising-strings",children:"Defining and Initialising strings"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"string string1;\nstring string2 = null;\nstring string3 = String.Empty;\nstring string4 = \"C:\\\\Development\\\\Projects\";\nstring string5 = @\"C:\\Development\\Projects\";\nString string6 = \"Latest string\";\nvar string7 = \"Implicit string\";\nconst string string8 = \"This text cannot be changed at runtime.\";\n\nchar[] charArray = new char[] { 'H', 'e', 'l', 'l', 'o' };\nstring string9 = new string(charArray);\n"})}),"\n",(0,r.jsx)(t.h2,{id:"char-from-string",children:"Char from String"}),"\n",(0,r.jsx)(t.p,{children:"You can access each character of the string with an indexer"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"char charFromString = fooString[1]; // => 'e'\n// Strings are immutable: you can't do fooString[1] = 'X';\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"string-to-char-array",children:"String to Char-Array"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'string text = "Hallo";\nchar[] charArray = text.ToCharArray();\n\n// Ausgabe jedes Zeichens\nforeach (char c in charArray)\n{\n    Console.WriteLine(c);\n}\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"string-to-char-array-mit-linq",children:"String to Char-Array mit LINQ"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'string text = "Hallo";\nchar[] charArray = text.Select(c => c).ToArray();  // Alternativ mit LINQ\n\nConsole.WriteLine(new string(charArray)); // Ausgabe: Hallo\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"stringbuilder-appendline",children:"StringBuilder AppendLine"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'StringBuilder sb = new StringBuilder();\nsb.Append("Hello ");\nsb.AppendLine("World!");\nConsole.WriteLine(sb);\n// Ausgabe: Hello World!\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"verbatim-string",children:"Verbatim String"}),"\n",(0,r.jsx)(t.p,{children:"You can use the @ symbol before a string literal to escape all characters in the string"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'string path = "C:\\\\Users\\\\User\\\\Desktop";\nstring verbatimPath = @"C:\\Users\\User\\Desktop";\nConsole.WriteLine(path == verbatimPath);  // => true\n\n// You can split a string over two lines with the @ symbol. To escape " use ""\nstring bazString = @"Here\'s some stuff\non a new line! ""Wow!"", the masses cried";\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"string-indexof",children:"String IndexOf"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"string myText = \"some text\";\nConsole.WriteLine(myText.IndexOf('t')); // Outputs => 5\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"string-insert",children:"String Insert"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'string myText = "some text";\nmyText = myText.Insert(0, "This is ");\nConsole.WriteLine(myText);\n// Outputs => "This is some text"\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"string-replace",children:"String Replace"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'string myText = "This is some text"\nmyText = myText.Replace("This is", "Here is");\nConsole.WriteLine(myText);\n// Outputs => "Here is some text"\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"string-contains",children:"String Contains"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'string myText = "This is some text"\nif(myText.Contains("some"))\n\tConsole.WriteLine("found");\n// Outputs "found"\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"string-remove",children:"String Remove"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'string myText = "This is some text"\nmyText = myText.Remove(4);\nConsole.WriteLine(myText);\n// Outputs "This"\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"string-substring",children:"String Substring"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'string myText = "This is some text"\nmyText = myText.Substring(2, 3);\nConsole.WriteLine(myText);\n// Outputs "is"\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"string-slicing",children:"String Slicing"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Index"}),": Mit ",(0,r.jsx)(t.code,{children:"^"})," kannst Du vom Ende her indexieren (z.\u202fB. ",(0,r.jsx)(t.code,{children:"^1"})," f\xfcr das letzte Element)."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Range"}),": Mit ",(0,r.jsx)(t.code,{children:".."})," definierst Du einen Bereich. Dabei ist das Ende exklusiv."]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'string text = "Hallo Welt";\n\n// Teilausschnitt ab Index 6 bis zum Ende\nstring teilText1 = text[6..]; // "Welt"\n\n// Teilausschnitt von Index 0 bis 5\nstring teilText2 = text[..5]; // "Hallo"\n'})}),"\n",(0,r.jsx)(t.h2,{id:"quick-reference-string-methoden",children:"Quick-Reference: String Methoden"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Method"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Code"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Comments"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Clone()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"firstName.Clone()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Make clone of string"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"CompareTo()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"firstName.CompareTo(lastname)"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Compare two strings and returns integer value as output. It returns 0 for true and 1 for false"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Contains"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:'firstName.Contains("Dav")'}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"The Contains method checks whether specified character or string is exists or not in the string value"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"EndsWith()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:'firstName.EndsWith("n")'}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"This EndsWith Method checks whether specified character is the last character of string or not"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Equals()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"firstnName.Equals(lastname)"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"The Equals Method in C# compares two string and returns Boolean value as output"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"GetHashCode()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"firstName.GetHashCode()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"This method returns HashValue of specified string"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"GetType()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"firstName.GetType()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Returns the System.Type of current instance"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"IndexOf()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:'firstName.IndexOf("e")'}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Returns the index position of first occurrence of specified character"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"ToLower()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"firstName.ToLower()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Converts String into lower case based on rules of the current culture"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"ToUpper()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"firstName.ToUper()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Converts String into upper case based on rules of the current culture"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Insert()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:'firstName.Insert(0, "Hello")'}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Insert the string or character in the string at the specified position"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"IsNormalized()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"firstName.IsNormalized()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"This method checks whether this string is in Unicode normalization form C"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"LastIndexOf()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:'firsName.LastIndexOf("e")'}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"This method checks whether this string is in Unicode normalization form C"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Length"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"firstName.Length"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"It is a string property that returns length of string"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Remove()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"firstName.Remove(5)"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"This method deletes all the characters from beginning to specified index position"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Replace()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"firstName.Replace('e','i')"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"This method replaces the character"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Split()"}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:["string[] split = firstname.Split(new char[] ","e",");"]}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"This method splits the string based on specified value"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"StartsWith()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:'firstName.StartsWith("S")'}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"It checks whether the first character of string is same as specified character"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Substring()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"firstName.Substring(2,5)"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"This method returns substring"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"ToCharArray()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"firstnName.ToCharArray()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Converts string into char array"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Trim()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"firstnName.Trim()"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"It removes extra whitespaces from beginning and ending of string"})]})]})]})]})}function o(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);