"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[3437],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var s=t(96540);const a={},o=s.createContext(a);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(o.Provider,{value:n},e.children)}},83926:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Csharp/Collections/Stack","title":"Stacks","description":"","source":"@site/docs/04-Csharp/03-Collections/06-Stack.md","sourceDirName":"04-Csharp/03-Collections","slug":"/Csharp/Collections/Stack","permalink":"/my-documentation/docs/Csharp/Collections/Stack","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/04-Csharp/03-Collections/06-Stack.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"title":"Stacks","description":"","sidebar_position":6,"language":"C#","tags":[],"draft":false},"sidebar":"csharpSidebar","previous":{"title":"Dictionaries","permalink":"/my-documentation/docs/Csharp/Collections/Dictionaries"},"next":{"title":"Queues","permalink":"/my-documentation/docs/Csharp/Collections/Queue"}}');var a=t(74848),o=t(28453);const r={title:"Stacks",description:"",sidebar_position:6,language:"C#",tags:[],draft:!1},i=void 0,c={},l=[{value:"Add (push) to Stack",id:"add-push-to-stack",level:2},{value:"Anzahl Elemente im Stack",id:"anzahl-elemente-im-stack",level:2},{value:"Zugriff auf Elemente (peek, pop)",id:"zugriff-auf-elemente-peek-pop",level:2},{value:"TryPeek und TryPop",id:"trypeek-und-trypop",level:3},{value:"Stack leeren",id:"stack-leeren",level:2}];function d(e){const n={code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["A stack is a Last In, First Out (",(0,a.jsx)(n.strong,{children:"LIFO"}),") collection of elements where the last element that goes into the stack will be the first element that comes out."]}),"\n",(0,a.jsx)(n.p,{children:"Inserting an element onto a stack is called pushing. Deleting an element from a stack is called popping.\nPushing and popping can be performed only at the top of the stack."}),"\n",(0,a.jsxs)(n.p,{children:["Stacks can be used to create undo-redo functionalities, parsing expressions (infix to postfix/prefix conversion), and much more.\nThe C# generic collection ",(0,a.jsx)(n.code,{children:"Stack<T>"})," class requires all elements to be of the same type T."]}),"\n",(0,a.jsx)(n.h2,{id:"add-push-to-stack",children:"Add (push) to Stack"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"var stack = new Stack<int>();\n\n// Hinzuf\xfcgen von Elementen (Push)\nstack.Push(10);\nstack.Push(20);\nstack.Push(30);\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"anzahl-elemente-im-stack",children:"Anzahl Elemente im Stack"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'Console.WriteLine($"Anzahl der Elemente: {stack.Count}");\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"zugriff-auf-elemente-peek-pop",children:"Zugriff auf Elemente (peek, pop)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'// Zugriff auf das oberste Element ohne es zu entfernen (Peek)\nConsole.WriteLine($"Oberstes Element (Peek): {stack.Peek()}");\n\n// Entfernen des obersten Elements (Pop)\nConsole.WriteLine($"Entferntes Element (Pop): {stack.Pop()}");\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"trypeek-und-trypop",children:"TryPeek und TryPop"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'if (stack.TryPeek(out int topElement))\n{\n\tConsole.WriteLine($"\\nOberstes Element (TryPeek): {topElement}");\n}\n\nif (stack.TryPop(out int poppedElement))\n{\n\tConsole.WriteLine($"Entferntes Element (TryPop): {poppedElement}");\n}\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"stack-leeren",children:"Stack leeren"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'stack.Clear();\nConsole.WriteLine($"\\nAnzahl der Elemente nach Clear: {stack.Count}");\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);