"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[9936],{2193:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"Resourcen/Quick-References/CSharp-quickref","title":"C#","description":"","source":"@site/docs/07-Resourcen/Quick-References/CSharp-quickref.md","sourceDirName":"07-Resourcen/Quick-References","slug":"/Resourcen/Quick-References/CSharp-quickref","permalink":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/07-Resourcen/Quick-References/CSharp-quickref.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"description":"","sidebar_position":4,"toc_max_heading_level":4,"title":"C#"},"sidebar":"resourcenSidebar","previous":{"title":"Python","permalink":"/my-documentation/docs/Resourcen/Quick-References/Python-quickref"},"next":{"title":"Dokumentationen","permalink":"/my-documentation/docs/category/dokumentationen"}}');var s=t(4848),i=t(8453);const o={description:"",sidebar_position:4,toc_max_heading_level:4,title:"C#"},c=void 0,l={},a=[{value:"<strong>Types</strong>",id:"types",level:2},{value:"Type Conversion",id:"type-conversion",level:3},{value:"Typtestoperatoren",id:"typtestoperatoren",level:3},{value:"<code>is</code> Operator",id:"is-operator",level:4},{value:"<code>as</code> Operator",id:"as-operator",level:4},{value:"Typecasting",id:"typecasting",level:3},{value:"<strong>Operatoren</strong>",id:"operatoren",level:2},{value:"Arithmetische Operatoren",id:"arithmetische-operatoren",level:3},{value:"Vergleichsoperatoren",id:"vergleichsoperatoren",level:3},{value:"Logische Operatoren",id:"logische-operatoren",level:3},{value:"<strong>Kontrollstrukturen</strong>",id:"kontrollstrukturen",level:2},{value:"if-Statements",id:"if-statements",level:3},{value:"switch case",id:"switch-case",level:3},{value:"Loops",id:"loops",level:3},{value:"<strong>Datenstrukturen</strong>",id:"datenstrukturen",level:2},{value:"Arrays",id:"arrays",level:3},{value:"Lists",id:"lists",level:3},{value:"Linked Lists",id:"linked-lists",level:3},{value:"Dictionary",id:"dictionary",level:3},{value:"Structures",id:"structures",level:3},{value:"Enums",id:"enums",level:3},{value:"<strong>Classes &amp; Methods</strong>",id:"classes--methods",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/andredarcie/csharp-quick-reference-guide?tab=readme-ov-file",children:(0,s.jsx)(n.strong,{children:"C# Quick-Reference [Github]"})})}),"\n",(0,s.jsx)(n.h2,{id:"types",children:(0,s.jsx)(n.strong,{children:"Types"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/types",children:(0,s.jsx)(n.strong,{children:"Microsoft Language Specification - Types"})})}),"\n",(0,s.jsxs)(n.p,{children:["The following table lists the C# built-in\xa0",(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-types",children:"value"}),"\xa0types:"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"C# type keyword"}),(0,s.jsx)(n.th,{children:".NET type"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/bool",children:(0,s.jsx)(n.code,{children:"bool"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.boolean",children:"System.Boolean"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types",children:(0,s.jsx)(n.code,{children:"byte"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.byte",children:"System.Byte"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types",children:(0,s.jsx)(n.code,{children:"sbyte"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.sbyte",children:"System.SByte"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/char",children:(0,s.jsx)(n.code,{children:"char"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.char",children:"System.Char"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/floating-point-numeric-types",children:(0,s.jsx)(n.code,{children:"decimal"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.decimal",children:"System.Decimal"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/floating-point-numeric-types",children:(0,s.jsx)(n.code,{children:"double"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.double",children:"System.Double"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/floating-point-numeric-types",children:(0,s.jsx)(n.code,{children:"float"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.single",children:"System.Single"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types",children:(0,s.jsx)(n.code,{children:"int"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.int32",children:"System.Int32"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types",children:(0,s.jsx)(n.code,{children:"uint"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.uint32",children:"System.UInt32"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types",children:(0,s.jsx)(n.code,{children:"nint"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.intptr",children:"System.IntPtr"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types",children:(0,s.jsx)(n.code,{children:"nuint"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.uintptr",children:"System.UIntPtr"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types",children:(0,s.jsx)(n.code,{children:"long"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.int64",children:"System.Int64"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types",children:(0,s.jsx)(n.code,{children:"ulong"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.uint64",children:"System.UInt64"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types",children:(0,s.jsx)(n.code,{children:"short"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.int16",children:"System.Int16"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types",children:(0,s.jsx)(n.code,{children:"ushort"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.uint16",children:"System.UInt16"})})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["The following table lists the C# built-in\xa0",(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/reference-types",children:"reference"}),"\xa0types:"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"C# type keyword"}),(0,s.jsx)(n.th,{children:".NET type"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/reference-types#the-object-type",children:(0,s.jsx)(n.code,{children:"object"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.object",children:"System.Object"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/reference-types#the-string-type",children:(0,s.jsx)(n.code,{children:"string"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.string",children:"System.String"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/reference-types#the-dynamic-type",children:(0,s.jsx)(n.code,{children:"dynamic"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/system.object",children:"System.Object"})})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"type-conversion",children:"Type Conversion"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"Convert.ToBoolean(x);    // Converts a type to a Boolean value\nConvert.ToByte(x);       // Converts a type to a byte\nConvert.ToChar(x);       // Converts a type to a single Unicode character\nConvert.ToDateTime(x);   // Converts a type (integer or string type) to date-time structures\nConvert.ToDecimal(x);    // Converts a floating point or integer type to a decimal type\nConvert.ToDouble(x);     // Converts a type to a double type\nConvert.ToInt16(x);      // Converts a type to a 16-bit integer\nConvert.ToInt32(x);      // Converts a type to a 32-bit integer\nConvert.ToInt64(x);      // Converts a type to a 64-bit integer\nConvert.ToSbyte(x);      // Converts a type to a signed byte type\nConvert.ToSingle(x);     // Converts a type to a small floating point number\nConvert.ToString(x);     // Converts a type to a string\nConvert.ToType(x);       // Converts a type to a specified type\nConvert.ToUInt16(x);     // Converts a type to an unsigned int type\nConvert.ToUInt32(x);     // Converts a type to an unsigned long type\nConvert.ToUInt64(x);     // Converts a type to an unsigned big integer\n"})}),"\n",(0,s.jsx)(n.h3,{id:"typtestoperatoren",children:"Typtestoperatoren"}),"\n",(0,s.jsxs)(n.h4,{id:"is-operator",children:[(0,s.jsx)(n.code,{children:"is"})," Operator"]}),"\n",(0,s.jsx)(n.p,{children:"Pr\xfcft, ob ein Objekt zu einem bestimmten Typ kompatibel ist."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'if (obj is string)\n{\n    Console.WriteLine("obj ist ein String.");\n}\n'})}),"\n",(0,s.jsxs)(n.h4,{id:"as-operator",children:[(0,s.jsx)(n.code,{children:"as"})," Operator"]}),"\n",(0,s.jsx)(n.p,{children:"Versucht, ein Objekt in einen bestimmten Typ zu konvertieren, und gibt dabei null zur\xfcck, falls die Konvertierung nicht m\xf6glich ist."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"SomeType x = y as SomeType;\nif (x != null)\n{\n  // Do something\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"typecasting",children:"Typecasting"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Implizite Konvertierung"}),"\nEine Umwandlung, die automatisch erfolgt, weil sie sicher ist (d.\u202fh. es geht keine Information verloren)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"int zahl = 42;\ndouble d = zahl;  // int -> double: implizite Umwandlung (widening conversion)\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Explizite Konvertierung"}),"\nEine Umwandlung, bei der der Programmierer ausdr\xfccklich angibt, dass ein Typ in einen anderen umgewandelt werden soll.\nDies ist oft erforderlich, wenn Daten verloren gehen k\xf6nnen oder die Konvertierung nicht automatisch durchgef\xfchrt wird (narrowing conversion)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"double pi = 3.14159;\nint ganzZahl = (int)pi;  // double -> int: explizite Umwandlung, Nachkommabereich geht verloren\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/de-de/dotnet/csharp/language-reference/language-specification/conversions#103-explicit-conversions",children:"Microsoft C# Spezifikationen - Explizite Konvertierung"})}),"\n",(0,s.jsx)(n.h2,{id:"operatoren",children:(0,s.jsx)(n.strong,{children:"Operatoren"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/",children:(0,s.jsx)(n.strong,{children:"Microsoft Language Specification - Operators and Expressions"})})}),"\n",(0,s.jsx)(n.h3,{id:"arithmetische-operatoren",children:"Arithmetische Operatoren"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"x + y   // Adds two operands\nx - y   // Subtracts second operand from the first\nx * y   // Multiplies both operands\nx / y   // Divides numerator by de-numerator\nx % y   // Modulus Operator and remainder of after an integer division\nx++     // Increment operator increases integer value by one\nx--     // Decrement operator decreases integer value by one\n"})}),"\n",(0,s.jsx)(n.h3,{id:"vergleichsoperatoren",children:"Vergleichsoperatoren"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"(x == y)   // Checks if the values of two operands are equal\n(x != y)   // Checks if the values of two operands are equal or not\n(x > y)    // Checks if the value of left operand is greater than the value of right operand\n(x < y)    // Checks if the value of left operand is less than the value of right operand\n(x >= y)   // Checks if the value of left operand is greater than or equal to the value of right operand\n(x <= y)   // Checks if the value of left operand is less than or equal to the value of right operand\n"})}),"\n",(0,s.jsx)(n.h3,{id:"logische-operatoren",children:"Logische Operatoren"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"(x && y)   // Logical AND operator\n(x || y)   // Logical OR Operator\n!(x || y)  // Logical NOT Operator\n"})}),"\n",(0,s.jsx)(n.h2,{id:"kontrollstrukturen",children:(0,s.jsx)(n.strong,{children:"Kontrollstrukturen"})}),"\n",(0,s.jsx)(n.h3,{id:"if-statements",children:"if-Statements"}),"\n",(0,s.jsx)(n.h3,{id:"switch-case",children:"switch case"}),"\n",(0,s.jsx)(n.h3,{id:"loops",children:"Loops"}),"\n",(0,s.jsx)(n.h2,{id:"datenstrukturen",children:(0,s.jsx)(n.strong,{children:"Datenstrukturen"})}),"\n",(0,s.jsx)(n.h3,{id:"arrays",children:"Arrays"}),"\n",(0,s.jsx)(n.h3,{id:"lists",children:"Lists"}),"\n",(0,s.jsx)(n.h3,{id:"linked-lists",children:"Linked Lists"}),"\n",(0,s.jsx)(n.h3,{id:"dictionary",children:"Dictionary"}),"\n",(0,s.jsx)(n.h3,{id:"structures",children:"Structures"}),"\n",(0,s.jsx)(n.h3,{id:"enums",children:"Enums"}),"\n",(0,s.jsx)(n.h2,{id:"classes--methods",children:(0,s.jsx)(n.strong,{children:"Classes & Methods"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var r=t(6540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);