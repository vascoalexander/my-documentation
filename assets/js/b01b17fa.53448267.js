"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[6975],{16624:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"Csharp/Collections/Queue","title":"Queues","description":"","source":"@site/docs/04-Csharp/03-Collections/07-Queue.md","sourceDirName":"04-Csharp/03-Collections","slug":"/Csharp/Collections/Queue","permalink":"/my-documentation/docs/Csharp/Collections/Queue","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/04-Csharp/03-Collections/07-Queue.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"title":"Queues","description":"","sidebar_position":7,"language":"C#","tags":[],"draft":false},"sidebar":"csharpSidebar","previous":{"title":"Stacks","permalink":"/my-documentation/docs/Csharp/Collections/Stack"},"next":{"title":"Hashset","permalink":"/my-documentation/docs/Csharp/Collections/Hashset"}}');var s=t(74848),u=t(28453);const i={title:"Queues",description:"",sidebar_position:7,language:"C#",tags:[],draft:!1},l=void 0,o={},a=[{value:"Elemente hinzuf\xfcgen",id:"elemente-hinzuf\xfcgen",level:2},{value:"Anzahl von Elementen",id:"anzahl-von-elementen",level:2},{value:"Zugriff mit Peek",id:"zugriff-mit-peek",level:2},{value:"Element entfernen mit Dequeue",id:"element-entfernen-mit-dequeue",level:2},{value:"TryPeek und TryDequeue",id:"trypeek-und-trydequeue",level:2},{value:"Queue leeren",id:"queue-leeren",level:2}];function c(e){const n={code:"code",h2:"h2",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,u.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["A queue is a First In, First Out (",(0,s.jsx)(n.strong,{children:"FIFO"}),") collection of elements where the first element that goes into a queue is also the first element that comes out."]}),"\n",(0,s.jsx)(n.p,{children:"Inserting an element into a queue is referred to as Enqueue. Deleting an element from a queue is referred to as Dequeue.\nQueues are used whenever we need to manage objects in order starting with the first one in."}),"\n",(0,s.jsxs)(n.p,{children:["The C# generic collection ",(0,s.jsx)(n.code,{children:"Queue<T>"})," class requires that all elements be of the same type T."]}),"\n",(0,s.jsx)(n.h2,{id:"elemente-hinzuf\xfcgen",children:"Elemente hinzuf\xfcgen"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"Queue<int> queue = new Queue<int>();\n\n// Hinzuf\xfcgen von Elementen (Enqueue)\nqueue.Enqueue(10);\nqueue.Enqueue(20);\nqueue.Enqueue(30);\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"anzahl-von-elementen",children:"Anzahl von Elementen"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'Console.WriteLine($"Anzahl der Elemente: {queue.Count}");\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"zugriff-mit-peek",children:"Zugriff mit Peek"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'// Zugriff auf das vorderste Element ohne es zu entfernen (Peek)\nConsole.WriteLine($"Vorderstes Element (Peek): {queue.Peek()}");\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"element-entfernen-mit-dequeue",children:"Element entfernen mit Dequeue"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'// Entfernen des vordersten Elements (Dequeue)\nConsole.WriteLine($"Entferntes Element (Dequeue): {queue.Dequeue()}");\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"trypeek-und-trydequeue",children:"TryPeek und TryDequeue"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'if (queue.TryPeek(out int frontElement))\n{\n\tConsole.WriteLine($"\\nVorderstes Element (TryPeek): {frontElement}");\n}\n\nif (queue.TryDequeue(out int dequeuedElement))\n{\n\tConsole.WriteLine($"Entferntes Element (TryDequeue): {dequeuedElement}");\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"queue-leeren",children:"Queue leeren"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'queue.Clear();\nConsole.WriteLine($"\\nAnzahl der Elemente nach Clear: {queue.Count}");\n'})})]})}function d(e={}){const{wrapper:n}={...(0,u.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var r=t(96540);const s={},u=r.createContext(s);function i(e){const n=r.useContext(u);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(u.Provider,{value:n},e.children)}}}]);