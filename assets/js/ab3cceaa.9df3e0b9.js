"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[9366],{99740:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>m});const i=JSON.parse('{"id":"Csharp/Collections/Lists","title":"Lists","description":"","source":"@site/docs/04-Csharp/03-Collections/02-Lists.md","sourceDirName":"04-Csharp/03-Collections","slug":"/Csharp/Collections/Lists","permalink":"/my-documentation/docs/Csharp/Collections/Lists","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/04-Csharp/03-Collections/02-Lists.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Lists","description":"","sidebar_position":2,"language":"C#","tags":[],"draft":false},"sidebar":"csharpSidebar","previous":{"title":"Arrays","permalink":"/my-documentation/docs/Csharp/Collections/Arrays"},"next":{"title":"Linked Lists","permalink":"/my-documentation/docs/Csharp/Collections/Linked-Lists"}}');var s=t(74848),r=t(28453);const a={title:"Lists",description:"",sidebar_position:2,language:"C#",tags:[],draft:!1},o=void 0,l={},m=[];function c(e){const n={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["A list is similar to an array, but the elements in a list can be inserted and removed dynamically. The C# generic\ncollection ",(0,s.jsx)(n.code,{children:"List<T>"})," class requires all elements be of the same type T."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Erstellen einer Liste vom Typ string\n        List<string> namen = new List<string>();\n\n        // Hinzuf\xfcgen von Elementen\n        namen.Add("Anna");\n        namen.Add("Bernd");\n        namen.Add("Clara");\n\n        // Einf\xfcgen eines Elements an einem bestimmten Index (Index 1)\n        namen.Insert(1, "Dieter");\n\n        // \xdcberpr\xfcfen, ob ein bestimmter Wert existiert\n        bool enth\xe4ltClara = namen.Contains("Clara");\n        Console.WriteLine($"Enth\xe4lt Clara? {enth\xe4ltClara}");\n\n        // Entfernen eines Elements per Wert\n        namen.Remove("Bernd");\n\n        // Entfernen eines Elements per Index (erstes Element)\n        namen.RemoveAt(0);\n\n        // Iteration \xfcber die Liste\n        Console.WriteLine("Aktuelle Liste:");\n        foreach (string name in namen)\n        {\n            Console.WriteLine(name);\n        }\n\n        // Sortieren der Liste\n        namen.Sort();\n        Console.WriteLine("Sortierte Liste:");\n        namen.ForEach(Console.WriteLine);\n\n        // Liste umkehren\n        namen.Reverse();\n        Console.WriteLine("Umgekehrte Liste:");\n        namen.ForEach(Console.WriteLine);\n\n        // Zugriff auf ein Element per Index (Beispiel: erstes Element, falls vorhanden)\n        if (namen.Count > 0)\n        {\n            Console.WriteLine($"Erstes Element: {namen[0]}");\n        }\n\n        // Suchen eines Elements (erstes Element, das mit \'C\' beginnt)\n        string nameMitC = namen.Find(name => name.StartsWith("C"));\n        Console.WriteLine($"Erster Name, der mit \'C\' beginnt: {nameMitC}");\n\n        // Finden aller Elemente, die einer Bedingung entsprechen (z.B. L\xe4nge > 4)\n        List<string> langeNamen = namen.FindAll(name => name.Length > 4);\n        Console.WriteLine("Namen mit mehr als 4 Zeichen:");\n        langeNamen.ForEach(Console.WriteLine);\n\n        // Umwandeln der Liste in ein Array\n        string[] namenArray = namen.ToArray();\n        Console.WriteLine("Array-Ausgabe:");\n        foreach (var n in namenArray)\n        {\n            Console.WriteLine(n);\n        }\n\n        // Leeren der Liste\n        namen.Clear();\n        Console.WriteLine($"Anzahl der Elemente nach Clear: {namen.Count}");\n    }\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(96540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);