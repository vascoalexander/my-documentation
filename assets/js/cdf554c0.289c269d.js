"use strict";(self.webpackChunkmy_documentation=self.webpackChunkmy_documentation||[]).push([[7699],{24107:(r,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>s,default:()=>y,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"Code/CSharp/Collections/Arrays","title":"Arrays","description":"","source":"@site/docs/09-Code/01-CSharp/03-Collections/Arrays.md","sourceDirName":"09-Code/01-CSharp/03-Collections","slug":"/Code/CSharp/Collections/Arrays","permalink":"/my-documentation/docs/Code/CSharp/Collections/Arrays","draft":false,"unlisted":false,"editUrl":"https://github.com/vascoalexander/my-documentation/tree/main/docs/09-Code/01-CSharp/03-Collections/Arrays.md","tags":[],"version":"current","frontMatter":{"created":"2025-02-23, 11:45","language":"C#","description":"","tags":[]},"sidebar":"codeSidebar","previous":{"title":"Collections","permalink":"/my-documentation/docs/category/collections"},"next":{"title":"Dictionaries","permalink":"/my-documentation/docs/Code/CSharp/Collections/Dictionaries"}}');var t=n(74848),i=n(28453);const o={created:"2025-02-23, 11:45",language:"C#",description:"",tags:[]},s=void 0,d={},c=[{value:"Print 2D Array to console",id:"print-2d-array-to-console",level:3},{value:"Fill 2D Array with Random Numbers",id:"fill-2d-array-with-random-numbers",level:3},{value:"Merge Arrays",id:"merge-arrays",level:3}];function l(r){const e={code:"code",h3:"h3",pre:"pre",...(0,i.R)(),...r.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h3,{id:"print-2d-array-to-console",children:"Print 2D Array to console"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:'static void PrintArray(int[,] array)\n{\n    for (int i = 0; i < array.GetLength(0); i++)\n    {\n        for (int j = 0; j < array.GetLength(1); j++)\n            Console.Write($"{array[i, j]} ");\n        Console.WriteLine();\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"fill-2d-array-with-random-numbers",children:"Fill 2D Array with Random Numbers"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:"static void FillArray(int[,] array, int rows, int cols)\n{\n    Random rnd = new Random();\n    for (int i = 0; i < rows; i++)\n        for (int j = 0; j < cols; j++)\n            array[i, j] = rnd.Next(1, 10); \n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"merge-arrays",children:"Merge Arrays"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:"// Array copy: copies a range from a source array to a destination array with\n// optional start and end indices\nstatic int[] MergeArray(int[] array1, int[] array2)\n{\n    int[] arrayMerged = new int[array1.Length + array2.Length];\n    Array.Copy(array1, arrayMerged, array1.Length);\n    Array.Copy(array2, 0, arrayMerged, array1.Length, array2.Length);\n    Array.Sort(arrayMerged);\n    return arrayMerged;\n}\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:"// lange variante ohne Array.Copy\n// Arrays m\xfcssen vorsortiert sein\nstatic int[] MergeArray(int[] array1, int[] array2)\n{\n    int[] arrayMerged = new int[array1.Length + array2.Length];\n    int indexMerged = 0;\n    int indexArray1 = 0;\n    int indexArray2 = 0;\n\n    while (indexArray1 < array1.Length && indexArray2 < array2.Length)\n        // solange keines der beiden arrays komplett durchlaufen wurde\n    {\n        if (array1[indexArray1] < array2[indexArray2])\n            arrayMerged[indexMerged++] = array1[indexArray1++];\n        else\n            arrayMerged[indexMerged++] = array2[indexArray2++];\n    }\n\n    // schreibe das array dessen index nicht bis zum ende durchlaufen wurde\n    while (indexArray1 < array1.Length)\n        arrayMerged[indexMerged++] = array1[indexArray1++];\n\n    while (indexArray2 < array2.Length)\n        arrayMerged[indexMerged++] = array2[indexArray2++];\n\n    return arrayMerged;\n}\n"})})]})}function y(r={}){const{wrapper:e}={...(0,i.R)(),...r.components};return e?(0,t.jsx)(e,{...r,children:(0,t.jsx)(l,{...r})}):l(r)}},28453:(r,e,n)=>{n.d(e,{R:()=>o,x:()=>s});var a=n(96540);const t={},i=a.createContext(t);function o(r){const e=a.useContext(i);return a.useMemo((function(){return"function"==typeof r?r(e):{...e,...r}}),[e,r])}function s(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(t):r.components||t:o(r.components),a.createElement(i.Provider,{value:e},r.children)}}}]);