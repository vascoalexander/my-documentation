{"searchDocs":[{"title":".NET Framework","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Basics/DotNet-Framework","content":"","keywords":"","version":"Next"},{"title":"Einführung in das .NET Framework​","type":1,"pageTitle":".NET Framework","url":"/my-documentation/docs/Csharp/Basics/DotNet-Framework#einführung-in-das-net-framework","content":" Das .NET Framework ist eine von Microsoft entwickelte Plattform zur Entwicklung und Ausführung von Anwendungen. Es bietet eine einheitliche Laufzeitumgebung, Bibliotheken und Werkzeuge für verschiedene Programmiersprachen wie C#, VB.NET und F#.  1. Wichtige Kernkomponenten​  Common Intermediate Language (CIL) Der von .NET unterstützte Quellcode wird zunächst in eine zwischengeschaltete Sprache namens CIL (früher MSIL) übersetzt. Dieser Code ist unabhängig von der Zielplattform. Just-In-Time Compiler (JIT) Bevor eine Anwendung ausgeführt wird, übersetzt der JIT-Compiler den CIL-Code zur Laufzeit in Maschinencode, der direkt auf der jeweiligen Hardware ausgeführt werden kann. Common Language Runtime (CLR) Die CLR ist die Laufzeitumgebung von .NET. Sie verwaltet den Speicher, führt den JIT-Compiler aus und bietet Funktionen wie Garbage Collection und Ausnahmebehandlung. .NET Framework Class Library (FCL) Eine Sammlung von vordefinierten Klassen und Methoden, die für häufige Aufgaben wie Dateizugriff, Netzwerkkommunikation und GUI-Entwicklung genutzt werden kann.  2. Ablauf der Code-Ausführung in .NET​  Der Quellcode (z. B. in C#) wird mit dem Compiler (z. B. csc) in CIL übersetzt.Der CIL-Code wird in einer .dll oder .exe gespeichert.Bei der Ausführung übernimmt die CLR die Verwaltung.Der JIT-Compiler wandelt den CIL-Code in nativen Maschinencode um.Der optimierte Maschinencode wird von der CPU ausgeführt.  3. Vorteile von .NET​  Plattformunabhängigkeit (mit .NET Core/.NET 5+ auch für Linux &amp; macOS).Unterstützung mehrerer Programmiersprachen (C#, F#, VB.NET).Automatische Speicherverwaltung dank Garbage Collection.Große Standardbibliothek für viele Anwendungsfälle.    ","version":"Next","tagName":"h3"},{"title":".NET-Pakete und ihre Funktionen​","type":1,"pageTitle":".NET Framework","url":"/my-documentation/docs/Csharp/Basics/DotNet-Framework#net-pakete-und-ihre-funktionen","content":" .NET SDK: Das SDK ist das umfassendste Paket und enthält alles, was man für die Entwicklung von .NET-Anwendungen benötigt, einschließlich: .NET Runtime: Die Runtime ist die Grundlage für die Ausführung von .NET-Anwendungen. Sie stellt die notwendigen Bibliotheken und Komponenten bereit, um .NET-Anwendungen auszuführen..NET Compiler (Roslyn): Der Compiler wird verwendet, um den C#- oder F#-Code in ausführbaren Code zu übersetzen..NET CLI (Command Line Interface): Die CLI ist ein Befehlszeilentool, mit dem man .NET-Projekte erstellen, kompilieren und ausführen kannst..NET Templates: Vorlagen für verschiedene Arten von .NET-Projekten (z.B. Konsolenanwendungen, Webanwendungen, Klassenbibliotheken)..NET Libraries: Eine Sammlung von Bibliotheken, die verschiedene Funktionalitäten bereitstellen (z.B. Datenzugriff, Netzwerkkommunikation, Benutzeroberflächen). .NET Runtime: Die Runtime ist ausreichend, wenn man lediglich .NET-Anwendungen ausführen möchte. Für die Anwendungsentwicklung wird jedoch die SDK benötigt. ASP.NET Core Runtime: Für Webanwendungen mit ASP.NET Core, benötigt man zusätzlich die ASP.NET Core Runtime. Diese ist im .NET SDK enthalten, kann aber auch separat installiert werden.  ","version":"Next","tagName":"h3"},{"title":"Setup unter Linux / Rider​","type":1,"pageTitle":".NET Framework","url":"/my-documentation/docs/Csharp/Basics/DotNet-Framework#setup-unter-linux--rider","content":" Install JetBrains Rider | JetBrains Rider Documentation  Pfad zum .NET CLI in Rider: ➡ File → Settings → Build, Execution, Deployment → Toolset and Build  which dotnet # Pfad zum dotnet executable dotnet --version # verwendete dotnet version   # default -&gt; /home/user/.dotnet/dotnet export DOTNET_ROOT=/pfad/zu/riders/dotnet export PATH=$DOTNET_ROOT:$PATH # für dauerhafte Anwendung in ~/.bashrc bzw ~/.zshrc eintragen echo 'export DOTNET_ROOT=/pfad/zu/riders/dotnet' &gt;&gt; ~/.bashrc echo 'export PATH=$DOTNET_ROOT:$PATH' &gt;&gt; ~/.bashrc source ~/.bashrc   ","version":"Next","tagName":"h3"},{"title":"Related Links​","type":1,"pageTitle":".NET Framework","url":"/my-documentation/docs/Csharp/Basics/DotNet-Framework#related-links","content":" en.wikipedia.org/wiki/.NET_Framework .NET | Build. Test. Deploy. ","version":"Next","tagName":"h3"},{"title":"Coding Standards","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Basics/Coding-Standards","content":"","keywords":"","version":"Next"},{"title":"Naming Conventions​","type":1,"pageTitle":"Coding Standards","url":"/my-documentation/docs/Csharp/Basics/Coding-Standards#naming-conventions","content":" Was\tWie\tBeispielKlasse\tPascalCase\tMeineKlasse Struktur\tPascalCase\tMeineStruktur Schnittstelle (Interface)\tPascalCase mit &quot;I&quot;-Präfix\tIMeineSchnittstelle Methode\tPascalCase\tBerechneWert Eigenschaft (Property)\tPascalCase\tMeinWert Ereignis (Event)\tPascalCase\tWertGeaendert Feld (privat)\t_camelCase\t_meinFeld Parameter\tcamelCase\tparameterName Lokale Variable\tcamelCase\tlokaleVariable Konstante\tPascalCase\tMaxWert Enumeration\tPascalCase\tWochentag Enum-Mitglied\tPascalCase\tMontag Namespace\tPascalCase\tMeinProjekt Delegat\tPascalCase\tMeinDelegate  ","version":"Next","tagName":"h2"},{"title":"Related Links​","type":1,"pageTitle":"Coding Standards","url":"/my-documentation/docs/Csharp/Basics/Coding-Standards#related-links","content":" Microsoft-Learn - C# Identifier Names ","version":"Next","tagName":"h3"},{"title":"Numeric Types","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Basics/Numeric-Types","content":"","keywords":"","version":"Next"},{"title":"Ganzzahlige Datentypen​","type":1,"pageTitle":"Numeric Types","url":"/my-documentation/docs/Csharp/Basics/Numeric-Types#ganzzahlige-datentypen","content":" byte myUnsignedByte = 8; // Size: 8 bits | Range: 0 to 255 sbyte mySignedByte = -8; // Size: 8 bits | Range: -128 to +127   ushort myUnsignedShort = 16; // Size: 16 bits | Range: 0 to 65535 uint myUnsignedInt = 32; // Size: 32 bits | Range: 0 to 2^32-1 ulong myUnsignedLong = 64; // Size: 64 bits | Range: 0 to 2^64-1   short mySignedShort = 16; // Size: 16 bits | Range: -32768 to +32767 int mySignedInt = 32; // Size: 32 bits | Range: -2^31 to +2^31-1 long mySignedLong = -64; // Size: 64 bits | Range: -2^63 to +2^63-1   ","version":"Next","tagName":"h3"},{"title":"Gleitkommazahlen​","type":1,"pageTitle":"Numeric Types","url":"/my-documentation/docs/Csharp/Basics/Numeric-Types#gleitkommazahlen","content":" Floating-Point Types float myFloat = 3.14F; // Size: 32 bits | Range: 7 digits of precision double myDouble = 3.14D; // Size: 64 bits | Range: 15-16 digits of precision decimal myDecimal = 3.14M; // Size: 128 bits | Range: 28-29 digits of precision   float ist schnell, aber weniger genau.double ist der Standard für wissenschaftliche Berechnungen.decimal ist ideal für Geldbeträge, weil es präziser ist.  ","version":"Next","tagName":"h3"},{"title":"Related Links​","type":1,"pageTitle":"Numeric Types","url":"/my-documentation/docs/Csharp/Basics/Numeric-Types#related-links","content":" Docs Microsoft - Value TypesMicrosoft Docs - Integral numeric TypesMicrosoft Docs - Floating Point numeric Types ","version":"Next","tagName":"h3"},{"title":"Ternary Operators","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Basics/Ternary-Operators","content":"","keywords":"","version":"Next"},{"title":"with throw​","type":1,"pageTitle":"Ternary Operators","url":"/my-documentation/docs/Csharp/Basics/Ternary-Operators#with-throw","content":" string currentColor = farbe; Console.WriteLine( (currentColor == &quot;Rot&quot;) ? &quot;Anhalten&quot; : (currentColor == &quot;Gelb&quot; ? &quot;Warten&quot; : (currentColor == &quot;Grün&quot;) ? &quot;Fahren&quot; : throw new InvalidOperationException(&quot;Ungültige Farbe&quot;)));     ","version":"Next","tagName":"h3"},{"title":"with ReadLine​","type":1,"pageTitle":"Ternary Operators","url":"/my-documentation/docs/Csharp/Basics/Ternary-Operators#with-readline","content":" static void PwAbfrage() { Console.Write(&quot;Eingabe PW: &quot;); Console.WriteLine( Console.ReadLine() == &quot;1234&quot; ? &quot;Zugriff erlaubt&quot; : &quot;Zugriff verweigert&quot;); }     ","version":"Next","tagName":"h3"},{"title":"with formatted String​","type":1,"pageTitle":"Ternary Operators","url":"/my-documentation/docs/Csharp/Basics/Ternary-Operators#with-formatted-string","content":" int num = 5; Console.WriteLine(&quot;Die Zahl ist {0} als 10&quot;, (num &lt; 10) ? &quot;kleiner&quot; : &quot;größer&quot;);  ","version":"Next","tagName":"h3"},{"title":"Tuples","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Basics/Tuples","content":"","keywords":"","version":"Next"},{"title":"Deklaration und Initialisierung​","type":1,"pageTitle":"Tuples","url":"/my-documentation/docs/Csharp/Basics/Tuples#deklaration-und-initialisierung","content":" (double, int) t1 = (4.5, 3); Console.WriteLine($&quot;Tuple with elements {t1.Item1} and {t1.Item2}.&quot;); // Named Tuples (double num1, int num2) t2 = (4.5, 3); Console.WriteLine($&quot;First Number: {t2.num1}\\nSecond Number: {t2.num2}&quot;);     ","version":"Next","tagName":"h3"},{"title":"List with named Tuples​","type":1,"pageTitle":"Tuples","url":"/my-documentation/docs/Csharp/Basics/Tuples#list-with-named-tuples","content":" var list = new List&lt;(int num, string name)&gt;(); list.Add((1, &quot;str1&quot;)); list.Add((3, &quot;str2&quot;)); foreach ((int num, string name) in list) { Console.WriteLine(name + &quot;: &quot; + num); }   ","version":"Next","tagName":"h3"},{"title":"Related Links​","type":1,"pageTitle":"Tuples","url":"/my-documentation/docs/Csharp/Basics/Tuples#related-links","content":" Microsoft Docs - Tuple types ","version":"Next","tagName":"h3"},{"title":"Hashset","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Collections/Hashset","content":"Hashset A hash set is a set of unique values where duplicates are not allowed. C# includes the HashSet&lt;T&gt; class in the generic collections namespace. All HashSet&lt;T&gt; elements are required to be of the same type T. Hash sets are different from other collections because they are simply a set of values. They do not have index positions and elements cannot be ordered. The HashSet&lt;T&gt; class provides high-performance set operations. HashSets allow fast lookup, addition, and removal of items, and can be used to implement either dynamic sets of items or lookup tables that allow finding an item by its key.","keywords":"","version":"Next"},{"title":"Delegates","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Classes-OOP/Delegates","content":"Delegates Ein Delegate ist ein typisierter Verweis auf eine oder mehrere Methoden. Er ermöglicht es, Methoden als Objekte zu behandeln. // Delegate-Definition: public delegate int Operation(int a, int b); public class Rechner { public int Addieren(int a, int b) =&gt; a + b; public int Multiplizieren(int a, int b) =&gt; a * b; } // Anwendung: var rechner = new Rechner(); // Zuweisung der Methode an den Delegate: Operation op = rechner.Addieren; Console.WriteLine(op(3, 4)); // Ausgabe: 7 // Delegate neu zuweisen: op = rechner.Multiplizieren; Console.WriteLine(op(3, 4)); // Ausgabe: 12 ","keywords":"","version":"Next"},{"title":"Struct","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Classes-OOP/Struct","content":"","keywords":"","version":"Next"},{"title":"2D Koordinaten​","type":1,"pageTitle":"Struct","url":"/my-documentation/docs/Csharp/Classes-OOP/Struct#2d-koordinaten","content":" // Punkt speichert zwei Werte direkt im Stack → schneller als eine Klasse. // Strukturen sind perfekt für einfache Datencontainer. struct Punkt { public int X; public int Y; public Punkt(int x, int y) { X = x; Y = y; } public void Anzeigen() { Console.WriteLine($&quot;Punkt: ({X}, {Y})&quot;); } } class Program { static void Main() { Punkt p1 = new Punkt(10, 20); p1.Anzeigen(); // Ausgabe: Punkt: (10, 20) } }     ","version":"Next","tagName":"h2"},{"title":"Farbe (mit Auto-Properties)​","type":1,"pageTitle":"Struct","url":"/my-documentation/docs/Csharp/Classes-OOP/Struct#farbe-mit-auto-properties","content":" // Farbe ist ein idealer Kandidat für struct, da es nur Daten speichert. // Auto-Properties ({ get; }) machen es unveränderlich (immutable), was in vielen Szenarien nützlich ist. struct Farbe { public byte Rot { get; } public byte Grün { get; } public byte Blau { get; } public Farbe(byte rot, byte grün, byte blau) { Rot = rot; Grün = grün; Blau = blau; } public override string ToString() { return $&quot;RGB({Rot}, {Grün}, {Blau})&quot;; } } class Program { static void Main() { Farbe rot = new Farbe(255, 0, 0); Console.WriteLine(rot); // Ausgabe: RGB(255, 0, 0) } }   ","version":"Next","tagName":"h2"},{"title":"Related Links​","type":1,"pageTitle":"Struct","url":"/my-documentation/docs/Csharp/Classes-OOP/Struct#related-links","content":" Microsoft Docs - Structure Types ","version":"Next","tagName":"h2"},{"title":"Switch Expressions","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Basics/Switch-Expressions","content":"","keywords":"","version":"Next"},{"title":"Switch Expression​","type":1,"pageTitle":"Switch Expressions","url":"/my-documentation/docs/Csharp/Basics/Switch-Expressions#switch-expression","content":" string currentColor = Console.ReadLine(); string action = currentColor switch { &quot;Rot&quot; =&gt; &quot;Anhalten&quot;, &quot;Gelb&quot; =&gt; &quot;Warten&quot;, &quot;Grün&quot; =&gt; &quot;Fahren&quot;, _ =&gt; throw new InvalidOperationException(&quot;Ungültige Farbe&quot;) }; Console.WriteLine(action);     ","version":"Next","tagName":"h3"},{"title":"Property Pattern​","type":1,"pageTitle":"Switch Expressions","url":"/my-documentation/docs/Csharp/Basics/Switch-Expressions#property-pattern","content":" Eigenschaften von Objekten direkt im case-Ausdruck überprüfen  public class Punkt { public int X { get; set; } public int Y { get; set; } } Punkt p = new Punkt { X = 1, Y = 2 }; string beschreibung = p switch { { X: 0, Y: 0 } =&gt; &quot;Ursprung&quot;, { X: 0, Y: var y } =&gt; $&quot;Y-Achse, Y={y}&quot;, { X: var x, Y: 0 } =&gt; $&quot;X-Achse, X={x}&quot;, { X: var x, Y: var y } =&gt; $&quot;Punkt ({x}, {y})&quot; }; Console.WriteLine(beschreibung); // Ausgabe: Punkt (1, 2)     ","version":"Next","tagName":"h3"},{"title":"Tuple Pattern​","type":1,"pageTitle":"Switch Expressions","url":"/my-documentation/docs/Csharp/Basics/Switch-Expressions#tuple-pattern","content":" mehrere Werte gleichzeitig in einem Tupel überprüfen  (int x, int y) = (1, 2); string position = (x, y) switch { (0, 0) =&gt; &quot;Ursprung&quot;, (0, _) =&gt; &quot;Y-Achse&quot;, (_, 0) =&gt; &quot;X-Achse&quot;, (_, _) =&gt; &quot;Andere&quot; }; Console.WriteLine(position); // Ausgabe: Andere     ","version":"Next","tagName":"h3"},{"title":"When-Klausel​","type":1,"pageTitle":"Switch Expressions","url":"/my-documentation/docs/Csharp/Basics/Switch-Expressions#when-klausel","content":" zusätzliche Bedingungen mit when hinzufügen  int zahl = 5; string beschreibung = zahl switch { var n when n &gt; 0 &amp;&amp; n &lt; 10 =&gt; &quot;Einstellige positive Zahl&quot;, var n when n &gt;= 10 &amp;&amp; n &lt; 100 =&gt; &quot;Zweistellige positive Zahl&quot;, _ =&gt; &quot;Andere Zahl&quot; }; Console.WriteLine(beschreibung); // Ausgabe: Einstellige positive Zahl  ","version":"Next","tagName":"h3"},{"title":"Conversion & Casting","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Basics/Conversion-Casting","content":"","keywords":"","version":"Next"},{"title":"Type Conversion​","type":1,"pageTitle":"Conversion & Casting","url":"/my-documentation/docs/Csharp/Basics/Conversion-Casting#type-conversion","content":" Convert.ToBoolean(x); // Converts a type to a Boolean value Convert.ToByte(x); // Converts a type to a byte Convert.ToChar(x); // Converts a type to a single Unicode character Convert.ToDateTime(x); // Converts a type (integer or string type) to date-time structures Convert.ToDecimal(x); // Converts a floating point or integer type to a decimal type Convert.ToDouble(x); // Converts a type to a double type Convert.ToInt16(x); // Converts a type to a 16-bit integer Convert.ToInt32(x); // Converts a type to a 32-bit integer Convert.ToInt64(x); // Converts a type to a 64-bit integer Convert.ToSbyte(x); // Converts a type to a signed byte type Convert.ToSingle(x); // Converts a type to a small floating point number Convert.ToString(x); // Converts a type to a string Convert.ToType(x); // Converts a type to a specified type Convert.ToUInt16(x); // Converts a type to an unsigned int type Convert.ToUInt32(x); // Converts a type to an unsigned long type Convert.ToUInt64(x); // Converts a type to an unsigned big integer   ","version":"Next","tagName":"h2"},{"title":".NET CLI","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Basics/DotNet-CLI","content":"","keywords":"","version":"Next"},{"title":"Arbeiten mit Projekten​","type":1,"pageTitle":".NET CLI","url":"/my-documentation/docs/Csharp/Basics/DotNet-CLI#arbeiten-mit-projekten","content":" # .NET SDK Version prüfen dotnet --version # Neues Projekt erstellen dotnet new console -o MeinProjekt cd MeinProjekt # Projekt ausführen dotnet run # Liste der Projekte in der Solution dotnet sln list # Lösung (Solution) erstellen und Projekt hinzufügen dotnet new sln -n MeineLoesung dotnet sln MeineLoesung.sln add MeinProjekt/MeinProjekt.csproj # Class Library in ein Projekt einbinden cd ProjektFolder dotnet add reference ../MyLibrary/MyLibrary.csproj   ","version":"Next","tagName":"h3"},{"title":"Abhängigkeiten verwalten​","type":1,"pageTitle":".NET CLI","url":"/my-documentation/docs/Csharp/Basics/DotNet-CLI#abhängigkeiten-verwalten","content":" # Abhängigkeiten verwalten (NuGet) dotnet add package Newtonsoft.Json # Paket hinzufügen dotnet remove package Newtonsoft.Json # Paket entfernen dotnet list package # Installierte Pakete auflisten dotnet restore # Alle Abhängigkeiten neu installieren # NuGet Feed konfigurieren dotnet nuget add source &quot;https://api.nuget.org/v3/index.json&quot; --name nuget.org dotnet nuget list source # Verfügbare Quellen anzeigen dotnet nuget remove source nuget.org # Quelle entfernen # NuGet Cache verwalten dotnet nuget locals all --clear # Cache leeren dotnet nuget locals http-cache --clear # Nur HTTP-Cache leeren dotnet nuget locals global-packages --list # Installierte Pakete anzeigen # Paket aus einer lokalen NuGet-Sammlung installieren dotnet add package MeinPaket --source ./mein-nuget-feed # Paket veröffentlichen dotnet nuget push MeinPaket.nupkg -k API_KEY -s https://api.nuget.org/v3/index.json   ","version":"Next","tagName":"h3"},{"title":"Arbeiten mit dem Code​","type":1,"pageTitle":".NET CLI","url":"/my-documentation/docs/Csharp/Basics/DotNet-CLI#arbeiten-mit-dem-code","content":" # Build-Prozess dotnet build # Kompiliert das Projekt dotnet build --configuration Release # Für eine Release-Version # Tests ausführen dotnet test # Projekt veröffentlichen dotnet publish -c Release -r win-x64 --self-contained false # Globale Tools installieren und verwalten dotnet tool install -g dotnet-ef dotnet tool update -g dotnet-ef dotnet tool list -g # Entity Framework Core Migrationen (falls EF installiert ist) dotnet ef migrations add InitialCreate dotnet ef database update # Code-Analyse und Formatierung dotnet format dotnet clean # Performance-Analyse dotnet watch run # Beobachtet Änderungen und startet neu dotnet trace collect --process-id &lt;PID&gt; # Traced laufende App # Infos zu installierten SDKs und Laufzeiten dotnet --list-sdks dotnet --list-runtimes   ","version":"Next","tagName":"h3"},{"title":"Related Links​","type":1,"pageTitle":".NET CLI","url":"/my-documentation/docs/Csharp/Basics/DotNet-CLI#related-links","content":" learn.microsoft.com/en-us/dotnet/core/tools/dotnet learn.microsoft.com/de-de/dotnet/core/tools/ ","version":"Next","tagName":"h3"},{"title":"Interfaces","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Classes-OOP/Inferfaces","content":"Interfaces Ein Interface definiert einen Vertrag (Methoden, Eigenschaften etc.), den implementierende Klassen erfüllen müssen. Es ermöglicht lose Kopplung. public interface IBeweglich { void Bewege(); } public class Auto : IBeweglich { public void Bewege() { Console.WriteLine(&quot;Das Auto fährt.&quot;); } } public class Fahrrad : IBeweglich { public void Bewege() { Console.WriteLine(&quot;Das Fahrrad rollt.&quot;); } } // Anwendung: IBeweglich fahrzeug = new Auto(); fahrzeug.Bewege(); // Ausgabe: Das Auto fährt. fahrzeug = new Fahrrad(); fahrzeug.Bewege(); // Ausgabe: Das Fahrrad rollt. ","keywords":"","version":"Next"},{"title":"Type Casting​","type":1,"pageTitle":"Conversion & Casting","url":"/my-documentation/docs/Csharp/Basics/Conversion-Casting#type-casting","content":" Implizite Konvertierung (automatisch) Eine Umwandlung, die automatisch erfolgt, weil sie sicher ist (d. h. es geht keine Information verloren).  converting a smaller type to a larger type size char -&gt; int -&gt; long -&gt; float -&gt; double  int zahl = 42; double d = zahl; // int -&gt; double: implizite Umwandlung (widening conversion)   Explizite Konvertierung (manuell) Eine Umwandlung, bei der der Programmierer ausdrücklich angibt, dass ein Typ in einen anderen umgewandelt werden soll. Dies ist oft erforderlich, wenn Daten verloren gehen können oder die Konvertierung nicht automatisch durchgeführt wird (narrowing conversion).  converting a larger type to a smaller size type: double -&gt; float -&gt; long -&gt; int -&gt; char  double pi = 3.14159; int ganzZahl = (int)pi; // double -&gt; int: explizite Umwandlung, Nachkommabereich geht verloren   ","version":"Next","tagName":"h2"},{"title":"Type Testoperatoren​","type":1,"pageTitle":"Conversion & Casting","url":"/my-documentation/docs/Csharp/Basics/Conversion-Casting#type-testoperatoren","content":" ","version":"Next","tagName":"h2"},{"title":"is Operator​","type":1,"pageTitle":"Conversion & Casting","url":"/my-documentation/docs/Csharp/Basics/Conversion-Casting#is-operator","content":" Prüft, ob ein Objekt zu einem bestimmten Typ kompatibel ist.  if (obj is string) { Console.WriteLine(&quot;obj ist ein String.&quot;); }   ","version":"Next","tagName":"h3"},{"title":"as Operator​","type":1,"pageTitle":"Conversion & Casting","url":"/my-documentation/docs/Csharp/Basics/Conversion-Casting#as-operator","content":" Versucht, ein Objekt in einen bestimmten Typ zu konvertieren, und gibt dabei null zurück, falls die Konvertierung nicht möglich ist.  SomeType x = y as SomeType; if (x != null) { // Do something }   ","version":"Next","tagName":"h3"},{"title":"Related Links​","type":1,"pageTitle":"Conversion & Casting","url":"/my-documentation/docs/Csharp/Basics/Conversion-Casting#related-links","content":" Microsoft Docs - Casting and Type Conversions Microsoft C# Spezifikationen - Explizite Konvertierung ","version":"Next","tagName":"h2"},{"title":"Linked Lists","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Collections/Linked-Lists","content":"","keywords":"","version":"Next"},{"title":"Add Items​","type":1,"pageTitle":"Linked Lists","url":"/my-documentation/docs/Csharp/Collections/Linked-Lists#add-items","content":" var linkedList = new LinkedList&lt;string&gt;(); linkedList.AddFirst(&quot;Clara&quot;); // Element am Anfang hinzufügen linkedList.AddLast(&quot;Anna&quot;); // Element am Ende hinzufügen   ","version":"Next","tagName":"h2"},{"title":"Knoten mit bestimmten Wert suchen​","type":1,"pageTitle":"Linked Lists","url":"/my-documentation/docs/Csharp/Collections/Linked-Lists#knoten-mit-bestimmten-wert-suchen","content":" LinkedListNode&lt;string&gt; nodeBernd = linkedList.Find(&quot;Bernd&quot;); if (nodeBernd != null) { // Hinzufügen eines Elements nach einem bekannten Knoten linkedList.AddAfter(nodeBernd, &quot;Dieter&quot;); // Hinzufügen eines Elements vor einem bekannten Knoten linkedList.AddBefore(nodeBernd, &quot;Eva&quot;); }   ","version":"Next","tagName":"h2"},{"title":"Elemente entfernen​","type":1,"pageTitle":"Linked Lists","url":"/my-documentation/docs/Csharp/Collections/Linked-Lists#elemente-entfernen","content":" // Entfernen eines Elements per Wert linkedList.Remove(&quot;Clara&quot;); // Entfernen des ersten und letzten Knotens linkedList.RemoveFirst(); linkedList.RemoveLast();   ","version":"Next","tagName":"h2"},{"title":"Anzahl der Elemente​","type":1,"pageTitle":"Linked Lists","url":"/my-documentation/docs/Csharp/Collections/Linked-Lists#anzahl-der-elemente","content":" Console.WriteLine($&quot;\\nAnzahl der Elemente: {linkedList.Count}&quot;);   ","version":"Next","tagName":"h2"},{"title":"Iteration mittels Knotenreferenz​","type":1,"pageTitle":"Linked Lists","url":"/my-documentation/docs/Csharp/Collections/Linked-Lists#iteration-mittels-knotenreferenz","content":" Console.WriteLine(&quot;\\nIteration mit LinkedListNode&lt;T&gt;:&quot;); for (LinkedListNode&lt;string&gt; node = linkedList.First; node != null; node = node.Next) { Console.WriteLine(node.Value); }  ","version":"Next","tagName":"h2"},{"title":"Documentation","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Documentation","content":"Documentation C# Quick-Reference [Github] C# Cheat Sheet [Github] Value Types Integral numeric Types Floating Point numeric Types Tuple types Enumeration Types Structure Types Strings Array Class Generic collections Casting and Type Conversions Explizite Konvertierung Operators and Expressions Statements","keywords":"","version":"Next"},{"title":"Stacks","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Collections/Stack","content":"","keywords":"","version":"Next"},{"title":"Add (push) to Stack​","type":1,"pageTitle":"Stacks","url":"/my-documentation/docs/Csharp/Collections/Stack#add-push-to-stack","content":" var stack = new Stack&lt;int&gt;(); // Hinzufügen von Elementen (Push) stack.Push(10); stack.Push(20); stack.Push(30);     ","version":"Next","tagName":"h2"},{"title":"Anzahl Elemente im Stack​","type":1,"pageTitle":"Stacks","url":"/my-documentation/docs/Csharp/Collections/Stack#anzahl-elemente-im-stack","content":" Console.WriteLine($&quot;Anzahl der Elemente: {stack.Count}&quot;);     ","version":"Next","tagName":"h2"},{"title":"Zugriff auf Elemente (peek, pop)​","type":1,"pageTitle":"Stacks","url":"/my-documentation/docs/Csharp/Collections/Stack#zugriff-auf-elemente-peek-pop","content":" // Zugriff auf das oberste Element ohne es zu entfernen (Peek) Console.WriteLine($&quot;Oberstes Element (Peek): {stack.Peek()}&quot;); // Entfernen des obersten Elements (Pop) Console.WriteLine($&quot;Entferntes Element (Pop): {stack.Pop()}&quot;);     ","version":"Next","tagName":"h2"},{"title":"TryPeek und TryPop​","type":1,"pageTitle":"Stacks","url":"/my-documentation/docs/Csharp/Collections/Stack#trypeek-und-trypop","content":" if (stack.TryPeek(out int topElement)) { Console.WriteLine($&quot;\\nOberstes Element (TryPeek): {topElement}&quot;); } if (stack.TryPop(out int poppedElement)) { Console.WriteLine($&quot;Entferntes Element (TryPop): {poppedElement}&quot;); }     ","version":"Next","tagName":"h3"},{"title":"Stack leeren​","type":1,"pageTitle":"Stacks","url":"/my-documentation/docs/Csharp/Collections/Stack#stack-leeren","content":" stack.Clear(); Console.WriteLine($&quot;\\nAnzahl der Elemente nach Clear: {stack.Count}&quot;);  ","version":"Next","tagName":"h2"},{"title":"Sorted Lists","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Collections/Sorted-Lists","content":"","keywords":"","version":"Next"},{"title":"Elemente hinzufügen​","type":1,"pageTitle":"Sorted Lists","url":"/my-documentation/docs/Csharp/Collections/Sorted-Lists#elemente-hinzufügen","content":" var sortedList = new SortedList&lt;string, int&gt;(); // Hinzufügen von Schlüssel-Wert-Paaren sortedList.Add(&quot;Clara&quot;, 30); sortedList.Add(&quot;Anna&quot;, 25); // Zugriff per Schlüssel Console.WriteLine($&quot;Anna ist {sortedList[&quot;Anna&quot;]} Jahre alt.&quot;);     ","version":"Next","tagName":"h2"},{"title":"Iteration mit KeyValuePair​","type":1,"pageTitle":"Sorted Lists","url":"/my-documentation/docs/Csharp/Collections/Sorted-Lists#iteration-mit-keyvaluepair","content":" Console.WriteLine(&quot;\\nSortedList Einträge:&quot;); foreach (KeyValuePair&lt;string, int&gt; pair in sortedList) { Console.WriteLine($&quot;{pair.Key}: {pair.Value}&quot;); }     ","version":"Next","tagName":"h2"},{"title":"Remove Element​","type":1,"pageTitle":"Sorted Lists","url":"/my-documentation/docs/Csharp/Collections/Sorted-Lists#remove-element","content":" sortedList.Remove(&quot;Bernd&quot;);     ","version":"Next","tagName":"h2"},{"title":"ContainsKey​","type":1,"pageTitle":"Sorted Lists","url":"/my-documentation/docs/Csharp/Collections/Sorted-Lists#containskey","content":" if (sortedList.ContainsKey(&quot;Clara&quot;)) { Console.WriteLine(&quot;\\nClara ist in der SortedList vorhanden.&quot;); }     ","version":"Next","tagName":"h2"},{"title":"Wert aktualisieren​","type":1,"pageTitle":"Sorted Lists","url":"/my-documentation/docs/Csharp/Collections/Sorted-Lists#wert-aktualisieren","content":" sortedList[&quot;Anna&quot;] = 26;     ","version":"Next","tagName":"h2"},{"title":"Keys, Values​","type":1,"pageTitle":"Sorted Lists","url":"/my-documentation/docs/Csharp/Collections/Sorted-Lists#keys-values","content":" IList&lt;string&gt; keys = sortedList.Keys; IList&lt;int&gt; values = sortedList.Values; Console.WriteLine(&quot;\\nSchlüssel:&quot;); foreach (var key in keys) { Console.WriteLine(key); } Console.WriteLine(&quot;\\nWerte:&quot;); foreach (var value in values) { Console.WriteLine(value); }     ","version":"Next","tagName":"h2"},{"title":"SortedList Count​","type":1,"pageTitle":"Sorted Lists","url":"/my-documentation/docs/Csharp/Collections/Sorted-Lists#sortedlist-count","content":" Console.WriteLine($&quot;\\nAnzahl der Elemente: {sortedList.Count}&quot;);     ","version":"Next","tagName":"h2"},{"title":"Clear SortedList​","type":1,"pageTitle":"Sorted Lists","url":"/my-documentation/docs/Csharp/Collections/Sorted-Lists#clear-sortedlist","content":" sortedList.Clear(); Console.WriteLine($&quot;\\nAnzahl der Elemente nach Clear: {sortedList.Count}&quot;);  ","version":"Next","tagName":"h2"},{"title":"Lists","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Collections/Lists","content":"","keywords":"","version":"Next"},{"title":"Add Items​","type":1,"pageTitle":"Lists","url":"/my-documentation/docs/Csharp/Collections/Lists#add-items","content":" var namen = new List&lt;string&gt;(); // Hinzufügen von Elementen namen.Add(&quot;Anna&quot;); namen.Add(&quot;Bernd&quot;); // Einfügen eines Elements an einem bestimmten Index (Index 1) namen.Insert(1, &quot;Dieter&quot;);     ","version":"Next","tagName":"h2"},{"title":"List Contains​","type":1,"pageTitle":"Lists","url":"/my-documentation/docs/Csharp/Collections/Lists#list-contains","content":" bool enthältClara = namen.Contains(&quot;Clara&quot;); Console.WriteLine($&quot;Enthält Clara? {enthältClara}&quot;);     ","version":"Next","tagName":"h2"},{"title":"List Remove, RemoveAt​","type":1,"pageTitle":"Lists","url":"/my-documentation/docs/Csharp/Collections/Lists#list-remove-removeat","content":" // per Wert namen.Remove(&quot;Bernd&quot;); // per Index namen.RemoveAt(0);     ","version":"Next","tagName":"h2"},{"title":"Liste Sortieren​","type":1,"pageTitle":"Lists","url":"/my-documentation/docs/Csharp/Collections/Lists#liste-sortieren","content":" namen.Sort(); Console.WriteLine(&quot;Sortierte Liste:&quot;); namen.ForEach(Console.WriteLine);     ","version":"Next","tagName":"h2"},{"title":"List Reverse​","type":1,"pageTitle":"Lists","url":"/my-documentation/docs/Csharp/Collections/Lists#list-reverse","content":" namen.Reverse(); Console.WriteLine(&quot;Umgekehrte Liste:&quot;); namen.ForEach(Console.WriteLine);     ","version":"Next","tagName":"h2"},{"title":"Ein Element suchen (erster Treffer)​","type":1,"pageTitle":"Lists","url":"/my-documentation/docs/Csharp/Collections/Lists#ein-element-suchen-erster-treffer","content":" string nameMitC = namen.Find(name =&gt; name.StartsWith(&quot;C&quot;)); Console.WriteLine($&quot;Erster Name, der mit 'C' beginnt: {nameMitC}&quot;);     ","version":"Next","tagName":"h2"},{"title":"Suchen Aller Elemente die ...​","type":1,"pageTitle":"Lists","url":"/my-documentation/docs/Csharp/Collections/Lists#suchen-aller-elemente-die-","content":" List&lt;string&gt; langeNamen = namen.FindAll(name =&gt; name.Length &gt; 4); Console.WriteLine(&quot;Namen mit mehr als 4 Zeichen:&quot;); langeNamen.ForEach(Console.WriteLine);     ","version":"Next","tagName":"h2"},{"title":"List to Array​","type":1,"pageTitle":"Lists","url":"/my-documentation/docs/Csharp/Collections/Lists#list-to-array","content":" string[] namenArray = namen.ToArray(); Console.WriteLine(&quot;Array-Ausgabe:&quot;); foreach (var n in namenArray) { Console.WriteLine(n); }     ","version":"Next","tagName":"h2"},{"title":"Liste leeren​","type":1,"pageTitle":"Lists","url":"/my-documentation/docs/Csharp/Collections/Lists#liste-leeren","content":" namen.Clear(); Console.WriteLine($&quot;Anzahl der Elemente nach Clear: {namen.Count}&quot;);   ","version":"Next","tagName":"h2"},{"title":"Related Links​","type":1,"pageTitle":"Lists","url":"/my-documentation/docs/Csharp/Collections/Lists#related-links","content":"","version":"Next","tagName":"h2"},{"title":"Queues","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Collections/Queue","content":"","keywords":"","version":"Next"},{"title":"Elemente hinzufügen​","type":1,"pageTitle":"Queues","url":"/my-documentation/docs/Csharp/Collections/Queue#elemente-hinzufügen","content":" Queue&lt;int&gt; queue = new Queue&lt;int&gt;(); // Hinzufügen von Elementen (Enqueue) queue.Enqueue(10); queue.Enqueue(20); queue.Enqueue(30);     ","version":"Next","tagName":"h2"},{"title":"Anzahl von Elementen​","type":1,"pageTitle":"Queues","url":"/my-documentation/docs/Csharp/Collections/Queue#anzahl-von-elementen","content":" Console.WriteLine($&quot;Anzahl der Elemente: {queue.Count}&quot;);     ","version":"Next","tagName":"h2"},{"title":"Zugriff mit Peek​","type":1,"pageTitle":"Queues","url":"/my-documentation/docs/Csharp/Collections/Queue#zugriff-mit-peek","content":" // Zugriff auf das vorderste Element ohne es zu entfernen (Peek) Console.WriteLine($&quot;Vorderstes Element (Peek): {queue.Peek()}&quot;);     ","version":"Next","tagName":"h2"},{"title":"Element entfernen mit Dequeue​","type":1,"pageTitle":"Queues","url":"/my-documentation/docs/Csharp/Collections/Queue#element-entfernen-mit-dequeue","content":" // Entfernen des vordersten Elements (Dequeue) Console.WriteLine($&quot;Entferntes Element (Dequeue): {queue.Dequeue()}&quot;);     ","version":"Next","tagName":"h2"},{"title":"TryPeek und TryDequeue​","type":1,"pageTitle":"Queues","url":"/my-documentation/docs/Csharp/Collections/Queue#trypeek-und-trydequeue","content":" if (queue.TryPeek(out int frontElement)) { Console.WriteLine($&quot;\\nVorderstes Element (TryPeek): {frontElement}&quot;); } if (queue.TryDequeue(out int dequeuedElement)) { Console.WriteLine($&quot;Entferntes Element (TryDequeue): {dequeuedElement}&quot;); }     ","version":"Next","tagName":"h2"},{"title":"Queue leeren​","type":1,"pageTitle":"Queues","url":"/my-documentation/docs/Csharp/Collections/Queue#queue-leeren","content":" queue.Clear(); Console.WriteLine($&quot;\\nAnzahl der Elemente nach Clear: {queue.Count}&quot;);  ","version":"Next","tagName":"h2"},{"title":"Try and Catch","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Error-Handling/Try-and-Catch","content":"","keywords":"","version":"Next"},{"title":"Division durch Null​","type":1,"pageTitle":"Try and Catch","url":"/my-documentation/docs/Csharp/Error-Handling/Try-and-Catch#division-durch-null","content":" try { int a = 10; int b = 0; int result = a / b; Console.WriteLine(&quot;Ergebnis: &quot; + result); } catch (DivideByZeroException ex) { Console.WriteLine(&quot;Division durch Null ist nicht erlaubt: &quot; + ex.Message); }     ","version":"Next","tagName":"h2"},{"title":"Convert String to Integer​","type":1,"pageTitle":"Try and Catch","url":"/my-documentation/docs/Csharp/Error-Handling/Try-and-Catch#convert-string-to-integer","content":" try { string input = &quot;abc&quot;; // Ungültige Zahl int zahl = int.Parse(input); Console.WriteLine(&quot;Die Zahl ist: &quot; + zahl); } catch (FormatException ex) { Console.WriteLine(&quot;Ungültiges Format: &quot; + ex.Message); } catch (Exception ex) { Console.WriteLine(&quot;Ein unerwarteter Fehler ist aufgetreten: &quot; + ex.Message); }     ","version":"Next","tagName":"h2"},{"title":"Datei lesen​","type":1,"pageTitle":"Try and Catch","url":"/my-documentation/docs/Csharp/Error-Handling/Try-and-Catch#datei-lesen","content":" try { string text = File.ReadAllText(&quot;datei.txt&quot;); Console.WriteLine(text); } catch (FileNotFoundException ex) { Console.WriteLine(&quot;Datei nicht gefunden: &quot; + ex.Message); } catch (IOException ex) { Console.WriteLine(&quot;Ein Fehler ist beim Lesen der Datei aufgetreten: &quot; + ex.Message); }  ","version":"Next","tagName":"h2"},{"title":"LINQ to Objects","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/LINQ/LINQ-to-Objects","content":"","keywords":"","version":"Next"},{"title":"Enumerable Range​","type":1,"pageTitle":"LINQ to Objects","url":"/my-documentation/docs/Csharp/LINQ/LINQ-to-Objects#enumerable-range","content":" foreach (var number in Enumerable.Range(1, 10)) { Console.WriteLine(number); }     ","version":"Next","tagName":"h2"},{"title":"Filter Array​","type":1,"pageTitle":"LINQ to Objects","url":"/my-documentation/docs/Csharp/LINQ/LINQ-to-Objects#filter-array","content":" var scores = new int[] { 90, 100, 82, 89, 92 }; var highScores = from score in scores where score &gt;= 90 select score; foreach (var score in highScores) { Console.WriteLine(score); }   ","version":"Next","tagName":"h2"},{"title":"Related Links​","type":1,"pageTitle":"LINQ to Objects","url":"/my-documentation/docs/Csharp/LINQ/LINQ-to-Objects#related-links","content":"","version":"Next","tagName":"h2"},{"title":"Classes & Objects","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Classes-OOP/Classes-Objects","content":"","keywords":"","version":"Next"},{"title":"Simple Class with Constructor​","type":1,"pageTitle":"Classes & Objects","url":"/my-documentation/docs/Csharp/Classes-OOP/Classes-Objects#simple-class-with-constructor","content":" public class Person { public string Name {get, private set}; public int Age {get, private set}; // Einfacher Konstruktor public Person(string name, int age) { Name = name; Age = age; } public void Greet() { Console.WriteLine($&quot;Hallo, mein Name ist {Name} &quot; + $&quot;und ich bin {Age} Jahre alt.&quot;); } } class Program { static void Main() { Person p = new Person(&quot;Max&quot;, 30); p.Greet(); } }     ","version":"Next","tagName":"h2"},{"title":"Person Class with Full Name Property​","type":1,"pageTitle":"Classes & Objects","url":"/my-documentation/docs/Csharp/Classes-OOP/Classes-Objects#person-class-with-full-name-property","content":" public class Person { public string FirstName { get; set; } public string LastName { get; set; } public string FullName =&gt; $&quot;{FirstName ?? &quot;Unknown&quot;} {LastName ?? &quot;Unknown&quot;}&quot;; }     ","version":"Next","tagName":"h2"},{"title":"Explizite Getter und Setter​","type":1,"pageTitle":"Classes & Objects","url":"/my-documentation/docs/Csharp/Classes-OOP/Classes-Objects#explizite-getter-und-setter","content":" public class Person { private string name; // Getter-Methode public string GetName() { return name; } // Setter-Methode public void SetName(string value) { // Hier könnte man auch Validierungen einbauen name = value; } } // Nutzung: var person = new Person(); person.SetName(&quot;Max&quot;); Console.WriteLine(person.GetName()); // Ausgabe: Max     ","version":"Next","tagName":"h2"},{"title":"Properties (ausführliche Schreibweise)​","type":1,"pageTitle":"Classes & Objects","url":"/my-documentation/docs/Csharp/Classes-OOP/Classes-Objects#properties-ausführliche-schreibweise","content":" Properties kapseln intern oft ein privates Feld (Backing Field) und bieten einen direkten Zugriff über eine kompakte Syntax.  public class Person { private string _name; public string Name { get { return _name; } set { _name = value; } // Hier können auch Prüfungen eingebaut werden } } // Nutzung: var person = new Person(); person.Name = &quot;Max&quot;; Console.WriteLine(person.Name); // Ausgabe: Max     ","version":"Next","tagName":"h2"},{"title":"Expression-bodied Properties​","type":1,"pageTitle":"Classes & Objects","url":"/my-documentation/docs/Csharp/Classes-OOP/Classes-Objects#expression-bodied-properties","content":" public class Papier { private double _laenge; private double _breite; public double Laenge { get =&gt; _laenge; set =&gt; _laenge = value; } public double Breite { get =&gt; _breite; set =&gt; _breite = value; } }     ","version":"Next","tagName":"h2"},{"title":"Properties (Auto-Properties)​","type":1,"pageTitle":"Classes & Objects","url":"/my-documentation/docs/Csharp/Classes-OOP/Classes-Objects#properties-auto-properties","content":" Bei Auto-Properties übernimmt der Compiler die Erstellung eines versteckten Backing Fields  public class Person { public string Name { get; set; } } // Nutzung: var person = new Person { Name = &quot;Max&quot; }; Console.WriteLine(person.Name); // Ausgabe: Max     ","version":"Next","tagName":"h2"},{"title":"Konstruktor mit Überladung​","type":1,"pageTitle":"Classes & Objects","url":"/my-documentation/docs/Csharp/Classes-OOP/Classes-Objects#konstruktor-mit-überladung","content":" // man kann mehrere Konstruktoren mit verschiedenen Parametern // definieren (Konstruktor Überladung) class Person { public string Name; public int Age; // Konstruktor 1 public Person(string name, int age) { Name = name; Age = age; } // Konstruktor 2 (Standardwerte) public Person() { Name = &quot;Unbekannt&quot;; Age = 0; } } class Program { static void Main() { Person p1 = new Person(&quot;Anna&quot;, 25); Person p2 = new Person(); // Standardwerte werden gesetzt Console.WriteLine($&quot;{p1.Name}, {p1.Age} Jahre&quot;); Console.WriteLine($&quot;{p2.Name}, {p2.Age} Jahre&quot;); } }     ","version":"Next","tagName":"h2"},{"title":"Konstruktor Aufruf mit this​","type":1,"pageTitle":"Classes & Objects","url":"/my-documentation/docs/Csharp/Classes-OOP/Classes-Objects#konstruktor-aufruf-mit-this","content":" class Beispiel { // Konstruktor ohne Parameter, der den anderen Konstruktor // mit this(..., ...) aufruft public Beispiel() : this(&quot;Heute ist der &quot;, DateTime.Today) { } // Konstruktor mit zwei Parametern public Beispiel(string text, DateTime datum) { Console.WriteLine(text + datum.ToShortDateString()); } // Hauptmethode public static void Main(string[] args) { Beispiel beispiel1 = new Beispiel(&quot;Morgen ist der &quot;, DateTime.Today.AddDays(1)); // Aufruf des ersten Konstruktors // Ausgabe: Morgen ist der {dd.MM.yyyy} Beispiel beispiel2 = new Beispiel(); // Aufruf des zweiten Konstruktors // Ausgabe: Heute ist der {dd.MM.yyyy} } }  ","version":"Next","tagName":"h2"},{"title":"Text Files","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/IO-Operations/Text-Files","content":"","keywords":"","version":"Next"},{"title":"Create Temp File​","type":1,"pageTitle":"Text Files","url":"/my-documentation/docs/Csharp/IO-Operations/Text-Files#create-temp-file","content":" static string CreateTempFile() { string newtempfile = System.IO.Path.GetTempFileName(); return newtempfile; }     ","version":"Next","tagName":"h3"},{"title":"ReadAllText()​","type":1,"pageTitle":"Text Files","url":"/my-documentation/docs/Csharp/IO-Operations/Text-Files#readalltext","content":" string filePath = &quot;beispiel.txt&quot;; try { // Liest den gesamten Inhalt der Datei als String ein string content = File.ReadAllText(filePath); Console.WriteLine(content); } catch (Exception ex) { Console.WriteLine(&quot;Fehler beim Lesen der Datei: &quot; + ex.Message); }     ","version":"Next","tagName":"h3"},{"title":"Using + Streamreader​","type":1,"pageTitle":"Text Files","url":"/my-documentation/docs/Csharp/IO-Operations/Text-Files#using--streamreader","content":" // besser geeignet als File.ReadAllText() bei großen dateien using (var streamReader = new StreamReader(@&quot;C:\\file.txt&quot;)) { string content = streamReader.ReadToEnd(); Console.WriteLine(content); }     ","version":"Next","tagName":"h3"},{"title":"Write to new File​","type":1,"pageTitle":"Text Files","url":"/my-documentation/docs/Csharp/IO-Operations/Text-Files#write-to-new-file","content":" static void Main() { string filePath = &quot;neue_datei.txt&quot;; string sourceText = &quot;Das ist der Quelltext, der gespeichert werden soll.&quot;; try { // Öffnet die Datei im Schreibmodus (überschreibt bestehende Datei) // und schreibt den Text hinein using (StreamWriter writer = new StreamWriter(filePath, false)) { writer.Write(sourceText); } Console.WriteLine(&quot;Text wurde in die Datei geschrieben.&quot;); } catch (Exception ex) { Console.WriteLine(&quot;Fehler beim Schreiben in die Datei: &quot; + ex.Message); } }  ","version":"Next","tagName":"h3"},{"title":"User Input","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/IO-Operations/User-Input","content":"","keywords":"","version":"Next"},{"title":"Console Abfrage​","type":1,"pageTitle":"User Input","url":"/my-documentation/docs/Csharp/IO-Operations/User-Input#console-abfrage","content":" static void PwAbfrage() { Console.Write(&quot;Eingabe PW: &quot;); Console.WriteLine( Console.ReadLine() == &quot;1234&quot; ? &quot;Zugriff erlaubt&quot; : &quot;Zugriff verweigert&quot;); }     ","version":"Next","tagName":"h2"},{"title":"Console Menu​","type":1,"pageTitle":"User Input","url":"/my-documentation/docs/Csharp/IO-Operations/User-Input#console-menu","content":" static void Menu() { Console.WriteLine(&quot;Option wählen:&quot;); Console.WriteLine(&quot;1) Option1&quot;); Console.WriteLine(&quot;2) Option2&quot;); Console.WriteLine(&quot;3) Option3&quot;); Console.Write(&quot;Ihre Eingabe: &quot;); }     ","version":"Next","tagName":"h2"},{"title":"Menu Choice​","type":1,"pageTitle":"User Input","url":"/my-documentation/docs/Csharp/IO-Operations/User-Input#menu-choice","content":" static int MenuChoice() { var choice = 0; while ((!int.TryParse(Console.ReadLine(), out choice) &amp;&amp; choice &lt; 1) || choice &gt; 3) { Console.Clear(); Console.WriteLine(&quot;Ungültige Eingabe!&quot;); Menu(); } return choice; }     ","version":"Next","tagName":"h2"},{"title":"WaitForKeyPress​","type":1,"pageTitle":"User Input","url":"/my-documentation/docs/Csharp/IO-Operations/User-Input#waitforkeypress","content":" private static void WaitForKeyPress() { Console.WriteLine(&quot;Any key to continue...&quot;); Console.ReadKey(); }   ","version":"Next","tagName":"h2"},{"title":"string with Default Fallback​","type":1,"pageTitle":"User Input","url":"/my-documentation/docs/Csharp/IO-Operations/User-Input#string-with-default-fallback","content":" string firstName = person?.FirstName ?? &quot;Unknown&quot;; Console.WriteLine(firstName);     ","version":"Next","tagName":"h2"},{"title":"string.isNullOrEmpty​","type":1,"pageTitle":"User Input","url":"/my-documentation/docs/Csharp/IO-Operations/User-Input#stringisnullorempty","content":" string input = Console.ReadLine()!; char guess = !string.IsNullOrEmpty(input) ? input[0] : '_';  ","version":"Next","tagName":"h2"},{"title":"Datenbankmodelle","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/Grundlagen/Datenbankmodelle","content":"","keywords":"","version":"Next"},{"title":"Was ist eine Datenbank?​","type":1,"pageTitle":"Datenbankmodelle","url":"/my-documentation/docs/DB/Grundlagen/Datenbankmodelle#was-ist-eine-datenbank","content":" Datenbasis (DB) = die eigentlichen Daten Datenbankmanagementsystem (DBMS) = Software zur Verwaltung der Daten  ","version":"Next","tagName":"h3"},{"title":"Klassische Datenbankmodelle​","type":1,"pageTitle":"Datenbankmodelle","url":"/my-documentation/docs/DB/Grundlagen/Datenbankmodelle#klassische-datenbankmodelle","content":" ","version":"Next","tagName":"h2"},{"title":"Hierarchisches Datenbankmodell:​","type":1,"pageTitle":"Datenbankmodelle","url":"/my-documentation/docs/DB/Grundlagen/Datenbankmodelle#hierarchisches-datenbankmodell","content":" Speicherung in hierarchischer BaumstrukturJeder Knoten hat maximal einen Vorgänger, aber beliebig viele Nachfolgerschnell aber unflexibelZugriff nur über die Wurzel    ","version":"Next","tagName":"h3"},{"title":"Netzwerkdatenbankmodell:​","type":1,"pageTitle":"Datenbankmodelle","url":"/my-documentation/docs/DB/Grundlagen/Datenbankmodelle#netzwerkdatenbankmodell","content":" Weiterentwicklung des hierarchischen ModellsAuch Querverbindungen und mehrere übergeordnete Knoten    ","version":"Next","tagName":"h3"},{"title":"Relationales Datenbankmodell​","type":1,"pageTitle":"Datenbankmodelle","url":"/my-documentation/docs/DB/Grundlagen/Datenbankmodelle#relationales-datenbankmodell","content":" einfache Handhabung, weite VerbreitungManipulation und Abfrage der Daten mittels SQLAufteilung der Daten auf Tabellen durch Normalisierung (Vermeidung von Redundanzen)  ","version":"Next","tagName":"h3"},{"title":"Objektorientiertes Datenbankmodell​","type":1,"pageTitle":"Datenbankmodelle","url":"/my-documentation/docs/DB/Grundlagen/Datenbankmodelle#objektorientiertes-datenbankmodell","content":" Speicherung in Form von ObjektenBeziehungen zwischen Objekten bleiben erhaltenkomplexer Aufbau und Wartung ","version":"Next","tagName":"h3"},{"title":"Concatenating","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Strings/Concatenating","content":"","keywords":"","version":"Next"},{"title":"String Concat​","type":1,"pageTitle":"Concatenating","url":"/my-documentation/docs/Csharp/Strings/Concatenating#string-concat","content":" string[] words = { &quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;, &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog.&quot; }; string unreadablePhrase = string.Concat(words); Console.WriteLine(unreadablePhrase); //The output is &quot; Thequickbrownfoxjumpsoverthelazydog. &quot;   ","version":"Next","tagName":"h2"},{"title":"String Join​","type":1,"pageTitle":"Concatenating","url":"/my-documentation/docs/Csharp/Strings/Concatenating#string-join","content":" string[] words = { &quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;, &quot;jumps&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog.&quot; }; string readablePhrase = string.Join(&quot; &quot;, words); Console.WriteLine(readablePhrase); // output: &quot; The quick brown fox jumps over the lazy dog. &quot;   ","version":"Next","tagName":"h2"},{"title":"Combine Strings in a Loop​","type":1,"pageTitle":"Concatenating","url":"/my-documentation/docs/Csharp/Strings/Concatenating#combine-strings-in-a-loop","content":" var sb = new System.Text.StringBuilder(); for (int i = 0; i &lt; 20; i++) { sb.AppendLine(i.ToString()); } Console.WriteLine(sb.ToString());  ","version":"Next","tagName":"h2"},{"title":"Dictionaries","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Collections/Dictionaries","content":"","keywords":"","version":"Next"},{"title":"Dictionary Initialization​","type":1,"pageTitle":"Dictionaries","url":"/my-documentation/docs/Csharp/Collections/Dictionaries#dictionary-initialization","content":" var capitals = new Dictionary&lt;string, string&gt; { [&quot;USA&quot;] = &quot;Washington, D.C.&quot;, [&quot;Japan&quot;] = &quot;Tokyo&quot;, [&quot;France&quot;] = &quot;Paris&quot; };     ","version":"Next","tagName":"h3"},{"title":"Dictionary aus Tuplen​","type":1,"pageTitle":"Dictionaries","url":"/my-documentation/docs/Csharp/Collections/Dictionaries#dictionary-aus-tuplen","content":" bei einem named tuple wird Item1 oder Item2 entsprechend durch die Name ersetzt  Dictionary&lt;string, (string, string)&gt; meinDict = new() { {&quot;key1&quot;, (&quot;wert1&quot;, &quot;wert2&quot;)}, {&quot;key2&quot;, (&quot;wert1&quot;, &quot;wert2&quot;)} }; string elementOfDict = meinDict[&quot;key1&quot;].Item1; Console.WriteLine(elementOfDict);     using System; using System.Collections.Generic; namespace DictionaryBeispiel { class Program { static void Main(string[] args) { // Erstellen eines Dictionaries // Schlüssel: int, Wert: string Dictionary&lt;int, string&gt; dict = new Dictionary&lt;int, string&gt;(); // Elemente hinzufügen: dict.Add(1, &quot;Eins&quot;); dict.Add(2, &quot;Zwei&quot;); // Alternativ kann man den Indexer verwenden (fügt hinzu oder aktualisiert vorhandene Keys): dict[3] = &quot;Drei&quot;; // Zugriff und Überprüfung // Direkter Zugriff (Achtung: KeyNotFoundException wenn Key nicht existiert) Console.WriteLine(&quot;Element mit Key 1: &quot; + dict[1]); // Überprüfen, ob ein Key existiert: if (dict.ContainsKey(2)) { Console.WriteLine(&quot;Key 2 existiert im Dictionary.&quot;); } // Sicherer Zugriff mit TryGetValue: if (dict.TryGetValue(3, out string wert)) { Console.WriteLine(&quot;Element mit Key 3: &quot; + wert); } // Aktualisieren eines Elements dict[1] = &quot;Eins Aktualisiert&quot;; Console.WriteLine(&quot;Aktualisiertes Element mit Key 1: &quot; + dict[1]); // Entfernen eines Elements dict.Remove(2); Console.WriteLine(&quot;Nach dem Entfernen von Key 2, enthält dict Key 2: &quot; + dict.ContainsKey(2)); // Iterieren über das Dictionary // Über Key-Value-Paare: Console.WriteLine(&quot;\\nAlle Elemente im Dictionary:&quot;); foreach (var kvp in dict) { Console.WriteLine($&quot;Key: {kvp.Key}, Value: {kvp.Value}&quot;); } // Nur über die Schlüssel: Console.WriteLine(&quot;\\nAlle Schlüssel:&quot;); foreach (var key in dict.Keys) { Console.WriteLine(key); } // Nur über die Werte: Console.WriteLine(&quot;\\nAlle Werte:&quot;); foreach (var value in dict.Values) { Console.WriteLine(value); } // Anzahl der Elemente: Console.WriteLine($&quot;\\nAnzahl der Elemente im Dictionary: {dict.Count}&quot;); // Alle Elemente löschen dict.Clear(); Console.WriteLine(&quot;Nach Clear, Anzahl der Elemente: &quot; + dict.Count); // Erstellen eines Dictionaries mit Initialisierer var fruits = new Dictionary&lt;string, int&gt; { { &quot;Apfel&quot;, 3 }, { &quot;Banane&quot;, 5 }, { &quot;Kirsche&quot;, 10 } }; // Iterieren über das initialisierte Dictionary: Console.WriteLine(&quot;\\nFrüchte im Initialisierer-Dictionary:&quot;); foreach (var item in fruits) { Console.WriteLine($&quot;Frucht: {item.Key}, Anzahl: {item.Value}&quot;); } } } }  ","version":"Next","tagName":"h3"},{"title":"Statements","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Basics/Statements","content":"","keywords":"","version":"Next"},{"title":"if-Statements​","type":1,"pageTitle":"Statements","url":"/my-documentation/docs/Csharp/Basics/Statements#if-statements","content":" if...else if...else int time = 22; if (time &lt; 10) { Console.WriteLine(&quot;Good morning.&quot;); } else if (time &lt; 20) { Console.WriteLine(&quot;Good day.&quot;); } else { Console.WriteLine(&quot;Good evening.&quot;); }   Ternary Operators // A simple if/else can be written as follows // &lt;condition&gt; ? &lt;true&gt; : &lt;false&gt; int toCompare = 17; string isTrue = toCompare == 17 ? &quot;True&quot; : &quot;False&quot;;   ","version":"Next","tagName":"h2"},{"title":"switch case​","type":1,"pageTitle":"Statements","url":"/my-documentation/docs/Csharp/Basics/Statements#switch-case","content":" // A switch works with the byte, short, char, and int data types. // It also works with enumerated types (discussed in Enum Types), // the String class, and a few special classes that wrap // primitive types: Character, Byte, Short, and Integer. int month = 3; string monthString; switch (month) { case 1: monthString = &quot;January&quot;; break; case 2: monthString = &quot;February&quot;; break; case 3: monthString = &quot;March&quot;; break; // You can assign more than one case to an action // But you can't add an action without a break before another case // (if you want to do this, you would have to explicitly add a goto case x case 6: case 7: case 8: monthString = &quot;Summer time!!&quot;; break; default: monthString = &quot;Some other month&quot;; break; }   ","version":"Next","tagName":"h2"},{"title":"while, do...while​","type":1,"pageTitle":"Statements","url":"/my-documentation/docs/Csharp/Basics/Statements#while-dowhile","content":" While loop int fooWhile = 0; while (fooWhile &lt; 100) { // Iterated 100 times, fooWhile 0-&gt;99 fooWhile++; }   Do...While loop // Do While Loop int fooDoWhile = 0; do { // Start iteration 100 times, fooDoWhile 0-&gt;99 if (false) { continue; // skip the current iteration } fooDoWhile++; if (fooDoWhile == 50) { break; // breaks from the loop completely } } while (fooDoWhile &lt; 100);   ","version":"Next","tagName":"h2"},{"title":"for-loop​","type":1,"pageTitle":"Statements","url":"/my-documentation/docs/Csharp/Basics/Statements#for-loop","content":" For loop for (int i = 0; i &lt; 10; i++) { Console.WriteLine($&quot;value of i: {i}&quot;); }   Nested loops for (int i = 0; i &lt; 10; i++) { for (int j = 0; j &lt; 10; j++) { Console.WriteLine($&quot;i: {i}, j: {j}&quot;); } }   ","version":"Next","tagName":"h2"},{"title":"foreach-loop​","type":1,"pageTitle":"Statements","url":"/my-documentation/docs/Csharp/Basics/Statements#foreach-loop","content":" Foreach, in ArrayList numbers = new ArrayList(); numbers.Add(1); numbers.Add(2); numbers.Add(3); Console.WriteLine($&quot;Count: {numbers.Count}&quot;); foreach (int number in numbers) { Console.Write(number + &quot; &quot;); }   ","version":"Next","tagName":"h2"},{"title":"return Statement​","type":1,"pageTitle":"Statements","url":"/my-documentation/docs/Csharp/Basics/Statements#return-statement","content":" static int Add(int a, int b) { return a + b; } static void Main(string[] args) { Console.WriteLine(Add(1, 2)); return; }   ","version":"Next","tagName":"h2"},{"title":"yield Statement​","type":1,"pageTitle":"Statements","url":"/my-documentation/docs/Csharp/Basics/Statements#yield-statement","content":" Das yield-Schlüsselwort in C# wird in Iteratoren verwendet und ermöglicht die schrittweise Bereitstellung von Werten, ohne dass eine gesamte Sammlung im Speicher gehalten werden muss. Es vereinfacht die Implementierung von Enumeratoren und verbessert die Speicher- sowie Performance-Effizienz.  Es gibt zwei Varianten:  yield return – Gibt einen einzelnen Wert zurück und pausiert die Methode, bis der nächste Wert angefordert wird.yield break – Beendet die Iteration vorzeitig.  static IEnumerable&lt;int&gt; Range(int from, int to) { for (int i = from; i &lt; to; i++) { yield return i; } yield break; } static void Main(string[] args) { foreach (int x in Range(-10,10)) { Console.WriteLine(x); } }   yield ist besonders nützlich für große Datenmengen, Streaming-Verarbeitung und Lazy Computation.  ","version":"Next","tagName":"h2"},{"title":"checked / unchecked​","type":1,"pageTitle":"Statements","url":"/my-documentation/docs/Csharp/Basics/Statements#checked--unchecked","content":" static void Main(string[] args) { int i = int.MaxValue; checked { Console.WriteLine(i + 1); } // System.OverflowException unchecked { Console.WriteLine(i + 1); } // Overflow - dies ist das default Verhalten: // auch ohne das unchecked Statement würde es zum Overflow kommen }   ","version":"Next","tagName":"h2"},{"title":"lock Statement​","type":1,"pageTitle":"Statements","url":"/my-documentation/docs/Csharp/Basics/Statements#lock-statement","content":" Das lock-Statement in C# wird verwendet, um Datenraces und Konkurrenzprobleme bei der parallelen Ausführung von Threads zu vermeiden. Es sorgt dafür, dass nur ein Thread gleichzeitig auf einen kritischen Abschnitt des Codes zugreifen kann, und verhindert so Konflikte.  Das lock-Objekt Das lock-Statement verwendet ein Schlüsselobjekt, das von jedem Thread verwendet wird, um zu synchronisieren, wann ein Thread den Zugriff auf einen kritischen Abschnitt des Codes erlangen kann. Solange das lock-Objekt von einem Thread verwendet wird, kann kein andere Thread der dasselbe lock-Objekt nutzt fortfahren, sondern muss warten bis das Objekt wieder freigegben wurde.  Beispiel class Counter { private int _count = 0; private readonly object _lockObj = new object(); // Lock-Objekt public void Increment() { lock (_lockObj) { _count++; // Nur ein Thread kann diesen Abschnitt gleichzeitig betreten } } public int GetCount() { return _count; } }   ","version":"Next","tagName":"h2"},{"title":"using Statement​","type":1,"pageTitle":"Statements","url":"/my-documentation/docs/Csharp/Basics/Statements#using-statement","content":" Das using-Statement in C# wird verwendet, um Ressourcen wie Datenbankverbindungen, Dateihandles oder Netzwerkverbindungen zu verwalten und sie nach Gebrauch automatisch freizugeben, sobald sie nicht mehr benötigt werden.  using stellt sicher, dass Ressourcen nach ihrer Verwendung automatisch freigegeben werden, ohne dass man explizit eine Dispose()-Methode aufrufen musst.  using (StreamReader reader = new StreamReader(&quot;datei.txt&quot;)) { string line = reader.ReadLine(); Console.WriteLine(line); } // Sobald der Block verlassen wird, wird 'reader.Dispose()' aufgerufen und die Datei wird automatisch geschlossen.   using-Direktive (Namespace)Neben dem using-Statement gibt es auch die using-Direktive, mit der du Namespaces importierst, um den Code leserlicher zu machen und die Notwendigkeit zu vermeiden, lange Namespace-Pfade zu schreiben.  ","version":"Next","tagName":"h2"},{"title":"Exception Handling​","type":1,"pageTitle":"Statements","url":"/my-documentation/docs/Csharp/Basics/Statements#exception-handling","content":" static double Divide(double x, double y) { if (y == 0) { throw new DivideByZeroException(); } return x / y; } static void Main(string[] args) { try { if (args.Length != 2) { throw new Exception(&quot;Two numbers are required&quot;); } double x = double.Parse(args[0]); double y = double.Parse(args[1]); Console.WriteLine(Divide(x, y)); } catch (Exception e) { Console.WriteLine(e.Message); } finally { Console.WriteLine(&quot;Terminating!&quot;); } }   ","version":"Next","tagName":"h2"},{"title":"Related Links​","type":1,"pageTitle":"Statements","url":"/my-documentation/docs/Csharp/Basics/Statements#related-links","content":" Microsoft Docs - Statements ","version":"Next","tagName":"h2"},{"title":"Format Specifiers","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Strings/Format-Specifiers","content":"","keywords":"","version":"Next"},{"title":"Standard Numeric Formats​","type":1,"pageTitle":"Format Specifiers","url":"/my-documentation/docs/Csharp/Strings/Format-Specifiers#standard-numeric-formats","content":" Char\tName\tBeschreibung\tUsage\tAusgabeC\tCurrency\tWährungsformat (z. B. Euro)\t{1234.56:C}\t1.234,56 € D\tDecimal\tGanzzahldarstellung mit führenden Nullen (optional)\t{123:D5}\t00123 E\tExponential\tWissenschaftliche Notation\t{1234.56:E2}\t1,23E+003 F\tFixed-Point\tFeste Anzahl an Dezimalstellen\t{1234.56:F2}\t1234,56 G\tGeneral\tKürzeste Darstellung (Festkomma oder Exponential)\t{1234.56:G}\t1234,56 N\tNumber\tNummernformat mit Tausendergruppierung\t{1234.56:N2}\t1.234,56 P\tPercent\tProzentformat (Wert wird mit 100 multipliziert)\t{0.1234:P1}\t12,3 % R\tRound-Trip\tPräzise Formatierung für verlustfreie Umwandlung\t{3.1415926:R}\t3,14159265 X\tHexadecimal\tGanze Zahl in hexadezimaler Darstellung\t{123:X}\t7B    ","version":"Next","tagName":"h2"},{"title":"Custom Numeric Formats​","type":1,"pageTitle":"Format Specifiers","url":"/my-documentation/docs/Csharp/Strings/Format-Specifiers#custom-numeric-formats","content":" Char\tName\tKurze Beschreibung\tUsage\tAusgabe0\tNull-Platzhalter\tErzwingt Ziffer; fehlt eine Ziffer, wird „0“ eingesetzt\t{23:0000}\t0023 #\tZiffern-Platzhalter\tZeigt vorhandene Ziffern an; nicht vorhandene Stellen bleiben leer\t{5:##}\t5 ?\tPlatzhalter\tZeigt Ziffer an oder ein Leerzeichen, wenn keine Ziffer vorhanden (zur Ausrichtung)\t{5:??}\t5 (mit führendem Leerzeichen) .\tDezimalpunkt\tLegt die Position des Dezimaltrennzeichens fest\t{12.3:0.00}\t12,30 ,\tTausender-trennzeichen\tGruppiert Ziffern oder skaliert den Wert (bei mehrfacher Verwendung)\t{1234:#,##0}\t1.234 %\tProzent\tMultipliziert den Wert mit 100 und hängt ein Prozentzeichen an\t{0.123:0%}\t12 % ‰\tPromille\tMultipliziert den Wert mit 1000 und zeigt das Promillezeichen an\t{0.123:0‰}\t123‰ 'Text' oder &quot;Text&quot;\tLiteraltext\tFügt wörtlichen Text in die Ausgabe ein (Text in Anführungszeichen bleibt unverändert)\t{1234:# 'Euro'}\t1234 Euro  Hinweis: Die Ausgabe kann je nach Kultur- bzw. Ländereinstellungen variieren (hier orientiert an deutscher Formatierung).    DateTime date = new DateTime(2025, 2, 24, 15, 09, 26); Console.WriteLine($&quot;{date:d}&quot;); // 24.02.2025 Console.WriteLine(date.ToString(&quot;MMMM dd, yyyy&quot;)); // Februar 24, 2025 Console.WriteLine($&quot;{date:dddd}, {date:dd}. {date:MMM} {date:yyyy}&quot;); // Montag, 24. Feb 2025   ","version":"Next","tagName":"h2"},{"title":"Standard DateTime Formats​","type":1,"pageTitle":"Format Specifiers","url":"/my-documentation/docs/Csharp/Strings/Format-Specifiers#standard-datetime-formats","content":" Char\tName\tKurze Beschreibung\tUsage\tAusgabed\tShort Date\tKurzformat, nur Datum\t{date:d}\t25.02.2025 D\tLong Date\tLanges Datumsformat\t{date:D}\tDienstag, 25. Februar 2025 t\tShort Time\tKurze Zeitangabe\t{date:t}\t15:09 T\tLong Time\tLange Zeitangabe\t{date:T}\t15:09:26 f\tFull (Short Time)\tLanges Datum, kurze Zeit\t{date:f}\tDienstag, 25. Februar 2025 15:09 F\tFull (Long Time)\tLanges Datum, lange Zeit\t{date:F}\tDienstag, 25. Februar 2025 15:09:26 g\tGeneral (Short)\tKompakte Darstellung (Datum + kurze Zeit)\t{date:g}\t25.02.2025 15:09 G\tGeneral (Long)\tKompakte Darstellung (Datum + lange Zeit)\t{date:G}\t25.02.2025 15:09:26 M / m\tMonth Day\tZeigt Monat und Tag an\t{date:M}\t25. Februar O / o\tRound-trip\tISO 8601 Format, exakte Rundtrip-Darstellung\t{date:O}\t2025-02-25T15:09:26.0000000    ","version":"Next","tagName":"h2"},{"title":"Custom DateTime Formats​","type":1,"pageTitle":"Format Specifiers","url":"/my-documentation/docs/Csharp/Strings/Format-Specifiers#custom-datetime-formats","content":" Char\tName\tKurze Beschreibung\tUsage\tAusgabeyyyy\tJahr (4-stellig)\tVierstellige Jahreszahl\t{date:yyyy}\t2025 yy\tJahr (2-stellig)\tZweistellige Jahreszahl\t{date:yy}\t25 MM\tMonat (2-stellig)\tMonat als Zahl, zweistellig\t{date:MM}\t02 MMM\tMonat (abgekürzt)\tAbgekürzter Monatsname\t{date:MMM}\tFeb MMMM\tMonat (voll)\tVoll ausgeschriebener Monatsname\t{date:MMMM}\tFebruar dd\tTag (2-stellig)\tTag des Monats, zweistellig\t{date:dd}\t25 ddd\tWochentag (abgekürzt)\tAbgekürzter Wochentag\t{date:ddd}\tDi dddd\tWochentag (voll)\tVoll ausgeschriebener Wochentag\t{date:dddd}\tDienstag HH\tStunde (24h)\tStunden im 24-Stunden-Format\t{date:HH}\t15 hh\tStunde (12h)\tStunden im 12-Stunden-Format\t{date:hh}\t03 mm\tMinuten\tMinuten, zweistellig\t{date:mm}\t09 ss\tSekunden\tSekunden, zweistellig\t{date:ss}\t26 tt\tAM/PM Designator\tAM/PM Kennzeichnung (je nach Kultur z. B. &quot;nachm.&quot;)\t{date:tt}\tnachm.  Hinweis: Die tatsächliche Ausgabe kann je nach Kultur- bzw. Ländereinstellungen variieren. ","version":"Next","tagName":"h2"},{"title":"Entity Relationship Model","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/Grundlagen/Entity-Relationship-Model","content":"","keywords":"","version":"Next"},{"title":"Entität​","type":1,"pageTitle":"Entity Relationship Model","url":"/my-documentation/docs/DB/Grundlagen/Entity-Relationship-Model#entität","content":" Eine Entität repräsentiert ein reales Objekt oder Konzept, das in der Datenbank modelliert werden soll.Beispiel: Ein Kunde, ein Produkt, ein Kurs.Entitätstyp: Eine Klasse oder Kategorie von Entitäten (z. B. „Kunde“ oder „Produkt“).Zwischen zwei Entitätstypen kann es auch mehr als eine Beziehung gebenRekursive Beziehungen sind ebenso möglich (Entitätstyp hat Beziehung mit sich selbst)Entitätsinstanz: Ein konkretes Objekt innerhalb eines Entitätstyps (z. B. „Kunde 123“).  ","version":"Next","tagName":"h3"},{"title":"Attribut​","type":1,"pageTitle":"Entity Relationship Model","url":"/my-documentation/docs/DB/Grundlagen/Entity-Relationship-Model#attribut","content":" Ein Attribut beschreibt eine Eigenschaft oder ein Merkmal einer Entität.Beispiel: Ein „Kunde“ hat die Attribute „Name“, „Adresse“, „Telefonnummer“.Schlüsselattribut: Eindeutiges Attribut, das jede Entität unterscheidet (zb Kundennummer)Attribute können auch an den Beziehungstypen hängen (häufig bei N:M Beziehungen)  ","version":"Next","tagName":"h3"},{"title":"Relation​","type":1,"pageTitle":"Entity Relationship Model","url":"/my-documentation/docs/DB/Grundlagen/Entity-Relationship-Model#relation","content":" Eine Beziehung verbindet zwei oder mehr Entitäten miteinander&quot;Hat&quot; funktioniert für die meisten Beziehungen als Beziehungstyp  ","version":"Next","tagName":"h3"},{"title":"Kardinalität​","type":1,"pageTitle":"Entity Relationship Model","url":"/my-documentation/docs/DB/Grundlagen/Entity-Relationship-Model#kardinalität","content":" Kardinalitäten beschreiben, wie viele Entitäten eines Entitätstypen mit wie vielen Entitäten eines anderen Entitätstypen in einer Beziehung miteinander verbunden sein können.  1:1 (Eins zu Eins)1:N (Eins zu Viele)M:N (Viele zu Viele)  Modifizierte Chen Notation:  1: genau 1c: 0 oder 1m: mindestens 1mc: beliebig viele  ","version":"Next","tagName":"h3"},{"title":"Martin-/Crow's-Foot-Notation​","type":1,"pageTitle":"Entity Relationship Model","url":"/my-documentation/docs/DB/Grundlagen/Entity-Relationship-Model#martin-crows-foot-notation","content":"   ","version":"Next","tagName":"h3"},{"title":"ER-Diagramme​","type":1,"pageTitle":"Entity Relationship Model","url":"/my-documentation/docs/DB/Grundlagen/Entity-Relationship-Model#er-diagramme","content":" Rechtecke: EntitätenEllipsen: AttributeRauten: BeziehungenLinien: Verknüpfen Entitäten und Beziehungen    ","version":"Next","tagName":"h3"},{"title":"Links​","type":1,"pageTitle":"Entity Relationship Model","url":"/my-documentation/docs/DB/Grundlagen/Entity-Relationship-Model#links","content":" Wikipedia - Entity-relationsship model ","version":"Next","tagName":"h3"},{"title":"Arrays","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Collections/Arrays","content":"","keywords":"","version":"Next"},{"title":"Jagged Array Deklaration​","type":1,"pageTitle":"Arrays","url":"/my-documentation/docs/Csharp/Collections/Arrays#jagged-array-deklaration","content":" int[][] anotherJaggedArray = new int[][] { new int[] {1,8,2,7,9}, new int[] {2,4,6}, new int[] {33,42} }; int x = anotherJaggedArray[2][1]; Console.WriteLine(x); // Outputs =&gt; 42     ","version":"Next","tagName":"h2"},{"title":"LINQ Array Methods​","type":1,"pageTitle":"Arrays","url":"/my-documentation/docs/Csharp/Collections/Arrays#linq-array-methods","content":" The Array class implements the IEnumerable interface, so you can LINQ extension methods such as Max(), Min(), Sum(), Average() and many others.  public static void Main(string[] args) { int[] integersArray = new int[5]{80, 20, 35, 18, 9}; Console.WriteLine(integersArray.Max()); Console.WriteLine(integersArray.Min()); Console.WriteLine(integersArray.Sum()); Console.WriteLine(integersArray.Average()); }     ","version":"Next","tagName":"h2"},{"title":"Sort, Reverse or Search (with ForEach())​","type":1,"pageTitle":"Arrays","url":"/my-documentation/docs/Csharp/Collections/Arrays#sort-reverse-or-search-with-foreach","content":" int[] integersArray = {20, 9, 16, 50, 3}; // SORT Array.Sort(integersArray); Array.ForEach&lt;int&gt;(integersArray, n =&gt; Console.WriteLine(n)); // REVERSE Array.Reverse(integersArray); Array.ForEach&lt;int&gt;(integersArray, n =&gt; Console.WriteLine(n)); // SEARCH Console.WriteLine(Array.BinarySearch(integersArray, 9));     ","version":"Next","tagName":"h2"},{"title":"Slicing eines Arrays​","type":1,"pageTitle":"Arrays","url":"/my-documentation/docs/Csharp/Collections/Arrays#slicing-eines-arrays","content":" Index: Mit ^ kannst Du vom Ende her indexieren (z. B. ^1 für das letzte Element).Range: Mit .. definierst Du einen Bereich. Dabei ist das Ende exklusiv.  int[] zahlen = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }; // Teilausschnitt von Index 2 bis 4 (5 ist exklusive) int[] slice1 = zahlen[2..5]; // Enthält {2, 3, 4} // Teilausschnitt vom Index 5 bis zum Ende int[] slice2 = zahlen[5..]; // Enthält {5, 6, 7, 8, 9} // Letztes Element des Arrays int letztesElement = zahlen[^1]; // ^1 bedeutet &quot;1. von hinten&quot;, also 9 // Teilausschnitt der letzten 3 Elemente int[] slice3 = zahlen[^3..]; // Enthält {7, 8, 9}     ","version":"Next","tagName":"h2"},{"title":"Duplikate entfernen​","type":1,"pageTitle":"Arrays","url":"/my-documentation/docs/Csharp/Collections/Arrays#duplikate-entfernen","content":" Console.Write(&quot;Wörter eingeben: &quot;); string[] text = Console.ReadLine().Split(&quot; &quot;); string[] textOhneDuplikate = text.Distinct().ToArray();     ","version":"Next","tagName":"h2"},{"title":"Vorkommen zählen​","type":1,"pageTitle":"Arrays","url":"/my-documentation/docs/Csharp/Collections/Arrays#vorkommen-zählen","content":" static int CountOccurrences(int[,] array, int target) { int count = 0; foreach (int value in array) { if (value == target) count++; } return count; }     ","version":"Next","tagName":"h2"},{"title":"Print 2D Array to console​","type":1,"pageTitle":"Arrays","url":"/my-documentation/docs/Csharp/Collections/Arrays#print-2d-array-to-console","content":" static void PrintArray(int[,] array) { for (int i = 0; i &lt; array.GetLength(0); i++) { for (int j = 0; j &lt; array.GetLength(1); j++) Console.Write($&quot;{array[i, j]} &quot;); Console.WriteLine(); } }     ","version":"Next","tagName":"h2"},{"title":"Fill 2D Array with Random Numbers​","type":1,"pageTitle":"Arrays","url":"/my-documentation/docs/Csharp/Collections/Arrays#fill-2d-array-with-random-numbers","content":" static void FillArray(int[,] array, int rows, int cols) { Random rnd = new Random(); for (int i = 0; i &lt; rows; i++) for (int j = 0; j &lt; cols; j++) array[i, j] = rnd.Next(1, 10); }     ","version":"Next","tagName":"h2"},{"title":"Merge Arrays​","type":1,"pageTitle":"Arrays","url":"/my-documentation/docs/Csharp/Collections/Arrays#merge-arrays","content":" // Array copy: copies a range from a source array to a destination array with // optional start and end indices static int[] MergeArray(int[] array1, int[] array2) { int[] arrayMerged = new int[array1.Length + array2.Length]; Array.Copy(array1, arrayMerged, array1.Length); Array.Copy(array2, 0, arrayMerged, array1.Length, array2.Length); Array.Sort(arrayMerged); return arrayMerged; }   // lange variante ohne Array.Copy // Arrays müssen vorsortiert sein static int[] MergeArray(int[] array1, int[] array2) { int[] arrayMerged = new int[array1.Length + array2.Length]; int indexMerged = 0; int indexArray1 = 0; int indexArray2 = 0; while (indexArray1 &lt; array1.Length &amp;&amp; indexArray2 &lt; array2.Length) // solange keines der beiden arrays komplett durchlaufen wurde { if (array1[indexArray1] &lt; array2[indexArray2]) arrayMerged[indexMerged++] = array1[indexArray1++]; else arrayMerged[indexMerged++] = array2[indexArray2++]; } // schreibe das array dessen index nicht bis zum ende durchlaufen wurde while (indexArray1 &lt; array1.Length) arrayMerged[indexMerged++] = array1[indexArray1++]; while (indexArray2 &lt; array2.Length) arrayMerged[indexMerged++] = array2[indexArray2++]; return arrayMerged; }   ","version":"Next","tagName":"h2"},{"title":"Related Links​","type":1,"pageTitle":"Arrays","url":"/my-documentation/docs/Csharp/Collections/Arrays#related-links","content":" Microsoft Docs - Array Class ","version":"Next","tagName":"h2"},{"title":"Math","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Utility/Math","content":"","keywords":"","version":"Next"},{"title":"Quersumme​","type":1,"pageTitle":"Math","url":"/my-documentation/docs/Csharp/Utility/Math#quersumme","content":" static int Checksum(int num) { int sum = 0; while (num &gt; 0) { sum += num % 10; num /= 10; } return sum; }     ","version":"Next","tagName":"h3"},{"title":"GGT​","type":1,"pageTitle":"Math","url":"/my-documentation/docs/Csharp/Utility/Math#ggt","content":" static int GetGreatestCommonDivisor(int a, int b) { if (b == 0) return a; else return GetGreatestCommonDivisor(b, a % b); }     ","version":"Next","tagName":"h3"},{"title":"Gaußsche Summenformel​","type":1,"pageTitle":"Math","url":"/my-documentation/docs/Csharp/Utility/Math#gaußsche-summenformel","content":" static int GaussianSum(int n) { result = (n * (n + 1)) / 2; }     ","version":"Next","tagName":"h3"},{"title":"Fibonacci Zahlen​","type":1,"pageTitle":"Math","url":"/my-documentation/docs/Csharp/Utility/Math#fibonacci-zahlen","content":" static int Fibonacci(int n) { if (n &lt;= 0) return 0; else if (n == 1) return 1; else return Fibonacci(n - 1) + Fibonacci(n - 2); }     ","version":"Next","tagName":"h3"},{"title":"Faktorial-Berechnung​","type":1,"pageTitle":"Math","url":"/my-documentation/docs/Csharp/Utility/Math#faktorial-berechnung","content":" static int Factorial(int n): if (n == 0) return 0; elif (n == 1) return 1; else return n * Factorial(n - 1);     ","version":"Next","tagName":"h3"},{"title":"Primzahl bestimmen​","type":1,"pageTitle":"Math","url":"/my-documentation/docs/Csharp/Utility/Math#primzahl-bestimmen","content":" static bool IsPrime(int number) { if (number &lt; 2) return false; if (number == 2 || number == 3) return true; if (number % 2 == 0 || number % 3 == 0) return false; for (int i = 5; i * i &lt;= number; i += 6) { if (number % i == 0 || number % (i + 2) == 0) return false; } return true; }  ","version":"Next","tagName":"h3"},{"title":"Relationale Datenbanken","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/Grundlagen/Relationale-Datenbanken","content":"","keywords":"","version":"Next"},{"title":"Drei-Schema-Architektur​","type":1,"pageTitle":"Relationale Datenbanken","url":"/my-documentation/docs/DB/Grundlagen/Relationale-Datenbanken#drei-schema-architektur","content":" Logisches Schema beschreibt Daten in der Sprache eines konkreten DBMSleitet sich von einem konzeptionellem Schema abm:n Beziehungen müssen aufgelöst werden Internes / Physikalisches Schema beschreibt Daten aus technischer Sicht des Systemsabgeleitet aus logischem SchemaSpeichermethoden, Hilfskonstrukte zur Effizienzsteigerung Externes Schema beschreibt Daten aus der Sicht des AnwendersEinschränkung der Sichtbarkeit, Zugriffsrechtemehrere externe Schemata für eine Datenbank möglich ","version":"Next","tagName":"h3"},{"title":"Operatoren","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Basics/Operatoren","content":"","keywords":"","version":"Next"},{"title":"Arithmetic Operators​","type":1,"pageTitle":"Operatoren","url":"/my-documentation/docs/Csharp/Basics/Operatoren#arithmetic-operators","content":" float myFloat = 0; myFloat = 3 + 2; // Addition =&gt; 5 myFloat = 3 - 2; // Subtraction =&gt; 1 myFloat = 3 * 2; // Multiplication =&gt; 6 myFloat = 3 / 2; // Division =&gt; 1 myFloat = 3 % 2; // Modulus =&gt; 1 /* Notice that the division sign gives an incorrect result. This is because it operates on two integer values and will therefore round the result and return an integer. To get the correct value, one of the numbers needs to be converted into a floating-point number. */ myFloat = 3 / (float) 2; // 1.5     ","version":"Next","tagName":"h2"},{"title":"Combined Assignment Operators​","type":1,"pageTitle":"Operatoren","url":"/my-documentation/docs/Csharp/Basics/Operatoren#combined-assignment-operators","content":" float myFloat = 0; myFloat += 2; // myNumber = myNumber + 2 myFloat -= 2; // myNumber = myNumber - 2 myFloat *= 2; // myNumber = myNumber * 2 myFloat /= 2; // myNumber = myNumber / 2 myFloat %= 2; // myNumber = myNumber % 2     ","version":"Next","tagName":"h2"},{"title":"Comparison Operators​","type":1,"pageTitle":"Operatoren","url":"/my-documentation/docs/Csharp/Basics/Operatoren#comparison-operators","content":" Console.WriteLine($&quot;3 == 2? {3 == 2}&quot;); // =&gt; false Console.WriteLine($&quot;3 != 2? {3 != 2}&quot;); // =&gt; true Console.WriteLine($&quot;3 &gt; 2? {3 &gt; 2}&quot;); // =&gt; true Console.WriteLine($&quot;3 &lt; 2? {3 &lt; 2}&quot;); // =&gt; false Console.WriteLine($&quot;2 &lt;= 2? {2 &lt;= 2}&quot;); // =&gt; true Console.WriteLine($&quot;2 &gt;= 2? {2 &gt;= 2}&quot;); // =&gt; true     ","version":"Next","tagName":"h2"},{"title":"Logical Operators​","type":1,"pageTitle":"Operatoren","url":"/my-documentation/docs/Csharp/Basics/Operatoren#logical-operators","content":" bool myBool; myBool = (true &amp;&amp; false); // Logical AND =&gt; (false) myBool = (true || false); // Logical OR =&gt; (true) myBool = !(true); // Logical NOT =&gt; (false) Console.WriteLine(myBool);     ","version":"Next","tagName":"h2"},{"title":"Bitwise Operators​","type":1,"pageTitle":"Operatoren","url":"/my-documentation/docs/Csharp/Basics/Operatoren#bitwise-operators","content":" int myInteger; // The bitwise operators can manipulate individual bits inside an integer. myInteger = 5 &amp; 4; // and (0b101 &amp; 0b100 = 0b100 = 4) myInteger = 5 | 4; // or (0b101 | 0b100 = 0b101 = 5) myInteger = 5 ^ 4; // xor (0b101 ^ 0b100 = 0b001 = 1) myInteger = 4 &lt;&lt; 1; // left shift (0b100 &lt;&lt; 1 = 0b1000 = 8) myInteger = 4 &gt;&gt; 1; // right shift (0b100 &gt;&gt; 1 = 0b10 = 2) myInteger = ~ 4; // invert (~0b00000100 = 0b11111011 = -5) // These bitwise operators have shorthand assignment operators, just like the arithmetic operators. myInteger = 5; myInteger &amp;= 4; // and (0b101 &amp; 0b100 = 0b100 = 4) myInteger = 5; myInteger |= 4; // or (0b101 | 0b100 = 0b101 = 5) myInteger = 5; myInteger ^= 4; // xor (0b101 ^ 0b100 = 0b001 = 1) myInteger = 5; myInteger &lt;&lt;= 1; // left shift (0b101 &lt;&lt; 1 = 0b1010 = 10) myInteger = 5; myInteger &gt;&gt;= 1; // right shift (0b101 &gt;&gt; 1 = 0b10 = 2)     ","version":"Next","tagName":"h2"},{"title":"Operator Precedents​","type":1,"pageTitle":"Operatoren","url":"/my-documentation/docs/Csharp/Basics/Operatoren#operator-precedents","content":" /* - parentheses () - Postfix Increment and Decrement ++, -- - Prefix Increment, Decrement and Unary ++, --, +, -, !, ~ - Multiplicative *, /, % - Additive +, - - Shift &lt;&lt;, &gt;&gt; - Relational &lt;, &lt;=, &gt;, &gt;= - Equality ==, != - Bitwise AND &amp; - Bitwise XOR ^ - Bitwise OR | - Logical AND &amp;&amp; - Logical OR || - Ternary ? : - Assignment =, +=, -=, *=, /=, %=, &amp;=, |=, ^=, &lt;&lt;=, &gt;&gt;= */   ","version":"Next","tagName":"h2"},{"title":"Related Links​","type":1,"pageTitle":"Operatoren","url":"/my-documentation/docs/Csharp/Basics/Operatoren#related-links","content":" Microsoft Language Specification - Operators and Expressions ","version":"Next","tagName":"h2"},{"title":"Enums","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Basics/Enum","content":"","keywords":"","version":"Next"},{"title":"Enum.GetName()​","type":1,"pageTitle":"Enums","url":"/my-documentation/docs/Csharp/Basics/Enum#enumgetname","content":" public enum Color { RED = 1, GREEN = 2, BLUE = 3 } string name = Enum.GetName(typeof(Color), 2); Console.WriteLine(name); // Ausgabe: GREEN     ","version":"Next","tagName":"h2"},{"title":"Cast zu numerischen Typen​","type":1,"pageTitle":"Enums","url":"/my-documentation/docs/Csharp/Basics/Enum#cast-zu-numerischen-typen","content":" In C# sind Enums im Grunde genommen benannte numerische Konstanten.  enum Wochentage { Montag, Dienstag, Mittwoch, Donnerstag, Freitag, Samstag, Sonntag } Wochentage heute = Wochentage.Dienstag; int tagesnummer = (int)heute; // tagesnummer ist 1     ","version":"Next","tagName":"h2"},{"title":"Numerische Typen zu Enums​","type":1,"pageTitle":"Enums","url":"/my-documentation/docs/Csharp/Basics/Enum#numerische-typen-zu-enums","content":" Wochentage tag = (Wochentage)2; // tag ist Wochentage.Mittwoch     ","version":"Next","tagName":"h2"},{"title":"Enum.Parse​","type":1,"pageTitle":"Enums","url":"/my-documentation/docs/Csharp/Basics/Enum#enumparse","content":" C# bietet die Enum.Parse()- und Enum.TryParse()-Methoden, um Strings in Enum-Werte zu konvertieren.  Wochentage tag = (Wochentage)Enum.Parse(typeof(Wochentage), &quot;Freitag&quot;);     ","version":"Next","tagName":"h2"},{"title":"Iterieren über ein enum​","type":1,"pageTitle":"Enums","url":"/my-documentation/docs/Csharp/Basics/Enum#iterieren-über-ein-enum","content":" Die Enum.GetValues()-Methode gibt ein Array mit den Werten der konstanten Elemente eines angegebenen Enumerationstyps zurück.  enum Wochentage { Montag, Dienstag, Mittwoch, Donnerstag, Freitag, Samstag, Sonntag } Array wochentage = Enum.GetValues(typeof(Wochentage)); foreach (Wochentage tag in wochentage) { Console.WriteLine(tag); }     ","version":"Next","tagName":"h2"},{"title":"Enum mit Extensionklasse​","type":1,"pageTitle":"Enums","url":"/my-documentation/docs/Csharp/Basics/Enum#enum-mit-extensionklasse","content":" public enum Color { Red, Green, Blue } public static class ColorExtensions { public static string Description(this Color color) { switch (color) { case Color.Red: return &quot;This is red&quot;; case Color.Green: return &quot;This is green&quot;; case Color.Blue: return &quot;This is blue&quot;; default: return &quot;Unknown color&quot;; } } } // Verwendung: Color myColor = Color.Green; string description = myColor.Description(); Console.WriteLine(description); // Ausgabe: This is green     ","version":"Next","tagName":"h2"},{"title":"Enum mit switch case​","type":1,"pageTitle":"Enums","url":"/my-documentation/docs/Csharp/Basics/Enum#enum-mit-switch-case","content":" enum MenuOptionen { NeueDatei, DateiÖffnen, DateiSpeichern, Beenden } static void Main() { switch (GetMenuChoice()) { case MenuOptionen.NeueDatei: Console.WriteLine(&quot;Neue Datei wird erstellt...&quot;); break; case MenuOptionen.DateiÖffnen: Console.WriteLine(&quot;Datei wird geöffnet...&quot;); break; case MenuOptionen.DateiSpeichern: Console.WriteLine(&quot;Datei wird gespeichert...&quot;); break; case MenuOptionen.Beenden: Console.WriteLine(&quot;Anwendung wird beendet...&quot;); Environment.Exit(0); break; default: Console.WriteLine(&quot;Ungültige Option.&quot;); break; } } static MenuOptionen GetMenuChoice() { Console.WriteLine(&quot;Bitte wählen Sie eine Option:&quot;); Console.WriteLine(&quot;1. Neue Datei&quot;); Console.WriteLine(&quot;2. Datei öffnen&quot;); Console.WriteLine(&quot;3. Datei speichern&quot;); Console.WriteLine(&quot;4. Beenden&quot;); int choice; while (!int.TryParse(Console.ReadLine(), out choice)) Console.WriteLine(&quot;Ungültige Eingabe.&quot;); return (MenuOptionen)(choice - 1); }     public enum VerbindungsStatus { Getrennt, Verbindet, Verbunden, Fehler } public void VerbindungsStatusVerarbeiten(VerbindungsStatus status) { switch (status) { case VerbindungsStatus.Getrennt: // Logik zum Herstellen einer Verbindung break; case VerbindungsStatus.Verbindet: // Logik, während der Verbindungsvorgang läuft break; case VerbindungsStatus.Verbunden: // Logik für eine aktive Verbindung break; case VerbindungsStatus.Fehler: // Fehlerbehandlungslogik break; default: break; } }     public enum BenutzerRolle { Administrator, Moderator, Benutzer, Gast } public bool HatZugriff(BenutzerRolle rolle, string ressource) { switch (rolle) { case BenutzerRolle.Administrator: return true; case BenutzerRolle.Moderator: return ressource != &quot;Admin-Bereich&quot;; case BenutzerRolle.Benutzer: return ressource == &quot;Benutzer-Bereich&quot;; case BenutzerRolle.Gast: return false; default: return false; } }   ","version":"Next","tagName":"h2"},{"title":"Related Links​","type":1,"pageTitle":"Enums","url":"/my-documentation/docs/Csharp/Basics/Enum#related-links","content":" Microsoft Docs - Enumeration Types ","version":"Next","tagName":"h2"},{"title":"String Formatting","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Strings/String-Formatting","content":"","keywords":"","version":"Next"},{"title":"String.Format​","type":1,"pageTitle":"String Formatting","url":"/my-documentation/docs/Csharp/Strings/String-Formatting#stringformat","content":" // {index der variablen die eingesetzt wird:FORMAT} // C - Currency; U - Universal full date/time String.Format(&quot;{index[,alignment][:formatString]}&quot;, object); string formatted = string.Format(&quot;{0:C} {1:U}&quot;, 150, thisDate); Console.WriteLine(formatted); // Ausgabe: 150,00 € Samstag, 8. Februar 2025 18:25:11 string fooFs = string.Format(&quot;Check Check, {0} {1}, {0} {1:0.0}&quot;, &quot;AB&quot;, 23); Console.WriteLine(fooFs) // Ausgabe: Check Check, AB 23, AB 23,0     ","version":"Next","tagName":"h2"},{"title":"Interpolated String Formatting​","type":1,"pageTitle":"String Formatting","url":"/my-documentation/docs/Csharp/Strings/String-Formatting#interpolated-string-formatting","content":" var DateTime thisDate = DateTime.Now; Console.WriteLine(&quot;{0:C} {1:U}&quot;, 150, thisDate);     ","version":"Next","tagName":"h2"},{"title":"StringBuilder.AppendFormat()​","type":1,"pageTitle":"String Formatting","url":"/my-documentation/docs/Csharp/Strings/String-Formatting#stringbuilderappendformat","content":" using System.Text; decimal num = 34.53567325m; var builder = new StringBuilder(); builder.AppendFormat(&quot;Format Decimal: {0:n2}&quot;, num);     ","version":"Next","tagName":"h2"},{"title":"String Interpolation​","type":1,"pageTitle":"String Formatting","url":"/my-documentation/docs/Csharp/Strings/String-Formatting#string-interpolation","content":" var DateTime thisDate = DateTime.Now; Console.WriteLine($&quot;{150:C} {thisDate:U}&quot;);     ","version":"Next","tagName":"h2"},{"title":"Format a Table structure​","type":1,"pageTitle":"String Formatting","url":"/my-documentation/docs/Csharp/Strings/String-Formatting#format-a-table-structure","content":" string headers = $&quot;{&quot;First Name&quot;, -20}{&quot;Last Name&quot;, -20}{&quot;Value&quot;, -20}{&quot;Time&quot;, -20}&quot;; string line\t= $&quot;{&quot;Luiz&quot;, -20}{&quot;Parente&quot;, -20}{20, -20:C}{DateTime.Now, -20:d}&quot;; Console.WriteLine(headers); Console.WriteLine(line); /* This code example produces the following results: First Name Last Name Value Time Luiz Parente $20.00 2/9/2020 */   ","version":"Next","tagName":"h2"},{"title":"Related Links​","type":1,"pageTitle":"String Formatting","url":"/my-documentation/docs/Csharp/Strings/String-Formatting#related-links","content":" String Formatting CheatSheet (Github) C# String Format Examples ","version":"Next","tagName":"h2"},{"title":"CSV Files","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/IO-Operations/CSV-Files","content":"","keywords":"","version":"Next"},{"title":"CSV File to Dictionary​","type":1,"pageTitle":"CSV Files","url":"/my-documentation/docs/Csharp/IO-Operations/CSV-Files#csv-file-to-dictionary","content":" static List&lt;Dictionary&lt;string, string&gt;&gt; ReadCsvFile(string filePath) { var records = new List&lt;Dictionary&lt;string, string&gt;&gt;(); try { using (var reader = new StreamReader(filePath)) { // Read the header line string headerLine = reader.ReadLine(); if (headerLine == null) return records; var headers = headerLine.Split(','); // Read the remaining lines while (!reader.EndOfStream) { var line = reader.ReadLine(); if (line == null) continue; var values = line.Split(','); var record = new Dictionary&lt;string, string&gt;(); // Map each header to its corresponding value for (int i = 0; i &lt; headers.Length &amp;&amp; i &lt; values.Length; i++) { record[headers[i]] = values[i]; } records.Add(record); } } } catch (Exception ex) { Console.WriteLine(&quot;Error reading CSV file: &quot; + ex.Message); } return records; } static void Main() { string filePath = &quot;data.csv&quot;; var records = ReadCsvFile(filePath); // Output the read records foreach (var record in records) { foreach (var kvp in record) { Console.Write($&quot;{kvp.Key}: {kvp.Value} &quot;); } Console.WriteLine(); } }     ","version":"Next","tagName":"h2"},{"title":"Append to CSV File​","type":1,"pageTitle":"CSV Files","url":"/my-documentation/docs/Csharp/IO-Operations/CSV-Files#append-to-csv-file","content":" static void AppendCsvRow(string filePath, Dictionary&lt;string, string&gt; record, List&lt;string&gt; fieldOrder) { try { // Öffne die Datei im Append-Modus using (var writer = new StreamWriter(filePath, append: true)) { // Erzeuge eine CSV-Zeile in der definierten Reihenfolge string line = string.Join(&quot;,&quot;, fieldOrder.Select(field =&gt; record.ContainsKey(field) ? record[field] : &quot;&quot;)); writer.WriteLine(line); } } catch (Exception ex) { Console.WriteLine(&quot;Fehler beim Schreiben in die CSV-Datei: &quot; + ex.Message); } } static void Main() { string filePath = &quot;data.csv&quot;; var newRecord = new Dictionary&lt;string, string&gt;() { {&quot;Name&quot;, &quot;John Doe&quot;}, {&quot;Alter&quot;, &quot;30&quot;}, {&quot;Stadt&quot;, &quot;Berlin&quot;} }; // Definiere die Reihenfolge der Felder wie in der CSV-Header-Zeile List&lt;string&gt; fieldOrder = new List&lt;string&gt; { &quot;Name&quot;, &quot;Alter&quot;, &quot;Stadt&quot; }; AppendCsvRow(filePath, newRecord, fieldOrder); Console.WriteLine(&quot;Neuer Datensatz wurde hinzugefügt.&quot;); }   ","version":"Next","tagName":"h2"},{"title":"Related Links​","type":1,"pageTitle":"CSV Files","url":"/my-documentation/docs/Csharp/IO-Operations/CSV-Files#related-links","content":"","version":"Next","tagName":"h2"},{"title":"WHERE Klause II","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/ProjectDB/projektdb01-where-klausel2","content":"WHERE Klause II -- Nutzen Sie die Datenbank ProjektDB, -- um die folgenden Aufgaben zu lösen: -- ===== -- WHERE -- ===== -- Aufgabe 1.8 -- -- Finden Sie alle Mitarbeiter, deren Personalnummer -- entweder 29346, 28559 oder 25348 ist. -- -- id nachname vorname abt_id stadt -- 25348 Keller Hans a3 München -- 28559 Mozer Sibille a1 Ulm -- 29346 Probst Andreas a2 Augsburg SELECT * FROM Mitarbeiter SELECT * FROM Mitarbeiter WHERE id = 29346 OR id = 28559 OR id = 25348 -- Aufgabe 1.9 -- -- Nennen Sie alle Mitarbeiter, deren Wohnort -- weder München noch Ulm ist. -- -- id nachname vorname abt_id stadt -- 5765 Schäfer Sabine a3 Landshut -- 9912 Wolf Klaus a4 Heidenheim -- 10102 Huber Petra a3 Landshut -- 18316 Müller Gabriele a1 Rosenheim -- 20204 Fuchs Dirk a4 Fürth -- 29346 Probst Andreas a2 Augsburg SELECT * FROM Mitarbeiter WHERE (stadt &lt;&gt; 'München') AND (stadt &lt;&gt; 'Ulm'); -- Aufgabe 1.10 -- -- Nennen Sie Namen und Mittel aller Projekte, deren -- finanzielle Mittel zwischen 95.000 und 120.000 EURO liegen. -- -- bezeichnung mittel -- Apollo 120000,00 -- Gemini 95000,00 SELECT bezeichnung, mittel FROM Projekt WHERE mittel BETWEEN 95000 AND 120000; -- Aufgabe 1.11 -- -- Nennen Sie die Id der Mitarbeiter, die Projektleiter sind -- und vor oder nach 2018 in ihren Projekten eingestellt wurden. -- -- mit_id -- 2581 -- 22222 SELECT * FROM Arbeit SELECT mit_id FROM Arbeit WHERE aufgabe = 'Projektleiter' AND (einst_dat &lt;= '20171231' OR einst_dat &gt;= '20190101') -- alternative -- WHERE aufgabe = 'Projektleiter' YEAR(einst_dat) &lt;&gt; 2018; -- Aufgabe 1.12 -- -- Finden Sie die Personal- und Projektnummer aller Mitarbeiter, -- die in den Projekten p1 oder p5 arbeiten und deren Aufgabe noch -- nicht festgelegt ist. -- -- mit_id pro_id -- 17000 p1 -- 17000 p5 -- 28559 p1 SELECT mit_id, pro_id FROM Arbeit WHERE (pro_id = 'p1' OR pro_id = 'p5') AND aufgabe IS NULL -- Aufgabe 1.13 -- -- Finden Sie die Id und die Aufgabe aller Mitarbeiter, -- die im Projekt p5 arbeiten, aber nicht Sachbearbeiter sind. -- -- mit_id aufgabe -- 17000 NULL -- 22222 Projektleiter SELECT mit_id, aufgabe FROM Arbeit WHERE (pro_id = 'p5' AND aufgabe &lt;&gt; 'Sachbearbeiter') OR (pro_id = 'p5' AND aufgabe IS NULL); ","keywords":"","version":"Next"},{"title":"DateTime","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Strings/DateTime Struct","content":"","keywords":"","version":"Next"},{"title":"DateTime(year, month, day)​","type":1,"pageTitle":"DateTime","url":"/my-documentation/docs/Csharp/Strings/DateTime Struct#datetimeyear-month-day","content":" DateTime date1 = new DateTime(2025, 12, 25); Console.WriteLine(date1.ToString()); // Ausgabe: 12/25/2025 12:00:00 AM     ","version":"Next","tagName":"h2"},{"title":"DateTime(year, month, day, hour, minute, second)​","type":1,"pageTitle":"DateTime","url":"/my-documentation/docs/Csharp/Strings/DateTime Struct#datetimeyear-month-day-hour-minute-second","content":" DateTime date2 = new DateTime(2022, 12, 25, 10, 30, 50); Console.WriteLine(date1.ToString()); // Ausgabe: 12/25/2022 10:30:00 AM }     ","version":"Next","tagName":"h2"},{"title":"Creating TimeSpan object​","type":1,"pageTitle":"DateTime","url":"/my-documentation/docs/Csharp/Strings/DateTime Struct#creating-timespan-object","content":" var duration = new TimeSpan(30, 0, 0, 0); // one month(as 30 days) DateTime newDate1 = DateTime.Now.Add(duration); Console.WriteLine(newDate1);     ","version":"Next","tagName":"h2"},{"title":"AddYears (Months, Days, Hours, Minutes, Seconds)​","type":1,"pageTitle":"DateTime","url":"/my-documentation/docs/Csharp/Strings/DateTime Struct#addyears-months-days-hours-minutes-seconds","content":" DateTime today = DateTime.Now; DateTime newDate2 = today.AddDays(3); Console.WriteLine(newDate2);     ","version":"Next","tagName":"h2"},{"title":"DateTime Parse​","type":1,"pageTitle":"DateTime","url":"/my-documentation/docs/Csharp/Strings/DateTime Struct#datetime-parse","content":" string dateString = &quot;Wed Dec 30, 2015&quot;; DateTime dateTime12 = DateTime.Parse(dateString); // 12/30/2015 12:00:00 AM     ","version":"Next","tagName":"h2"},{"title":"Date Difference​","type":1,"pageTitle":"DateTime","url":"/my-documentation/docs/Csharp/Strings/DateTime Struct#date-difference","content":" var date1 = new DateTime(2025, 3, 10, 2, 15, 10); var date2 = new DateTime(2025, 7, 15, 6, 30, 20); var date3 = new DateTime(2025, 12, 28, 10, 45, 30); TimeSpan diff1 = date2.Subtract(date1); DateTime date4 = date3.Subtract(diff1); TimeSpan diff2 = date3 - date2; DateTime date5 = date2 - diff1;     ","version":"Next","tagName":"h2"},{"title":"DateTime Properties​","type":1,"pageTitle":"DateTime","url":"/my-documentation/docs/Csharp/Strings/DateTime Struct#datetime-properties","content":" DateTime myDate = new DateTime(2025, 12, 25, 10, 30, 45); int year = myDate.Year; // 2015 int month = myDate.Month; // 12 int day = myDate.Day; // 25 int hour = myDate.Hour; // 10 int minute = myDate.Minute; // 30 int second = myDate.Second; // 45     ","version":"Next","tagName":"h2"},{"title":"DayOfWeek​","type":1,"pageTitle":"DateTime","url":"/my-documentation/docs/Csharp/Strings/DateTime Struct#dayofweek","content":" It specifies day of the week like Sunday, Monday etc. It is an enum which starts from Sunday to Saturday. If you cast the weekofday value to integer then it starts from Zero (0) for Sunday to Six (6) for Saturday.  DateTime myDate = new DateTime(2025, 12, 25, 10, 30, 45); int weekDay = (int)myDate.DayOfWeek; // 4 (numeric value of weekday) string weekDay2 = myDate.DayOfWeek.ToString(); // name of day (Thursday) DateTime dt = new DateTime(2015, 12, 25); bool isEqual = dt.DayOfWeek == DayOfWeek.Thursday); // False bool isEqual = dt.DayOfWeek == DayOfWeek.Friday); // True     ","version":"Next","tagName":"h2"},{"title":"DateTime Formatting​","type":1,"pageTitle":"DateTime","url":"/my-documentation/docs/Csharp/Strings/DateTime Struct#datetime-formatting","content":" DateTime tempDate = new DateTime(2025, 2, 24); Console.WriteLine(tempDate.ToString(&quot;MMMM dd, yyyy&quot;));   Specifier\tDescription\tOutputd\tShort Date\t12/8/2015 D\tLong Date\tTuesday, December 08, 2015 t\tShort Time\t3:15 PM T\tLong Time\t3:15:19 PM f\tFull date and time\tTuesday, December 08, 2015 3:15 PM F\tFull date and time (long)\tTuesday, December 08, 2015 3:15:19 PM g\tDefault date and time\t12/8/2015 15:15 G\tDefault date and time (long)\t12/8/2015 15:15 M\tDay / Month\t8-Dec r\tRFC1123 date\tTue, 08 Dec 2015 15:15:19 GMT s\tSortable date/time\t2015-12-08T15:15:19 u\tUniversal time, local timezone\t2015-12-08 15:15:19Z Y\tMonth / Year\tDecember, 2015 dd\tDay\t8 ddd\tShort Day Name\tTue dddd\tFull Day Name\tTuesday hh\t2 digit hour\t3 HH\t2 digit hour (24 hour)\t15 mm\t2 digit minute\t15 MM\tMonth\t12 MMM\tShort Month name\tDec MMMM\tMonth name\tDecember ss\tseconds\t19 fff\tmilliseconds\t120 FFF\tmilliseconds without trailing zero\t12 tt\tAM/PM\tPM yy\t2 digit year\t15 yyyy\t4 digit year\t2015 :\tHours, minutes, seconds separator, e.g. {0:hh:mm:ss}\t9:08:59 /\tYear, month , day separator, e.g. {0:dd/MM/yyyy}\t8/4/2007    ","version":"Next","tagName":"h2"},{"title":"Get current Time Zone​","type":1,"pageTitle":"DateTime","url":"/my-documentation/docs/Csharp/Strings/DateTime Struct#get-current-time-zone","content":" string current = TimeZone.CurrentTimeZone.StandardName; Console.WriteLine(current);     ","version":"Next","tagName":"h2"},{"title":"Get All Time Zones​","type":1,"pageTitle":"DateTime","url":"/my-documentation/docs/Csharp/Strings/DateTime Struct#get-all-time-zones","content":" foreach (TimeZoneInfo z in TimeZoneInfo.GetSystemTimeZones()) { Console.WriteLine(z.Id); }     ","version":"Next","tagName":"h2"},{"title":"Convert Date to UTC​","type":1,"pageTitle":"DateTime","url":"/my-documentation/docs/Csharp/Strings/DateTime Struct#convert-date-to-utc","content":" //Convert any date from your time-zone to UTC DateTime timeUTC = TimeZone.CurrentTimeZone.ToUniversalTime(DateTime.Now); Console.WriteLine(timeUTC);     ","version":"Next","tagName":"h2"},{"title":"Get Time in specific Time Zone​","type":1,"pageTitle":"DateTime","url":"/my-documentation/docs/Csharp/Strings/DateTime Struct#get-time-in-specific-time-zone","content":" TimeZoneInfo nzTimeZone = TimeZoneInfo.FindSystemTimeZoneById(&quot;New Zealand Standard Time&quot;); DateTime nzTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, nzTimeZone); Console.WriteLine($&quot;Aktuelle Zeit in Neuseeland: {nzTime}&quot;);     ","version":"Next","tagName":"h2"},{"title":"Get Current Culture Name​","type":1,"pageTitle":"DateTime","url":"/my-documentation/docs/Csharp/Strings/DateTime Struct#get-current-culture-name","content":" string currentCulture = Thread.CurrentThread.CurrentCulture.DisplayName;     ","version":"Next","tagName":"h2"},{"title":"Get DateTime based on Culture​","type":1,"pageTitle":"DateTime","url":"/my-documentation/docs/Csharp/Strings/DateTime Struct#get-datetime-based-on-culture","content":" using System.Globalization; DateTime currentTime = DateTime.Now; string dateInUSA = currentTime.ToString(&quot;D&quot;, new CultureInfo(&quot;en-US&quot;)); string dateInHindi = currentTime.ToString(&quot;D&quot;, new CultureInfo(&quot;hi-IN&quot;)); string dateInJapan = currentTime.ToString(&quot;D&quot;, new CultureInfo(&quot;ja-JP&quot;));     ","version":"Next","tagName":"h2"},{"title":"Convert Current DateTime to Different Culture​","type":1,"pageTitle":"DateTime","url":"/my-documentation/docs/Csharp/Strings/DateTime Struct#convert-current-datetime-to-different-culture","content":" DateTime originalResult = new DateTime(2025, 01, 09); string frenchTDate = originalResult.ToString(&quot;D&quot;, new CultureInfo(&quot;fr-FR&quot;));   ","version":"Next","tagName":"h2"},{"title":"Related Links​","type":1,"pageTitle":"DateTime","url":"/my-documentation/docs/Csharp/Strings/DateTime Struct#related-links","content":" DateTime In C# ","version":"Next","tagName":"h2"},{"title":"WHERE Klausel I","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/ProjectDB/projektdb01-where-klausel1","content":"WHERE Klausel I -- Nutzen Sie die Datenbank ProjektDB, -- um die folgenden Aufgaben zu lösen: USE ProjektDB; -- ===== -- WHERE -- ===== -- Aufgabe 1.1 -- -- Finden Sie die Namen und Id aller Abteilungen, -- die in München ihren Sitz haben. -- -- bezeichnung id -- Beratung a1 -- Diagnose a2 -- Einkauf a4 SELECT bezeichnung, id FROM Abteilung WHERE stadt = 'München' OR stadt IS NULL; -- Aufgabe 1.2 -- -- Nennen Sie die Vor- und Nachnamen aller Mitarbeiter, -- deren Personalnummer größer oder gleich 20000 ist. -- -- vorname nachname -- Dirk Fuchs -- Anke Vogel -- Rolf Schubert -- Hans Keller -- Lena Albrecht -- Sibille Mozer -- Andreas Probst SELECT vorname, nachname FROM Mitarbeiter WHERE id &gt;= 20000; -- Aufgabe 1.3 -- -- Finden Sie alle Projekte, deren Finanzmittel mehr als -- 110.803,32 $ betragen. Der fiktive Umrechnungskurs soll -- bei 1.083 $ für 1 Euro liegen. -- -- id bezeichnung mittel kd_id -- p1 Apollo 120000,00 3 -- p3 Merkur 186500,00 1 -- p5 Ariane 165000,00 2 SELECT * FROM Projekt SELECT * FROM Projekt WHERE mittel * 1.083 &gt;= 110803.32; -- Aufgabe 1.4 -- -- Gesucht werden Mitarbeiter-Id, Projektnummer und Aufgabe -- der Mitarbeiter, die im Projekt p2 Sachbearbeiter sind. -- -- mit_id pro_id aufgabe -- 25348 p2 Sachbearbeiter -- 28559 p2 Sachbearbeiter SELECT * FROM Mitarbeiter SELECT * FROM Projekt SELECT * FROM Abteilung SELECT * FROM Arbeit; SELECT mit_id, pro_id, aufgabe FROM Arbeit WHERE aufgabe = 'Sachbearbeiter' -- Aufgabe 1.5 -- -- Finden Sie die Id, den Umsatz und das Datum für alle -- Mitarbeiter, die im Jahr 2018 Umsätze von mindestens -- 5000 € hatten. -- -- mit_id umsatz datum -- 10102 5000,00 2018-11-01 -- 10102 5000,00 2018-12-23 -- 25348 15000,00 2018-05-02 -- 25348 15000,00 2018-10-11 -- 17000 5000,00 2018-03-03 -- 17000 5000,00 2018-03-04 -- 17000 5000,00 2018-03-05 -- 17000 5000,00 2018-03-06 SELECT * FROM Umsatz SELECT mit_id, umsatz, datum FROM Umsatz WHERE umsatz &gt;= 5000 AND (datum BETWEEN '20180101' AND '20181231'); -- Alternative -- WHERE umsatz &gt;= 5000 AND YEAR(datum) = 2018; -- Aufgabe 1.6 -- -- Gesucht wird einmalig die Personalnummer der Mitarbeiter, -- die entweder im Projekt p1 oder p5 oder in beiden arbeiten. -- -- mit_id -- 9031 -- 9912 -- 10102 -- 17000 -- 22222 -- 28559 -- 29346 SELECT DISTINCT mit_id FROM Arbeit WHERE pro_id = 'p1' OR pro_id = 'p5' -- Aufgabe 1.7 -- -- Nennen Sie Personalnummer und Nachnamen der Mitarbeiter, -- die nicht in den Abteilungen a2, a3 und a4 arbeiten. -- -- id nachname -- 17000 Krüger -- 18316 Müller -- 24321 Schubert -- 27365 Albrecht -- 28559 Mozer SELECT id, nachname FROM Mitarbeiter WHERE abt_id NOT IN ('a2', 'a3', 'a4') ","keywords":"","version":"Next"},{"title":"Aggregat-Funktionen I","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/ProjectDB/projektdb04-gruppierungundaggregatfunktionen1","content":"Aggregat-Funktionen I -- Nutzen Sie die Datenbank ProjektDB, -- um die folgenden Aufgaben zu lösen: -- =========== -- Gruppierung -- =========== -- Aufgabe 4.1 -- -- Welche verschiedenen Aufgaben üben die Mitarbeiter -- der Firma aus? Nutzen Sie eine Gruppierung. -- -- aufgabe -- NULL -- Gruppenleiter -- Projektleiter -- Sachbearbeiter SELECT aufgabe FROM Arbeit GROUP BY aufgabe; -- Aufgabe 4.2 -- -- Ändern Sie Ihre Lösung aus 4.1 und verwenden Sie DISTINCT -- in Ihrer Abfrage. Welche Unterschiede sehen Sie? -- -- aufgabe -- NULL -- Gruppenleiter -- Projektleiter -- Sachbearbeiter SELECT DISTINCT aufgabe FROM Arbeit; -- ================== -- Aggregatfunktionen -- ================== -- Aufgabe 4.3 -- -- Nennen Sie die kleinste Personalnummer der Mitarbeiter. -- -- minimum -- 2581 SELECT MIN(mit_id) FROM Arbeit; -- Aufgabe 4.4 -- -- Berechnen Sie die Summe der finanziellen Mittel aller Projekte. -- -- summe -- 655000,00 SELECT SUM(mittel) AS gesamt FROM Projekt; -- Aufgabe 4.5 -- -- Berechnen Sie den arithmetischen Mittelwert der Geldbeträge, -- die höher als 92336,10 Euro sind. -- -- durchschnitt -- 141625,00 SELECT mittel FROM Projekt WHERE mittel &gt; 92000; SELECT AVG(mittel) AS durchschnitt FROM Projekt WHERE mittel &gt; 92336.1; -- Aufgabe 4.6 -- -- Ermitteln Sie den höchsten Umsatz, der an einem Tag erzielt wurde. -- -- umsatz -- 150000,00 SELECT MAX(umsatz) AS maximum FROM Umsatz ","keywords":"","version":"Next"},{"title":"String Operations","type":0,"sectionRef":"#","url":"/my-documentation/docs/Csharp/Strings/String-Operations","content":"","keywords":"","version":"Next"},{"title":"Char from String​","type":1,"pageTitle":"String Operations","url":"/my-documentation/docs/Csharp/Strings/String-Operations#char-from-string","content":" You can access each character of the string with an indexer  char charFromString = fooString[1]; // =&gt; 'e' // Strings are immutable: you can't do fooString[1] = 'X';     ","version":"Next","tagName":"h2"},{"title":"String to Char-Array​","type":1,"pageTitle":"String Operations","url":"/my-documentation/docs/Csharp/Strings/String-Operations#string-to-char-array","content":" string text = &quot;Hallo&quot;; char[] charArray = text.ToCharArray(); // Ausgabe jedes Zeichens foreach (char c in charArray) { Console.WriteLine(c); }     ","version":"Next","tagName":"h2"},{"title":"String to Char-Array mit LINQ​","type":1,"pageTitle":"String Operations","url":"/my-documentation/docs/Csharp/Strings/String-Operations#string-to-char-array-mit-linq","content":" string text = &quot;Hallo&quot;; char[] charArray = text.Select(c =&gt; c).ToArray(); // Alternativ mit LINQ Console.WriteLine(new string(charArray)); // Ausgabe: Hallo     ","version":"Next","tagName":"h2"},{"title":"StringBuilder AppendLine​","type":1,"pageTitle":"String Operations","url":"/my-documentation/docs/Csharp/Strings/String-Operations#stringbuilder-appendline","content":" StringBuilder sb = new StringBuilder(); sb.Append(&quot;Hello &quot;); sb.AppendLine(&quot;World!&quot;); Console.WriteLine(sb); // Ausgabe: Hello World!     ","version":"Next","tagName":"h2"},{"title":"Verbatim String​","type":1,"pageTitle":"String Operations","url":"/my-documentation/docs/Csharp/Strings/String-Operations#verbatim-string","content":" You can use the @ symbol before a string literal to escape all characters in the string  string path = &quot;C:\\\\Users\\\\User\\\\Desktop&quot;; string verbatimPath = @&quot;C:\\Users\\User\\Desktop&quot;; Console.WriteLine(path == verbatimPath); // =&gt; true // You can split a string over two lines with the @ symbol. To escape &quot; use &quot;&quot; string bazString = @&quot;Here's some stuff on a new line! &quot;&quot;Wow!&quot;&quot;, the masses cried&quot;;     ","version":"Next","tagName":"h2"},{"title":"String IndexOf​","type":1,"pageTitle":"String Operations","url":"/my-documentation/docs/Csharp/Strings/String-Operations#string-indexof","content":" string myText = &quot;some text&quot;; Console.WriteLine(myText.IndexOf('t')); // Outputs =&gt; 5     ","version":"Next","tagName":"h2"},{"title":"String Insert​","type":1,"pageTitle":"String Operations","url":"/my-documentation/docs/Csharp/Strings/String-Operations#string-insert","content":" string myText = &quot;some text&quot;; myText = myText.Insert(0, &quot;This is &quot;); Console.WriteLine(myText); // Outputs =&gt; &quot;This is some text&quot;     ","version":"Next","tagName":"h2"},{"title":"String Replace​","type":1,"pageTitle":"String Operations","url":"/my-documentation/docs/Csharp/Strings/String-Operations#string-replace","content":" string myText = &quot;This is some text&quot; myText = myText.Replace(&quot;This is&quot;, &quot;Here is&quot;); Console.WriteLine(myText); // Outputs =&gt; &quot;Here is some text&quot;     ","version":"Next","tagName":"h2"},{"title":"String Contains​","type":1,"pageTitle":"String Operations","url":"/my-documentation/docs/Csharp/Strings/String-Operations#string-contains","content":" string myText = &quot;This is some text&quot; if(myText.Contains(&quot;some&quot;)) Console.WriteLine(&quot;found&quot;); // Outputs &quot;found&quot;     ","version":"Next","tagName":"h2"},{"title":"String Remove​","type":1,"pageTitle":"String Operations","url":"/my-documentation/docs/Csharp/Strings/String-Operations#string-remove","content":" string myText = &quot;This is some text&quot; myText = myText.Remove(4); Console.WriteLine(myText); // Outputs &quot;This&quot;     ","version":"Next","tagName":"h2"},{"title":"String Substring​","type":1,"pageTitle":"String Operations","url":"/my-documentation/docs/Csharp/Strings/String-Operations#string-substring","content":" string myText = &quot;This is some text&quot; myText = myText.Substring(2, 3); Console.WriteLine(myText); // Outputs &quot;is&quot;     ","version":"Next","tagName":"h2"},{"title":"String Slicing​","type":1,"pageTitle":"String Operations","url":"/my-documentation/docs/Csharp/Strings/String-Operations#string-slicing","content":" Index: Mit ^ kannst Du vom Ende her indexieren (z. B. ^1 für das letzte Element).Range: Mit .. definierst Du einen Bereich. Dabei ist das Ende exklusiv.  string text = &quot;Hallo Welt&quot;; // Teilausschnitt ab Index 6 bis zum Ende string teilText1 = text[6..]; // &quot;Welt&quot; // Teilausschnitt von Index 0 bis 5 string teilText2 = text[..5]; // &quot;Hallo&quot;   ","version":"Next","tagName":"h2"},{"title":"Quick-Reference: String Methoden​","type":1,"pageTitle":"String Operations","url":"/my-documentation/docs/Csharp/Strings/String-Operations#quick-reference-string-methoden","content":" Method\tCode\tCommentsClone()\tfirstName.Clone()\tMake clone of string CompareTo()\tfirstName.CompareTo(lastname)\tCompare two strings and returns integer value as output. It returns 0 for true and 1 for false Contains\tfirstName.Contains(&quot;Dav&quot;)\tThe Contains method checks whether specified character or string is exists or not in the string value EndsWith()\tfirstName.EndsWith(&quot;n&quot;)\tThis EndsWith Method checks whether specified character is the last character of string or not Equals()\tfirstnName.Equals(lastname)\tThe Equals Method in C# compares two string and returns Boolean value as output GetHashCode()\tfirstName.GetHashCode()\tThis method returns HashValue of specified string GetType()\tfirstName.GetType()\tReturns the System.Type of current instance IndexOf()\tfirstName.IndexOf(&quot;e&quot;)\tReturns the index position of first occurrence of specified character ToLower()\tfirstName.ToLower()\tConverts String into lower case based on rules of the current culture ToUpper()\tfirstName.ToUper()\tConverts String into upper case based on rules of the current culture Insert()\tfirstName.Insert(0, &quot;Hello&quot;)\tInsert the string or character in the string at the specified position IsNormalized()\tfirstName.IsNormalized()\tThis method checks whether this string is in Unicode normalization form C LastIndexOf()\tfirsName.LastIndexOf(&quot;e&quot;)\tThis method checks whether this string is in Unicode normalization form C Length\tfirstName.Length\tIt is a string property that returns length of string Remove()\tfirstName.Remove(5)\tThis method deletes all the characters from beginning to specified index position Replace()\tfirstName.Replace('e','i')\tThis method replaces the character Split()\tstring[] split = firstname.Split(new char[] e);\tThis method splits the string based on specified value StartsWith()\tfirstName.StartsWith(&quot;S&quot;)\tIt checks whether the first character of string is same as specified character Substring()\tfirstName.Substring(2,5)\tThis method returns substring ToCharArray()\tfirstnName.ToCharArray()\tConverts string into char array Trim()\tfirstnName.Trim()\tIt removes extra whitespaces from beginning and ending of string ","version":"Next","tagName":"h2"},{"title":"Aggregat-Funktionen II","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/ProjectDB/projektdb04-gruppierungundaggregatfunktionen2","content":"Aggregat-Funktionen II -- Nutzen Sie die Datenbank ProjektDB, -- um die folgenden Aufgaben zu lösen: -- ================================== -- Aggregatfunktionen mit Gruppierung -- ================================== -- Aufgabe 4.7 -- -- Finden Sie heraus, wie viele verschiedene Aufgaben in jedem -- Projekt ausgeübt werden. Nullwerte sollen nicht gezählt werden! -- -- pro_id anzahl -- p1 3 -- p2 1 -- p3 3 -- p4 3 -- p5 2 SELECT * FROM Arbeit SELECT pro_id, COUNT(DISTINCT aufgabe) as anzahl FROM Arbeit GROUP BY pro_id; -- Aufgabe 4.8 -- -- Finden Sie heraus, wieviele Mitarbeiter in jedem Projekt arbeiten. -- -- pro_id anzahl -- p1 5 -- p2 4 -- p3 4 -- p4 4 -- p5 3 SELECT pro_id, COUNT(DISTINCT mit_id) AS anzahl FROM Arbeit GROUP BY pro_id; -- Aufgabe 4.9 -- -- Gruppieren Sie die Reihen der Tabelle “Arbeit“ nach den -- vorhandenen Aufgaben und zählen Sie die Anzahl der Mitarbeiter -- abhängig von der jeweiligen Aufgabe. -- -- aufgabe anzahl -- NULL 5 -- Gruppenleiter 3 -- Projektleiter 4 -- Sachbearbeiter 7 SELECT aufgabe, COUNT(DISTINCT mit_id) AS anzahl FROM Arbeit GROUP BY aufgabe; -- Aufgabe 4.10 -- -- Wie viele &quot;echte&quot; Aufgaben nehmen die Mitarbeiter wahr, -- deren Id größer als 20000 ist? -- -- mit_id anzahl -- 20204 1 -- 22222 1 -- 24321 0 -- 25348 1 -- 27365 1 -- 28559 1 -- 29346 1 SELECT mit_id, COUNT(aufgabe) AS anzahl FROM Arbeit WHERE mit_id &gt; 20000 GROUP BY mit_id; -- Aufgabe 4.11 -- -- Zählen Sie, wie viele Mitarbeiter in jedem Jahr für ein Projekt -- eingestellt wurden. -- -- Jahr Anzahl -- 2017 2 -- 2018 8 -- 2019 8 SELECT YEAR(einst_dat), COUNT(DISTINCT mit_id) AS anzahl FROM Arbeit GROUP BY YEAR(einst_dat); ","keywords":"","version":"Next"},{"title":"Aggregat-Funktionen III","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/ProjectDB/projektdb04-gruppierungundaggregatfunktionen3","content":"Aggregat-Funktionen III -- Nutzen Sie die Datenbank ProjektDB, -- um die folgenden Aufgaben zu lösen: -- ====== -- HAVING -- ====== -- Aufgabe 4.12 -- -- Nennen Sie alle Projekte (pro_id), mit denen weniger als -- vier Mitarbeiter befasst sind. -- -- pro_id mitarbeiter -- p5 3 SELECT pro_id, COUNT(mit_id) AS mitarbeiter FROM Arbeit GROUP BY pro_id HAVING COUNT(DISTINCT mit_id) &lt; 4; -- Aufgabe 4.13 -- -- Finden Sie alle Mitarbeiter, die in mehr als einem Projekt arbeiten. -- -- mit_id projekte -- 9031 2 -- 10102 2 -- 17000 2 -- 28559 2 -- 29346 2 SELECT * FROM Gehalt; SELECT mit_id, COUNT(pro_id) FROM Arbeit GROUP BY mit_id HAVING COUNT(pro_id) &gt; 1; -- Aufgabe 4.14 -- -- Ermitteln Sie die Tage, an denen mehr als 5000 € -- Umsatz generiert wurde. -- -- datum umsatz -- 2018-05-02 15000,00 -- 2018-10-11 15000,00 -- 2018-11-01 5500,00 -- 2019-02-01 150000,00 -- 2019-05-01 100150,00 SELECT datum, SUM(umsatz) FROM Umsatz GROUP BY datum HAVING SUM(umsatz) &gt; 5000 -- Aufgabe 4.15 -- -- Ermitteln Sie, welche Gehälter jeweils nur von genau einem -- Mitarbeiter bezogen werden. -- -- gehalt mitarbeiter -- 1000,00 1 -- 2500,00 1 -- 4500,00 1 -- 6000,00 1 SELECT gehalt, COUNT(mit_id) FROM Gehalt GROUP BY gehalt HAVING COUNT(mit_id) = 1; SELECT * FROM Umsatz; SELECT SUM(umsatz) AS summe FROM Umsatz WHERE datum = '20181101'; DELETE Mitarbeiter WHERE Name = &quot;bla&quot; AND &quot;blub&quot;; SELECT SUM(umsatz) AS summe FROM Umsatz WHERE (Month(now) - ) ","keywords":"","version":"Next"},{"title":"Sub-Queries I","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/ProjectDB/projektdb05-subqueries1","content":"Sub-Queries I -- Nutzen Sie die Datenbank ProjektDB, -- um die folgenden Aufgaben zu lösen: -- ====================== -- Einfache Unterabfragen -- ====================== -- Aufgabe 5.1 -- -- Nennen Sie Personalnummer und Name des Mitarbeiters -- mit der kleinsten Personalnummer. Nutzen Sie eine -- einfache Unterabfrage. -- -- id nachname -- 2581 Kaufmann SELECT id, nachname FROM Mitarbeiter WHERE id = (SELECT MIN(id) FROM Mitarbeiter); -- Aufgabe 5.2 -- -- Nennen Sie die Abteilungsnummern der Mitarbeiter, die -- in Projekt p3 arbeiten. Nutzen Sie eine einfache -- Unterabfrage. -- -- abt_id -- a2 -- a2 -- a3 -- a5 SELECT abt_id FROM Mitarbeiter WHERE id IN ( SELECT mit_id FROM Arbeit WHERE pro_id = 'p3') -- Aufgabe 5.3 -- -- Erstellen Sie eine Liste der Ids aller Mitarbeiter, -- deren Gehalt über dem Durchschnitt liegt. Nutzen -- Sie eine einfache Unterabfrage. -- -- mit_id -- 5765 -- 9031 -- 17000 -- 22222 -- 28559 -- 29346 SELECT mit_id FROM Gehalt WHERE mit_id IN ( SELECT mit_id FROM Gehalt WHERE gehalt &gt; (SELECT AVG(gehalt) FROM Gehalt)); SELECT mit_id FROM Gehalt WHERE gehalt &gt; (SELECT AVG(gehalt) FROM Gehalt); -- Aufgabe 5.4 -- -- Nennen Sie die Nummern aller Projekte, in denen Mitarbeiter -- arbeiten, deren Personalnummer kleiner als die Nummer des -- Mitarbeiters namens Müller ist. Nutzen Sie eine einfache -- Unterabfrage. -- -- pro_id -- p1 -- p3 -- p4 -- p5 SELECT * FROM Abteilung; SELECT DISTINCT pro_id FROM Arbeit WHERE mit_id IN( SELECT id FROM Mitarbeiter WHERE id &lt; (SELECT id FROM Mitarbeiter WHERE nachname = 'Müller') ); SELECT DISTINCT pro_id FROM Arbeit WHERE mit_id &lt; (SELECT id FROM Mitarbeiter WHERE nachname = 'Müller'); -- Aufgabe 5.5 -- -- Nennen Sie die Namen aller Mitarbeiter, die in einer -- Abteilung in Ulm arbeiten. Nutzen Sie eine einfache -- Unterabfrage. -- -- nachname vorname -- Krüger Martin -- Schubert Rolf -- Albrecht Lena SELECT nachname, vorname FROM Mitarbeiter WHERE abt_id = ( SELECT id FROM Abteilung WHERE stadt = 'Ulm') -- Aufgabe 5.6 -- -- Finden Sie die Personalnummer des Projektleiters, -- der in dieser Position als letzter einstellt wurde. -- Nutzen Sie eine einfache Unterabfrage. -- -- mit_id -- 2581 SELECT mit_id FROM Arbeit WHERE einst_dat = ( SELECT MAX(einst_dat) FROM Arbeit WHERE aufgabe = 'Projektleiter'); -- Aufgabe 5.7 -- -- Nennen Sie die Namen aller Mitarbeiter, die im Projekt &quot;Apollo&quot; -- arbeiten. Nutzen Sie zwei verschachtelte Unterabfragen. -- -- nachname -- Meier -- Huber -- Krüger -- Mozer -- Probst SELECT * FROM Abteilung SELECT nachname FROM Mitarbeiter WHERE id IN ( SELECT mit_id FROM Arbeit WHERE pro_id = ( SELECT id FROM Projekt WHERE bezeichnung = 'Apollo') ); -- Aufgabe 5.8 -- -- Zeigen Sie Abteilungsnummer und den Namen der Abteilungen -- für die Mitarbeiter an, die am Projekt &quot;Apollo&quot; mitarbeiten. -- Nutzen Sie drei verschachtelte Unterabfragen. -- -- id bezeichnung -- a1 Beratung -- a2 Diagnose -- a3 Freigabe -- a5 Verkauf SELECT DISTINCT abt_id, (SELECT bezeichnung FROM Abteilung WHERE id = Mitarbeiter.abt_id) as bezeichnung FROM Mitarbeiter WHERE id IN ( SELECT mit_id FROM Arbeit WHERE pro_id = ( SELECT id FROM Projekt WHERE bezeichnung = 'Apollo') ); ","keywords":"","version":"Next"},{"title":"ORDER BY","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/ProjectDB/projektdb02-orderby","content":"ORDER BY -- Nutzen Sie die Datenbank ProjektDB, -- um die folgenden Aufgaben zu l�sen: -- ======== -- ORDER BY -- ======== -- Aufgabe 2.1 -- -- Geben Sie die Firmennamen aller Kunden aus. Sortieren -- Sie die Ausgabe aufsteigend nach dem Firmennamen. -- -- firma -- 100% Sonderzeichen AG -- Finanzamt Ulm -- Frankreich-Reisen GmbH -- Getr�nke Schneider -- Im- und Export AG -- Technische Produkte oHG SELECT firma FROM Kunde ORDER BY firma ASC; -- Aufgabe 2.2 -- -- Geben Sie alle Ums�tze des Jahres 2019 sortiert nach Datum -- aus. Bei gleichem Datum sollen die gr��eren Ums�tze zuerst -- genannt werden. -- -- id mit_id datum umsatz -- 10 10102 2019-01-01 4500,00 -- 17 25348 2019-02-01 150000,00 -- 18 25348 2019-03-01 1500,00 -- 19 25348 2019-04-01 15,00 -- 21 2581 2019-05-01 100000,00 -- 20 25348 2019-05-01 150,00 SELECT * FROM Umsatz WHERE datum BETWEEN '20190101' AND '20191231' ORDER BY datum ASC, umsatz DESC; -- Aufgabe 2.3 -- -- Geben Sie alle Daten der Mitarbeiter aus. Sortieren Sie die -- Ausgabe nach Abteilungs-Nr. aufsteigend. Innerhalb der -- Abteilung sollen die Mitarbeiter ohne bekannten Wohnort -- am Ende stehen. -- -- id nachname vorname abt_id stadt -- 28559 Mozer Sibille a1 Ulm -- 18316 M�ller Gabriele a1 Rosenheim -- 29346 Probst Andreas a2 Augsburg -- 2581 Kaufmann Brigitte a2 NULL -- 9031 Meier Rainer a2 NULL -- 25348 Keller Hans a3 M�nchen -- .. -- (15 Zeilen) SELECT * FROM Mitarbeiter ORDER BY abt_id ASC, stadt DESC; -- Aufgabe 2.4 -- -- Geben Sie die Id und die Aufgabe von allen Mitarbeitern -- aus, die Projektleiter sind. Sortieren Sie die Ausgabe -- nach der Mitarbeiter-Id. -- -- mit_id aufgabe -- 2581 Projektleiter -- 5765 Projektleiter -- 10102 Projektleiter -- 22222 Projektleiter SELECT * FROM Arbeit WHERE aufgabe = 'Projektleiter' ORDER BY mit_id; -- Aufgabe 2.5 -- -- Gesucht werden Mitarbeiter-id, Projekt-Id und Aufgabe -- der Mitarbeiter, die entweder im Projekt p2 arbeiten, -- oder aber Projektleiter in einem beliebigen Projekt sind. -- Sortieren Sie die Ausgabe nach der Projekt-Id und dann -- nach der Aufgabe. -- -- mit_id pro_id aufgabe -- 10102 p1 Projektleiter -- 18316 p2 NULL -- 29346 p2 NULL -- 25348 p2 Sachbearbeiter -- 28559 p2 Sachbearbeiter -- 2581 p3 Projektleiter -- 5765 p4 Projektleiter -- 22222 p5 Projektleiter SELECT * FROM Arbeit WHERE pro_id = 'p2' OR aufgabe = 'Projektleiter' ORDER BY pro_id, aufgabe; ","keywords":"","version":"Next"},{"title":"INNER JOIN II","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/ProjectDB/projektdb06-innerjoin2","content":"INNER JOIN II -- Nutzen Sie die ProjektDB-Datenbank, um die folgenden -- Aufgaben zu lösen -- Aufgabe 6.9 -- -- Nennen Sie einmalig die Namen der Projekte, in denen die -- Mitarbeiter arbeiten, die ein Gehalt von mindestens -- 5.000 € beziehen. -- -- pr_name -- Apollo -- Ariane -- Gemini SELECT DISTINCT bezeichnung FROM Projekt p INNER JOIN Arbeit a ON p.id = a.pro_id INNER JOIN Mitarbeiter m ON m.id = a.mit_id INNER JOIN Gehalt g ON m.id = g.mit_id WHERE g.gehalt &gt;= 5000; -- Aufgabe 6.10 -- -- Erstellen Sie das Kartesische Produkt auf Mitarbeiter- und Abteilungs-Tabelle -- -- id nachname vorname abt_id stadt id bezeichnung stadt -- 2581 Kaufmann Brigitte a2 NULL a1 Beratung München -- 5765 Schäfer Sabine a3 Landshut a1 Beratung München -- 9031 Meier Rainer a2 NULL a1 Beratung München -- 9912 Wolf Klaus a4 Heidenheim a1 Beratung München -- 10102 Huber Petra a3 Landshut a1 Beratung München -- 12121 Richter Ursula a4 München a1 Beratung München -- ... -- (75 Zeilen) SELECT * FROM Mitarbeiter m, Abteilung a -- Aufgabe 6.11 -- -- Finden Sie alle Mitarbeiter und dazu alle Abteilungen, in denen -- diese Mitarbeiter NICHT arbeiten. -- -- id nachname vorname abt_id stadt id bezeichnung stadt -- 2581 Kaufmann Brigitte a2 NULL a1 Beratung München -- 5765 Schäfer Sabine a3 Landshut a1 Beratung München -- 9031 Meier Rainer a2 NULL a1 Beratung München -- 9912 Wolf Klaus a4 Heidenheim a1 Beratung München -- 10102 Huber Petra a3 Landshut a1 Beratung München -- 12121 Richter Ursula a4 München a1 Beratung München -- ... -- (60 Zeilen) SELECT * FROM Mitarbeiter m, Abteilung a WHERE m.abt_id &lt;&gt; a.id; -- Aufgabe 6.12 -- -- Nennen Sie die Abteilungsnamen der Mitarbeiter, die -- am 01.01.2019 eingestellt wurden. -- -- bezeichnung -- Freigabe -- Einkauf SELECT bezeichnung FROM Abteilung a INNER JOIN Mitarbeiter m ON m.abt_id = a.id INNER JOIN Arbeit ab ON ab.mit_id = m.id WHERE ab.einst_dat = '20190101'; -- Aufgabe 6.13 -- -- Nennen Sie Namen und Vornamen aller Projektleiter, deren -- Abteilung den Standort Stuttgart hat. -- -- nachname vorname -- Schäfer Sabine -- Huber Petra SELECT m.nachname, m.vorname FROM Mitarbeiter m INNER JOIN Arbeit a ON m.id = a.mit_id INNER JOIN Abteilung ab ON m.abt_id = ab.id WHERE a.aufgabe = 'Projektleiter' AND ab.stadt = 'Stuttgart'; -- Aufgabe 6.14 -- -- Nennen Sie einmalig die Namen der Projekte, in denen -- Mitarbeiter arbeiten, die zur Abteilung Beratung gehören. -- -- bezeichnung -- Apollo -- Gemini SELECT DISTINCT p.bezeichnung FROM Projekt p INNER JOIN Arbeit a ON a.pro_id = p.id INNER JOIN Mitarbeiter m ON m.id = a.mit_id INNER JOIN Abteilung ab ON ab.id = m.abt_id WHERE ab.bezeichnung = 'Beratung'; -- Aufgabe 6.15 -- -- Nennen Sie die Kunden, an deren Projekten Mitarbeiter -- arbeiten, die mindestens 5.000 € Gehalt bekommen. Nennen -- Sie zu den Kunden auch die Anzahl dieser Mitarbeiter. -- -- firma mitarbeiter -- Finanzamt Ulm 2 -- Frankreich-Reisen GmbH 2 -- Technische Produkte oHG 1 SELECT k.firma, COUNT(m.id) as mitarbeiter FROM Kunde k INNER JOIN Projekt p ON p.kd_id = k.id INNER JOIN Arbeit a ON a.pro_id = p.id INNER JOIN Mitarbeiter m ON m.id = a.mit_id INNER JOIN Gehalt g ON g.mit_id = m.id WHERE g.gehalt &gt;= 5000 GROUP BY firma ","keywords":"","version":"Next"},{"title":"OUTER JOIN I","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/ProjectDB/projektdb08-outerjoin1","content":"OUTER JOIN I -- Nutzen Sie die Datenbank ProjektDB, -- um die folgenden Aufgaben zu lösen: -- Aufgabe 8.1 -- -- Zeigen Sie die Id, Firma und die Stadt aller Kunden -- an. Zeigen Sie dazu außerdem den Namen der Abteilungen -- an, die am Ort des Kunden ihren Sitz haben (bilden Sie -- den Join über die Stadt). -- -- id firma stadt bezeichnung -- 1 Im- und Export AG München Beratung -- 1 Im- und Export AG München Diagnose -- 1 Im- und Export AG München Einkauf -- 2 Technische Produkte oHG Ulm Verkauf -- 3 Frankreich-Reisen GmbH Saarlouis NULL -- 4 Getränke Schneider Heidenheim NULL -- 5 Finanzamt Ulm Fürth NULL -- 6 100% Sonderzeichen AG Baden_Baden NULL SELECT k.*, a.bezeichnung FROM Kunde k LEFT JOIN Abteilung a ON a.stadt = k.stadt -- Aufgabe 8.2 -- -- Ändern Sie die Abfrage aus Aufgabe 8.1, so dass alle -- Abteilungen angezeigt werden, und dazu die passenden -- Kunden im selben Ort. -- -- id firma stadt bezeichnung -- 1 Im- und Export AG München Beratung -- 1 Im- und Export AG München Diagnose -- NULL NULL NULL Freigabe -- 1 Im- und Export AG München Einkauf -- 2 Technische Produkte oHG Ulm Verkauf SELECT k.*, a.bezeichnung FROM Kunde k RIGHT JOIN Abteilung a ON a.stadt = k.stadt -- Aufgabe 8.3 -- -- Überarbeiten Sie die Abfrage aus der Aufgabe 8.1. -- Statt NULL soll in der Spalte für die Abteilung der -- Text '- k. A. -' angezeigt werden. -- -- id firma stadt bezeichnung -- 1 Im- und Export AG München Beratung -- 1 Im- und Export AG München Diagnose -- 1 Im- und Export AG München Einkauf -- 2 Technische Produkte oHG Ulm Verkauf -- 3 Frankreich-Reisen GmbH Saarlouis - k. A. - -- 4 Getränke Schneider Heidenheim - k. A. - -- 5 Finanzamt Ulm Fürth - k. A. - -- 6 100% Sonderzeichen AG Baden_Baden - k. A. - SELECT k.*, ISNULL(a.bezeichnung, '- k. A. -') FROM Kunde k LEFT JOIN Abteilung a ON a.stadt = k.stadt -- Aufgabe 8.4 -- -- Geben Sie eine Liste aller Kunden aus. Geben Sie zu den -- Kunden auch das Projekt aus, sofern vorhanden. -- -- firma stadt bezeichnung -- Im- und Export AG München Merkur -- Technische Produkte oHG Ulm Ariane -- Frankreich-Reisen GmbH Saarlouis Apollo -- Getränke Schneider Heidenheim Pluto -- Finanzamt Ulm Fürth Gemini -- 100% Sonderzeichen AG Baden_Baden NULL SELECT k.*, p.bezeichnung FROM Kunde k LEFT JOIN Projekt p ON k.id = p.kd_id -- Aufgabe 8.5 -- -- Geben Sie jetzt nur die Kunden aus, zu denen es kein -- Projekt gibt. -- -- firma stadt bezeichnung -- 100% Sonderzeichen AG Baden_Baden NULL SELECT k.*, p.bezeichnung FROM Kunde k LEFT JOIN Projekt p ON k.id = p.kd_id WHERE p.kd_id IS NULL -- Aufgabe 8.6 -- -- Geben Sie eine Liste der Kunden mit Firma und Stadt aus. -- Geben Sie dazu die Nachnamen der Mitarbeiter aus, die -- im selben Ort wohnen. -- -- firma stadt nachname -- Im- und Export AG München Richter -- Im- und Export AG München Vogel -- Im- und Export AG München Schubert -- Im- und Export AG München Keller -- Frankreich-Reisen GmbH Saarlouis NULL -- Getränke Schneider Heidenheim Wolf -- ... -- (10 Zeilen) SELECT k.*, m.nachname FROM Kunde k LEFT JOIN Mitarbeiter m ON k.stadt = m.stadt -- Aufgabe 8.7 -- -- Geben Sie wieder die Liste der Kunden aus. Geben Sie -- diesmal dazu die Anzahl Mitarbeiter aus, die am selben -- Ort wohnen. -- -- firma stadt mitarbeiter -- 100% Sonderzeichen AG Baden_Baden 0 -- Finanzamt Ulm Fürth 1 -- Getränke Schneider Heidenheim 1 -- Im- und Export AG München 4 -- Frankreich-Reisen GmbH Saarlouis 0 -- Technische Produkte oHG Ulm 2 SELECT k.firma, k.stadt, COUNT(m.id) as mitarbeiter FROM Kunde k LEFT JOIN Mitarbeiter m ON k.stadt = m.stadt GROUP BY k.firma, k.stadt -- Aufgabe 8.8 -- -- Ergänzen Sie die Abfrage aus Aufgabe 8.7 und geben -- Sie zusätzlich noch die Anzahl Abteilungen aus, die -- es am Ort des Kunden gibt. -- -- firma stadt mitarbeiter abteilungen -- 100% Sonderzeichen AG Baden_Baden 0 0 -- Finanzamt Ulm Fürth 1 0 -- Getränke Schneider Heidenheim 1 0 -- Im- und Export AG München 4 3 -- Frankreich-Reisen GmbH Saarlouis 0 0 -- Technische Produkte oHG Ulm 2 1 SELECT k.firma, k.stadt, COUNT(DISTINCT m.id) as mitarbeiter, COUNT(DISTINCT a.id) as abteilungen FROM Kunde k LEFT JOIN Mitarbeiter m ON k.stadt = m.stadt LEFT JOIN Abteilung a ON k.stadt = a.stadt GROUP BY k.firma, k.stadt ","keywords":"","version":"Next"},{"title":"Sub-Queries II","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/ProjectDB/projektdb05-subqueries2","content":"Sub-Queries II -- Nutzen Sie die Datenbank ProjektDB, -- um die folgenden Aufgaben zu lösen: -- ========================= -- Korrelierte Unterabfragen -- ========================= -- Aufgabe 5.9 -- -- Geben Sie eine Liste der Projekt-Ids und Aufgaben aus und -- nennen Sie dazu den Namen des Mitarbeiters. Soertieren Sie -- die Ausgabe nach Projekt-Id und Aufgabe. Nutzen Sie eine -- korrelierte Unterabnfrage im SELECT. -- -- pro_id aufgabe nachname -- p1 NULL Krüger -- p1 NULL Mozer -- p1 Gruppenleiter Meier -- p1 Projektleiter Huber -- p1 Sachbearbeiter Probst -- p2 NULL Probst SELECT TOP 6 pro_id, aufgabe, ( SELECT nachname FROM Mitarbeiter WHERE Arbeit.mit_id = Mitarbeiter.id) as nachname FROM Arbeit ORDER BY pro_id, aufgabe -- Aufgabe 5.10 -- -- Erweitern Sie die Abfrage aus Aufgabe 5.9 und geben Sie -- zusätzlich auch den Projektnamen aus. Nutzen Sie zwei -- korrelierte Unterabfragen im SELECT. -- -- pro_id bezeichnung aufgabe nachname -- p1 Apollo NULL Krüger -- p1 Apollo NULL Mozer -- p1 Apollo Gruppenleiter Meier -- p1 Apollo Projektleiter Huber -- p1 Apollo Sachbearbeiter Probst -- p2 Gemini NULL Probst SELECT TOP 6 pro_id, aufgabe, ( SELECT nachname FROM Mitarbeiter WHERE Arbeit.mit_id = Mitarbeiter.id) as nachname, (SELECT bezeichnung FROM Projekt WHERE Arbeit.pro_id = Projekt.id) as bezeichnung FROM Arbeit ORDER BY pro_id, aufgabe -- Aufgabe 5.11 -- -- Geben Sie eine Liste aller Abteilngsnamen aus. Geben -- Sie dazu aus, wie viele Mitarbeiter in der Abteilung -- arbeiten. Nutzen Sie eine korrelierte Unterabfrage -- im SELECT. -- -- bezeichnung anzahl -- Beratung 2 -- Diagnose 3 -- Freigabe 3 -- Einkauf 4 -- Verkauf 3 SELECT DISTINCT bezeichnung, ( SELECT COUNT(id) FROM Mitarbeiter WHERE Abteilung.id = Mitarbeiter.abt_id) as anzahl FROM Abteilung; -- Aufgabe 5.12 -- -- Geben Sie eine Liste aller Mitarbeiter-Ids mit Gehalt aus. -- Geben Sie dazu auch den Namen des Mitarbeiters aus. Nutzen -- Sie eine korrelierte Unterabfrage im SELECT. -- -- mit_id nachname gehalt -- 2581 Kaufmann 3000,00 -- 5765 Schäfer 4500,00 -- 9031 Meier 4000,00 -- 9912 Wolf 3500,00 -- 10102 Huber 3500,00 -- 12121 Richter 3000,00 SELECT TOP 6 id as mit_id, nachname, ( SELECT gehalt FROM Gehalt WHERE m.id = mit_id) as gehalt FROM Mitarbeiter m -- Aufgabe 5.13 -- -- Erweitern Sie die Abfrage aus Aufgabe 5.12 und geben -- Sie zusätzlich noch das Durschnitts-Gehalt aller -- Mitarbeiter aus. Zeigen Sie anschließend noch die -- Differenz des Mitarbeiters zum Durchschnitt an. -- -- mit_id nachname gehalt durchschnitt differenz -- 2581 Kaufmann 3000,00 3633,3333 -633,3333 -- 5765 Schäfer 4500,00 3633,3333 866,6667 -- 9031 Meier 4000,00 3633,3333 366,6667 -- 9912 Wolf 3500,00 3633,3333 -133,3333 -- 10102 Huber 3500,00 3633,3333 -133,3333 -- 12121 Richter 3000,00 3633,3333 -633,3333 SELECT TOP 6 mit_id, (SELECT nachname FROM Mitarbeiter WHERE id = Gehalt.mit_id), gehalt, (SELECT AVG(gehalt) FROM Gehalt) as durchschnitt, gehalt - (SELECT AVG(gehalt) FROM Gehalt) as differenz FROM Gehalt -- Aufgabe 5.14 -- -- Zeigen Sie die Mitarbeiternamen und Abteilungsnamen der -- Mitarbeiter an, die im Projekt &quot;Apollo&quot; arbeiten. Nutzen -- Sie zwei verschachtelte Unterabfragen und eine korrelierte -- Unterabfrage im SELECT. -- -- nachname abteilung -- Meier Diagnose -- Huber Freigabe -- Krüger Verkauf -- Mozer Beratung -- Probst Diagnose SELECT * FROM Projekt SELECT nachname, (SELECT bezeichnung FROM Abteilung WHERE Mitarbeiter.abt_id = id) as abteilung FROM Mitarbeiter WHERE id IN ( SELECT mit_id FROM Arbeit WHERE pro_id = ( SELECT id FROM Projekt WHERE bezeichnung = 'Apollo') ); ","keywords":"","version":"Next"},{"title":"Sub-Queries III","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/ProjectDB/projektdb05-subqueries3","content":"Sub-Queries III -- Nutzen Sie die Datenbank ProjektDB, -- um die folgenden Aufgaben zu lösen: -- ================== -- ANY / ALL / EXISTS -- ================== -- Aufgabe 5.15 -- -- Finden Sie Personalnummer, Projektnummer und Aufgabe -- der Mitarbeiter, deren Projekt-Eintrittsdatum nicht -- das letzte ist. Nutzen Sie den ANY-Operator. -- -- mit_id aufgabe einst_dat -- 29346 NULL 2017-12-15 -- 20204 Sachbearbeiter 2017-12-20 -- 28559 Sachbearbeiter 2018-02-01 -- 25348 Sachbearbeiter 2018-02-15 -- 28559 NULL 2018-04-15 -- 5765 Projektleiter 2018-07-20 -- ... -- (18 Zeilen) SELECT mit_id, aufgabe, einst_dat FROM Arbeit WHERE einst_dat &lt; ANY (SELECT einst_dat FROM Arbeit) -- Aufgabe 5.16 -- -- Nennen Sie die Aufgabe des Mitarbeiters, der die kleinste -- Personalnummer hat. Nutzen Sie den ALL-Operator. -- -- aufgabe -- Projektleiter SELECT aufgabe FROM Arbeit WHERE mit_id &lt;= ALL (SELECT mit_id FROM Arbeit) -- Aufgabe 5.17 -- -- Nennen Sie die Ids und das Gehalt der Mitarbeiter, -- deren Gehalt nicht das niedrigste ist. Nutzen Sie -- den ANY-Operator. -- -- mit_id gehalt -- 2581 3000,00 -- 5765 4500,00 -- 9031 4000,00 -- 9912 3500,00 -- 10102 3500,00 -- 12121 3000,00 -- ... -- (14 Zeilen) SELECT mit_id, gehalt FROM Gehalt WHERE gehalt &gt; ANY (SELECT gehalt FROM Gehalt) -- Aufgabe 5.18 -- -- Nennen Sie Id und Gehalt des Mitarbeiters mit dem -- höchsten Gehalt. Nutzen Sie den ALL-Operator. -- -- mit_id gehalt -- 28559 6000,00 SELECT mit_id, gehalt FROM Gehalt WHERE gehalt &gt;= ALL (SELECT gehalt FROM Gehalt) -- Aufgabe 5.19 -- -- Nennen Sie den Namen des Mitarbeiters mit der kleinsten -- Id. Verwenden Sie eine korrelierte Unterabfrage und den -- Operator NOT EXISTS. -- -- nachname -- Kaufmann SELECT nachname FROM Mitarbeiter m1 WHERE NOT EXISTS ( SELECT 1 FROM Mitarbeiter m2 WHERE m2.id &lt; m1.id); -- Aufgabe 5.20 -- -- Finden Sie die Städte, die sowohl die Wohnorte der -- Mitarbeiter als auch die Standorte der Abteilungen -- sind. Verwenden Sie eine korrelierte Unterabfrage -- und den Operator EXISTS. -- -- stadt -- München -- Ulm SELECT DISTINCT stadt FROM Mitarbeiter m WHERE EXISTS ( SELECT 1 FROM Abteilung a WHERE m.stadt = a.stadt); ","keywords":"","version":"Next"},{"title":"Programmierung IV","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/ProjectDB/projektdbp2-programmierung1","content":"Programmierung IV --\tNutzen Sie die Datenbank ProjektDB zur --\tLösung dieser Aufgabe --\tAufgabe P2.1 -- --\tErstellen Sie eine View v_MitarbeiterMünchen, die nur --\tdie Mitarbeiter aus München anzeigt. USE ProjektDB; GO CREATE OR ALTER VIEW v_MitarbeiterMünchen AS SELECT m.* FROM Mitarbeiter m WHERE stadt = 'München' GO SELECT * FROM v_MitarbeiterMünchen; GO --\tAufgabe P2.2 -- --\tErstellen Sie eine View v_MitarbeiterAbteilung, die --\talle Daten der Mitarbeiter, Gehälter und Abteilungen --\tanzeigt. Die IDs sollen dabei nicht angezeigt werden. CREATE OR ALTER VIEW v_MitarbeiterAbteilung AS SELECT m.nachname, m.vorname, m.stadt, g.gehalt, a.bezeichnung FROM Mitarbeiter m LEFT JOIN Abteilung a ON m.abt_id = a.id LEFT JOIN Gehalt g ON m.id = g.mit_id; GO SELECT * FROM v_MitarbeiterAbteilung; GO ","keywords":"","version":"Next"},{"title":"Constraints","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/SQL/Constrains","content":"","keywords":"","version":"Next"},{"title":"Beispiele​","type":1,"pageTitle":"Constraints","url":"/my-documentation/docs/DB/SQL/Constrains#beispiele","content":" -- unbenannter Primary Key CREATE TABLE departments ( department_id INT PRIMARY KEY, department_name VARCHAR(100) ); -- benannten Primary Key und Foreign Key definieren CREATE TABLE employees ( employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, CONSTRAINT pk_employees (employee_id) CONSTRAINT fk_employees_otherTable FOREIGN KEY (department_id) REFERENCES departments(department_id) ); -- später einen Primär Key hinzufügen ALTER TABLE employees ADD PRIMARY KEY (employee_id); -- CHECK constraint hinzufügen ALTER TABLE employees ADD CONSTRAINT check_salary CHECK (salary &gt; 1000);  ","version":"Next","tagName":"h3"},{"title":"INNER JOIN I","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/ProjectDB/projektdb06-innerjoin1","content":"INNER JOIN I -- Nutzen Sie die ProjektDB-Datenbank, um die folgenden -- Aufgaben zu lösen -- Aufgabe 6.1 -- -- Schreiben Sie eine Abfrage, die alle Mitarbeiter aus der -- Abteilung a4 ausgibt. Geben Sie die Felder vorname, nachname -- und Abteilungsname aus. -- -- vorname nachname bezeichnung -- Klaus Wolf Einkauf -- Ursula Richter Einkauf -- Dirk Fuchs Einkauf -- Anke Vogel Einkauf SELECT m.vorname, m.nachname, a.bezeichnung FROM Mitarbeiter m INNER JOIN Abteilung a ON m.abt_id = a.id WHERE a.id = 'a4'; -- Aufgabe 6.2 -- -- Schreiben Sie eine Abfrage, die alle Projekte mit den -- zugehörigen Projektleitern ausgibt. Geben Sie alle Daten -- aus der Projekt-Tabelle und zusätzlich Id und Einstell- -- Datum aus der Arbeit-Tabelle aus. Sortieren Sie das -- Ergebnis nach der Projekt-ID. -- -- id bezeichnung mittel kd_id mit_id einst_dat -- p1 Apollo 120000,00 3 10102 2018-10-01 -- p3 Merkur 186500,00 1 2581 2019-10-15 -- p4 Pluto 88500,00 4 5765 2018-07-20 -- p5 Ariane 165000,00 2 22222 2019-01-01 SELECT DISTINCT p.*, a.mit_id, a.einst_dat FROM Projekt p INNER JOIN Arbeit a ON p.id = a.pro_id WHERE a.aufgabe = 'Projektleiter' ORDER BY p.id -- Aufgabe 6.3 -- -- Verändern Sie die Abfrage aus Aufgabe 6.2, indem Sie statt der -- Mitarbeiter-Id den Nachnamen des Mitarbeiters in das Ergebnis -- einbauen. -- -- id bezeichnung mittel kd_id nachname einst_dat -- p1 Apollo 120000,00 3 Huber 2018-10-01 -- p3 Merkur 186500,00 1 Kaufmann 2019-10-15 -- p4 Pluto 88500,00 4 Schäfer 2018-07-20 -- p5 Ariane 165000,00 2 Vogel 2019-01-01 SELECT DISTINCT p.*, m.nachname, a.einst_dat FROM Projekt p INNER JOIN Arbeit a ON p.id = a.pro_id INNER JOIN Mitarbeiter m ON a.mit_id = m.id WHERE a.aufgabe = 'Projektleiter' ORDER BY p.id -- Aufgabe 6.4 -- -- Erweitern Sie die Abfrage aus Aufgabe 6.3, indem Sie zusätzlich -- die Bezeichnung der Abteilung in das Ergebnis einbauen. -- -- id bezeichnung mittel kd_id nachname einst_dat bezeichnung -- p1 Apollo 120000,00 3 Huber 2018-10-01 Freigabe -- p3 Merkur 186500,00 1 Kaufmann 2019-10-15 Diagnose -- p4 Pluto 88500,00 4 Schäfer 2018-07-20 Freigabe -- p5 Ariane 165000,00 2 Vogel 2019-01-01 Einkauf SELECT DISTINCT p.*, m.nachname, a.einst_dat, ab.bezeichnung FROM Projekt p INNER JOIN Arbeit a ON p.id = a.pro_id INNER JOIN Mitarbeiter m ON a.mit_id = m.id INNER JOIN Abteilung ab ON m.abt_id = ab.id WHERE a.aufgabe = 'Projektleiter' ORDER BY p.id; -- Aufgabe 6.5 -- -- Erstellen Sie eine Abfrage, die die Mitarbeiter mit allen -- zusätzlichen Informationen zu Abteilung, Gehalt, Arbeit und -- Projekt ausgibt. Geben Sie dabei keine Spalten doppelt im -- Ergebnis aus. -- -- id nachname vorname abt_id stadt bezeichnung stadt gehalt aufgabe einst_dat bezeichnung kd_id -- 2581 Kaufmann Brigitte a2 NULL Diagnose München 3000,00 Projektleiter 2019-10-15 Merkur 1 -- 5765 Schäfer Sabine a3 Landshut Freigabe Stuttgart 4500,00 Projektleiter 2018-07-20 Pluto 4 -- 9031 Meier Rainer a2 NULL Diagnose München 4000,00 Gruppenleiter 2019-04-15 Apollo 3 -- 9031 Meier Rainer a2 NULL Diagnose München 4000,00 Sachbearbeiter 2018-11-15 Merkur 1 -- 9912 Wolf Klaus a4 Heidenheim Einkauf München 3500,00 Sachbearbeiter 2019-01-17 Ariane 2 -- 10102 Huber Petra a3 Landshut Freigabe Stuttgart 3500,00 Projektleiter 2018-10-01 Apollo 3 -- ... -- (20 Zeilen) SELECT m.*, ab.bezeichnung, ab.stadt, g.gehalt, a.aufgabe, a.einst_dat, p.bezeichnung, p.kd_id FROM Mitarbeiter m INNER JOIN Abteilung ab ON m.abt_id = ab.id INNER JOIN Gehalt g ON m.id = g.mit_id INNER JOIN Arbeit a ON m.id = a.mit_id INNER JOIN Projekt p ON a.pro_id = p.id -- Aufgabe 6.6 -- -- Geben Sie für die Projekte die mit &quot;A&quot; beginnen die unten -- gezeigten Informationen aus. Sortieren Sie die Ausgabe -- nach dem Projektnamen aufsteigend und der Mitarbeiter-Id -- absteigend. -- -- bezeichnung firma mit_id aufgabe -- Apollo Frankreich-Reisen GmbH 29346 Sachbearbeiter -- Apollo Frankreich-Reisen GmbH 28559 NULL -- Apollo Frankreich-Reisen GmbH 17000 NULL -- Apollo Frankreich-Reisen GmbH 10102 Projektleiter -- Apollo Frankreich-Reisen GmbH 9031 Gruppenleiter -- Ariane Technische Produkte oHG 22222 Projektleiter -- Ariane Technische Produkte oHG 17000 NULL -- Ariane Technische Produkte oHG 9912 Sachbearbeiter SELECT p.bezeichnung, k.firma, a.mit_id, a.aufgabe FROM Projekt p INNER JOIN Kunde k ON p.kd_id = k.id INNER JOIN Arbeit a ON a.pro_id = p.id WHERE p.bezeichnung LIKE 'A%' ORDER BY p.bezeichnung ASC, a.mit_id DESC; -- Aufgabe 6.7 -- -- Finden Sie Namen und Vornamen aller Mitarbeiter, -- die im Projekt Merkur arbeiten. -- -- nachname vorname -- Kaufmann Brigitte -- Meier Rainer -- Huber Petra -- Schubert Rolf SELECT nachname, vorname FROM Mitarbeiter m INNER JOIN Arbeit a ON m.id = a.mit_id INNER JOIN Projekt p ON p.id = a.pro_id WHERE p.bezeichnung = 'Merkur'; -- Aufgabe 6.8 -- -- Nennen Sie Namen und Vornamen aller Projektleiter, deren -- Abteilung den Standort München hat. -- -- nachname vorname -- Kaufmann Brigitte -- Vogel Anke SELECT nachname, vorname FROM Mitarbeiter m INNER JOIN Arbeit a ON m.id = a.mit_id INNER JOIN Abteilung ab ON m.abt_id = ab.id WHERE ab.stadt = 'München' AND a.aufgabe = 'Projektleiter'; ","keywords":"","version":"Next"},{"title":"CASE","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/ProjectDB/projektdb09-case","content":"CASE -- Nutzen Sie die Datenbank ProjektDB, -- um die folgenden Aufgaben zu lösen: USE ProjektDB; SET LANGUAGE german; -- ============== -- CASE-Ausdrücke -- ============== -- Aufgabe 9.1 -- -- Geben Sie eine Liste aller Projekte aus, in der -- Sie diese nach den verfügbaren Mitteln in -- Kategorien einteilen: -- weniger als 90.000 =&gt; Kategorie 1 -- weniger als 135.000 =&gt; Kategorie 2 -- weniger als 170.000 =&gt; Kategorie 3 -- ab 170.000 =&gt; Kategorie 4 -- -- bezeichnung kategorie -- Apollo 2 -- Gemini 2 -- Merkur 4 -- Pluto 1 -- Ariane 3 SELECT bezeichnung, CASE WHEN mittel &lt; 90000 THEN 1 WHEN mittel &lt; 135000 THEN 2 WHEN mittel &lt; 170000 THEN 3 ELSE 4 END AS kategorie FROM Projekt; -- Aufgabe 9.2 -- -- Kategorisieren Sie Ihre Mitarbeiter. Mitarbeiter, -- die in der Abteilung 'Einkauf' arbeiten, kommen -- in Kategorie A. Mitarbeiter aus anderen Abteilungen -- kommen in Kategorie B. Aber wer in Landshut oder -- Rosenheim wohnt (also auf dem Land), der kommt auf -- jeden Fall in Kategorie F. -- -- id nachname stadt bezeichnung kategorie -- 2581 Kaufmann NULL Diagnose B -- 5765 Schäfer Landshut Freigabe F -- 9031 Meier NULL Diagnose B -- 9912 Wolf Heidenheim Einkauf A -- 10102 Huber Landshut Freigabe F -- 12121 Richter München Einkauf A -- ... -- (15 Zeilen) SELECT m.id, m.nachname, m.stadt, bezeichnung, CASE WHEN bezeichnung = 'Einkauf' THEN 'A' WHEN m.stadt IN ('Landshut', 'Rosenheim') THEN 'F' ELSE 'B' END AS kategorie FROM Mitarbeiter m JOIN Abteilung a ON m.abt_id = a.id; -- Aufgabe 9.3 -- -- Erweitern Sie die Abfrage aus Aufgabe 9.2. Mitarbeiter -- aus der Kategorie b sollen noch feiner unterteilt werden: -- Wenn Sie an einem Projekt mit mehr als 100.000 Mitteln -- arbeiten, sollen sie in Kategorie B1 fallen, sonst in -- Kategorie B2. -- -- id nachname stadt bezeichnung kategorie -- 2581 Kaufmann NULL Diagnose B1 -- 5765 Schäfer Landshut Freigabe F -- 9031 Meier NULL Diagnose B1 -- 9912 Wolf Heidenheim Einkauf A -- 10102 Huber Landshut Freigabe F -- 12121 Richter München Einkauf A -- ... -- (15 Zeilen) SELECT DISTINCT m.id, m.nachname, m.stadt, a.bezeichnung, CASE WHEN a.bezeichnung = 'Einkauf' THEN 'A' WHEN m.stadt IN ('Landshut', 'Rosenheim') THEN 'F' WHEN m.id IN ( SELECT mit_id FROM Arbeit ab JOIN Projekt p ON ab.pro_id = p.id WHERE p.mittel &gt; 100000) THEN 'B1' ELSE 'B2' END AS kategorie FROM Mitarbeiter m JOIN Abteilung a ON m.abt_id = a.id -- Aufgabe 9.4 -- -- Kategorisieren Sie Arbeiter in Ihren Projekten. Wer am -- Wochenende in ein Projekt eingetreten ist, ist ein -- Arbeitstier, wer am Montag oder Dienstag angefangen hat -- ist fleissig, und der Rest ist ein Faulenzer. Benutzen -- Sie diesmal CASE. -- -- einst_dat wochentag kategorie -- 2019-10-15 Dienstag Fleissig -- 2018-07-20 Freitag Faulenzer -- 2019-04-15 Montag Fleissig -- 2018-11-15 Donnerstag Faulenzer -- 2019-01-17 Donnerstag Faulenzer -- 2018-10-01 Montag Fleissig -- ... -- (20 Zeilen) SELECT a.einst_dat, DATENAME(dw, a.einst_dat) as wochentag, CASE WHEN DATENAME(dw, a.einst_dat) IN ('Samstag', 'Sontag') THEN 'Arbeitstier' WHEN DATENAME(dw, a.einst_dat) IN ('Montag', 'Dienstag') THEN 'Fleissig' ELSE 'Faulenzer' END AS kategorie FROM Arbeit a -- Aufgabe 9.5 -- -- Generieren Sie Codes für Ihre Mitarbeiter. Der Code soll -- bestehen aus: -- - Erster Buchstabe Nachname -- - Vierter Buchstabe Nachname (groß) -- - Letzter Buchstabe Vorname (groß) -- - Abteilungsnummer rückwärts (a1 =&gt; 1a) -- -- nachname vorname abt_id code -- Kaufmann Brigitte a2 KFE2a -- Schäfer Sabine a3 SÄE3a -- Meier Rainer a2 MER2a -- Wolf Klaus a4 WFS4a -- Huber Petra a3 HEA3a -- Richter Ursula a4 RHA4a SELECT nachname, vorname, abt_id, LEFT(nachname, 1) + UPPER(SUBSTRING(nachname, 4, 1) + UPPER(SUBSTRING(vorname, LEN(vorname), 1))) + REVERSE(abt_id) FROM Mitarbeiter ","keywords":"","version":"Next"},{"title":"LIKE Operator","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/ProjectDB/projektdb03-like-operator","content":"LIKE Operator -- Nutzen Sie die Datenbank ProjektDB, -- um die folgenden Aufgaben zu l�sen -- Aufgabe 3.1 -- -- Finden Sie Namen und Personalnummer aller Mitarbeiter, -- deren Name mit dem Buchstaben &quot;K&quot; beginnt. -- -- nachname id -- Kaufmann 2581 -- Kr�ger 17000 -- Keller 25348 SELECT nachname, id FROM Mitarbeiter WHERE nachname LIKE '[K]%'; -- Aufgabe 3.2 -- -- Nennen Sie Namen, Vornamen und Id aller Mitarbeiter, -- deren Vorname als zweiten Buchstaben ein &quot;a&quot; hat. -- -- nachname vorname id -- Sch�fer Sabine 5765 -- Meier Rainer 9031 -- Kr�ger Martin 17000 -- M�ller Gabriele 18316 -- Keller Hans 25348 SELECT nachname, vorname, id FROM Mitarbeiter WHERE vorname LIKE '_[a]%'; -- Aufgabe 3.3 -- -- Finden Sie Abteilungs-Id und Standort aller Abteilungen, die -- sich in den Orten befinden, die mit einem Buchstaben zwischen -- &quot;N&quot; und &quot;Z&quot; beginnen. -- -- id stadt -- a3 Stuttgart -- a5 Ulm SELECT id, stadt FROM Abteilung WHERE stadt LIKE '[N-Z]%'; -- Aufgabe 3.4 -- -- Finden Sie Id, Nachnamen und Vornamen aller Mitarbeiter, deren -- Namen nicht mit den Buchstaben K, L, M, N, O und P beginnen, -- und deren Vornamen nicht mit dem Buchstaben U beginnen. -- -- id nachname vorname -- 5765 Sch�fer Sabine -- 9912 Wolf Klaus -- 10102 Huber Petra -- 20204 Fuchs Dirk -- 22222 Vogel Anke -- 24321 Schubert Rolf -- 27365 Albrecht Lena SELECT id, nachname, vorname FROM Mitarbeiter WHERE nachname LIKE '[^K-P]%' AND vorname LIKE '[^U]%'; -- Aufgabe 3.5 -- -- Nennen Sie Vor- und Nachname aller Mitarbeiter, deren Name -- nicht mit &quot;er&quot; endet. -- -- vorname nachname -- Brigitte Kaufmann -- Klaus Wolf -- Dirk Fuchs -- Anke Vogel -- Rolf Schubert -- Lena Albrecht -- Andreas Probst SELECT nachname, vorname FROM Mitarbeiter WHERE nachname NOT LIKE '%er'; SELECT nachname, vorname FROM Mitarbeiter WHERE nachname LIKE '%[^e]_' AND nachname LIKE '%[^r]'; -- Aufgabe 3.6 -- -- Wie kann man nach dem Unterstrich (_) oder dem Prozentzeichen (%) -- mit LIKE suchen? Finden Sie alle Kunden, in deren Datensatz ein -- solches Sonderzeichen vorkommt. -- -- firma stadt -- 100% Sonderzeichen AG Baden_Baden SELECT firma, stadt FROM Kunde WHERE firma LIKE '%[%_]%'; SELECT firma, stadt FROM Kunde WHERE firma LIKE '%\\%%' ESCAPE '\\\\'; -- Aufgabe 3.7 -- -- Nennen Sie alle Mitarbeiter, deren Vorname mindestens -- drei Vokale enth�lt. -- -- id nachname vorname abt_id stadt -- 2581 Kaufmann Brigitte a2 NULL -- 5765 Sch�fer Sabine a3 Landshut -- 9031 Meier Rainer a2 NULL -- 12121 Richter Ursula a4 M�nchen -- 18316 M�ller Gabriele a1 Rosenheim -- 28559 Mozer Sibille a1 Ulm -- 29346 Probst Andreas a2 Augsburg SELECT * FROM Mitarbeiter WHERE vorname LIKE '%[aeuio]%[aeuio]%[aeuio]%'; -- Aufgabe 3.8 -- -- Finden Sie alle Mitarbeiter, deren Vorname aus genau sieben -- Buchstaben besteht. -- -- id nachname vorname abt_id stadt -- 28559 Mozer Sibille a1 Ulm -- 29346 Probst Andreas a2 Augsburg SELECT * FROM Mitarbeiter WHERE vorname LIKE '_______'; SELECT * FROM Mitarbeiter WHERE LEN(vorname) = 7; -- Aufgabe 3.9 -- -- Finden Sie alle Mitarbeiter, deren Vorname aus genau sechs -- Buchstaben besteht und deren Vorname nicht mit einem Vokal endet. -- -- id nachname vorname abt_id stadt -- 9031 Meier Rainer a2 NULL -- 17000 Kr�ger Martin a5 Ulm SELECT * FROM Mitarbeiter WHERE vorname LIKE '______' AND vorname LIKE '%[^aueio]'; SELECT * FROM Mitarbeiter WHERE vorname LIKE '_____[^aueio]'; -- Aufgabe 3.10 -- -- Finden Sie alle Mitarbeiter, bei deren Vorname der vorletzte -- Buchstabe ein Vokal ist. -- -- id nachname vorname abt_id stadt -- 9031 Meier Rainer a2 NULL -- 9912 Wolf Klaus a4 Heidenheim -- 17000 Kr�ger Martin a5 Ulm -- 29346 Probst Andreas a2 Augsburg SELECT * FROM Mitarbeiter WHERE vorname LIKE '%[aueio]_'; ","keywords":"","version":"Next"},{"title":"FUNKTIONEN","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/ProjectDB/projektdb09-funktionen","content":"FUNKTIONEN -- Nutzen Sie die Datenbank ProjektDB, -- um die folgenden Aufgaben zu lösen: USE ProjektDB; SET LANGUAGE german; -- ========== -- Funktionen -- ========== -- Aufgabe 9.6 -- -- Geben Sie den Vor- und Nachnamen der Mitarbeiter -- in einer Spalte aus. Nutzen Sie die Funktionen -- CONCAT() und ggf. TRIM(). -- -- name -- Brigitte Kaufmann -- Sabine Schäfer -- Rainer Meier -- Klaus Wolf -- Petra Huber -- Ursula Richter -- ... -- (15 Zeilen) SELECT CONCAT(vorname, ' ', nachname) as name FROM Mitarbeiter; SELECT vorname + ' ' + nachname AS name FROM Mitarbeiter; -- Aufgabe 9.7 -- -- Geben Sie den Vor- und Nachnamen der Mitarbeiter, -- gefolgt vom Wohnort in einer Spalte aus. Wenn kein -- Wohnort vorhanden ist, soll der Text 'unbekannt' -- erscheinen. -- -- mitarbeiter -- Brigitte Kaufmann, unbekannt -- Sabine Schäfer, Landshut -- Rainer Meier, unbekannt -- Klaus Wolf, Heidenheim -- Petra Huber, Landshut -- Ursula Richter, München -- ... -- (15 Zeilen) SELECT CONCAT(vorname, ' ', nachname, ', ', ISNULL(stadt, 'unbekannt')) as mitarbeiter FROM Mitarbeiter; SELECT vorname + ' ' + nachname + ', ' + ISNULL(stadt, 'unbekannt') AS mitarbeiter FROM Mitarbeiter; -- Aufgabe 9.8 -- -- Geben Sie die Kurzform des Mitarbeiternamens -- in einer Spalte aus. Das erste Zeichen eines -- Textes können Sie mit LEFT() oder SUBSTRING() -- ermitteln. -- -- name -- B. Kaufmann -- S. Schäfer -- R. Meier -- K. Wolf -- P. Huber -- U. Richter -- ... -- (15 Zeilen) SELECT CONCAT(LEFT(vorname, 1), '. ', nachname) as name FROM Mitarbeiter -- Aufgabe 9.9 -- -- Geben Sie die Nachnamen der Mitarbeiter aus und sortieren -- Sie die Ausgabe nach der Länge der Namen aufsteigend. Bei -- gleicher Länge des Namens soll alphabetisch absteigend -- sortiert werden. -- -- nachname -- Wolf -- Vogel -- Mozer -- Meier -- Huber -- Fuchs -- ... -- (15 Zeilen) SELECT nachname FROM Mitarbeiter ORDER BY LEN(nachname) -- Aufgabe 9.10 -- -- Zeigen Sie die Namen aller Mitarbeiter an und geben Sie -- dazu die Position des ersten Vokals an. Nutzen Sie die -- Funktion PATINDEX() um den Vokal zu finden. -- -- nachname erster_vokal -- Kaufmann 2 -- Schäfer 4 -- Meier 2 -- Wolf 2 -- Huber 2 -- Richter 2 -- ... -- (15 Zeilen) SELECT nachname, PATINDEX('%[aeiuo]%', nachname) as erster_vokal FROM Mitarbeiter -- Aufgabe 9.11 -- -- Berechnen Sie die Anzahl der Tage (brutto), die Sie bereits -- in diesem Modul verbringen durften (oder mussten). Nutzen Sie -- die Funktionen DATEDIFF() und GETDATE(). -- -- tage_in_modul -- 23 SELECT DATEDIFF(DAY, '20241206', GETDATE()) as tage_in_modul; -- Aufgabe 9.12 -- -- Schreiben Sie eine Abfrage, die das heutige Datum formatiert -- ausgibt. Nutzen Sie dazu die Datumsfunktionen DATENAME(), -- DATEPART() und GETDATE() sowie die Funktion CONCAT(). -- -- datum_formatiert -- Heute ist Freitag, der 16. August des Jahres 2024 in der 33. Kalenderwoche SELECT CONCAT('Heute ist ', DATENAME(dw, GETDATE()), ', der ', DATENAME(day, GETDATE()), '. ' , DATENAME(m, GETDATE()), 'des Jahres ', DATENAME(year, GETDATE()), 'in der ', DATENAME(week, GETDATE()), '. Kalendarwoche') AS datum_formatiert; -- Aufgabe 9.13 -- -- Der wievielte Tag des Jahres ist heute? -- -- datum tag_des_jahres -- 2024-08-16 229 SELECT CONVERT(date, GETDATE()) as datum, DATEDIFF(day, '20241231', GETDATE()) AS tag_des_jahres; -- Aufgabe 9.14 -- -- Kategorisieren Sie Ihre Mitarbeiter. Mitarbeiter, die ein -- Gehalt unter 4000 bekommen sind Kategorie A, die anderen -- sind Kategorie B. Versuchen Sie IIF() statt CASE zu verwenden. -- -- mit_id gehalt kategorie -- 2581 3000,00 A -- 5765 4500,00 B -- 9031 4000,00 B -- 9912 3500,00 A -- 10102 3500,00 A -- 12121 3000,00 A SELECT mit_id, gehalt, IIF(gehalt &lt; 4000, 'A', 'B') as kategorie FROM Gehalt; ","keywords":"","version":"Next"},{"title":"Programmierung I","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/ProjectDB/projektdbp1-programmierung1","content":"Programmierung I --\tNutzen Sie die Datenbank ProjektDB zur --\tL�sung dieser Aufgabe USE ProjektDB; GO CREATE SCHEMA Programming; GO --\tAufgabe P1.1 -- --\tErstellen Sie eine gespeicherte Prozedur &quot;sp_FilterMitarbeiter1&quot;, --\tdie eine Liste der Mitarbeiter ausgibt, die in einer bestimmten --\tAbteilung arbeiten. Die Prozedur soll den Parameter @Abteilung --\tf�r die Bezeichnung der Abteilung entgegennehmen. -- --\tBeispiel: EXEC sp_FilterMitarbeiter1 'Einkauf' -- --\tid vorname nachname abt_id bezeichnung --\t----- ------- -------- ------ ----------- --\t9912 Klaus Wolf a4 Einkauf --\t12121 Ursula Richter a4 Einkauf --\t20204 Dirk Fuchs a4 Einkauf --\t22222 Anke Vogel a4 Einkauf CREATE OR ALTER PROCEDURE Programming.sp_FilterMitarbeiter1 @Abteilung varchar(20) AS BEGIN SELECT m.id, m.vorname, m.nachname, m.abt_id, a.bezeichnung FROM Mitarbeiter m JOIN Abteilung a ON m.abt_id = a.id WHERE a.bezeichnung = @Abteilung END GO Programming.sp_FilterMitarbeiter1 'Einkauf' GO --\tAufgabe P1.2 -- --\tVer�ndern Sie die Prozedur aus Aufgabe P1.1: --\tWenn keine Mitarbeiter zur angeforderten Abteilung gefunden --\twerden, soll der Text 'Abteilung ung�ltig: &lt;Bezeichnung&gt;' --\tangezeigt werden. Entweder im Meldungs-Fenster oder im Grid. -- --\tBeispiel: EXEC sp_FilterMitarbeiter1 'Produktion' -- --\tFehlermeldung --\t------------------------------ --\tAbteilung ung�ltig: Produktion CREATE OR ALTER PROCEDURE Programming.sp_FilterMitarbeiter2 @Abteilung varchar(20) AS IF @Abteilung NOT IN (SELECT bezeichnung FROM Abteilung) BEGIN PRINT 'Abteilung ung�ltig: ' + @Abteilung; END ELSE BEGIN SELECT m.id, m.vorname, m.nachname, m.abt_id, a.bezeichnung FROM Mitarbeiter m JOIN Abteilung a ON m.abt_id = a.id WHERE a.bezeichnung = @Abteilung END GO Programming.sp_FilterMitarbeiter2 'Produktion' GO -- Alternative L�sung CREATE OR ALTER PROCEDURE Programming.sp_FilterMitarbeiter3 @Abteilung varchar(20) AS IF EXISTS (SELECT m.abt_id FROM Mitarbeiter m JOIN Abteilung a ON m.abt_id = a.id WHERE a.bezeichnung = @Abteilung) BEGIN SELECT m.id, m.vorname, m.nachname, m.abt_id, a.bezeichnung FROM Mitarbeiter m JOIN Abteilung a ON m.abt_id = a.id WHERE a.bezeichnung = @Abteilung END ELSE BEGIN PRINT 'Abteilung ung�ltig: ' + @Abteilung; END GO Programming.sp_FilterMitarbeiter3 'Produktion' GO ","keywords":"","version":"Next"},{"title":"Programmierung II","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/ProjectDB/projektdbp1-programmierung2","content":"Programmierung II --\tNutzen Sie die Datenbank ProjektDB zur --\tL�sung dieser Aufgabe USE ProjektDB; GO CREATE SCHEMA Programming; GO --\tAufgabe P1.3 -- --\tErstellen Sie eine gespeicherte Prozedur &quot;sp_FilterMitarbeiter2&quot;, --\tdie eine Liste der Mitarbeiter ausgibt, die in einer bestimmten --\tGehalts-Range liegen. Die Prozedur soll die beiden Parameter --\t@MinGehalt und @MaxGehalt entgegennehmen. Wenn es keine passenden --\tMitarbeiter gibt, soll eine entsprechende Meldung ausgegeben werden. CREATE OR ALTER PROCEDURE Programming.sp_FilterMitarbeiter4 @MinGehalt INT, @MaxGehalt INT AS BEGIN IF EXISTS (SELECT mit_id FROM Gehalt WHERE gehalt BETWEEN @MinGehalt AND @MaxGehalt) SELECT m.nachname, m.vorname, g.gehalt FROM Mitarbeiter m JOIN Gehalt g ON g.mit_id = m.id WHERE g.gehalt BETWEEN @MinGehalt AND @MaxGehalt ELSE PRINT 'Keine Mitarbeiter mit einem Gehalt von ' + CAST(@MinGehalt AS VARCHAR(10)) + ' bis ' + CAST(@MaxGehalt AS VARCHAR(10)) + ' gefunden.' END GO Programming.sp_FilterMitarbeiter4 '10000', '50000' GO --\tAufgabe P1.4 -- --\tErstellen Sie eine Prozedur, die ein neues Projekt anlegt. Der --\tProzedur sollen die Werte f�r die Projekt-Id, die Bezeichnung --\tund die Mittel �bergeben werden. Das Projekt darf nur angelegt --\twerden, wenn es keinen Konflikt bei Id und Bezeichnung gibt. CREATE OR ALTER PROCEDURE Programming.sp_FilterMitarbeiter5 @id char(2), @bezeichnung varchar(20), @mittel money AS BEGIN IF NOT EXISTS (SELECT * FROM Projekt WHERE @bezeichnung = bezeichnung OR @id = id) INSERT INTO Projekt (id, bezeichnung, mittel) VALUES (@id, @bezeichnung, @mittel) ELSE PRINT 'Ung�ltige Parameter: id oder Bezeichnunt schon existent!' END GO Programming.sp_FilterMitarbeiter5 'p7', 'Pluto', '85000' GO -- Alternative L�sung CREATE OR ALTER PROCEDURE Programming.sp_FilterMitarbeiter5 @id char(2), @bezeichnung varchar(20), @mittel money AS BEGIN IF @id IN (SELECT id FROM Projekt) PRINT 'Invalid Parameter: id existiert bereits' ELSE IF @bezeichnung IN (SELECT bezeichnung FROM Projekt) PRINT 'Invalid Parameter: bezeichnung existiert bereits' ELSE INSERT INTO Projekt (id, bezeichnung, mittel) VALUES (@id, @bezeichnung, @mittel) END GO Programming.sp_FilterMitarbeiter5 'p1', 'Galactica', '85000' GO SELECT * FROM Projekt; GO -- multiple procedure l�sung / funktioniert nicht CREATE OR ALTER PROCEDURE Programming.sp_ValidateProjekt @id char(2), @bezeichnung varchar(20) AS BEGIN IF @id IN (SELECT id FROM Projekt) PRINT 'Invalid Parameter: id existiert bereits' ELSE IF @bezeichnung IN (SELECT bezeichnung FROM Projekt) PRINT 'Invalid Parameter: bezeichnung existiert bereits' ELSE RETURN '0' END GO CREATE OR ALTER PROCEDURE Programming.sp_InsertProjekt @id char(2), @bezeichnung varchar(20), @mittel money AS BEGIN DECLARE @error varchar(50) EXEC Programming.sp_ValidateProjekt @id, @bezeichnung = @error; IF @error = '0' INSERT INTO Projekt (id, bezeichnung, mittel) VALUES (@id, @bezeichnung, @mittel); ELSE Print @error; END GO Programming.sp_InsertProjekt 'p7', 'Galactica', '45000' GO SELECT * FROM Projekt ","keywords":"","version":"Next"},{"title":"Programmierung III","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/ProjectDB/projektdbp1-programmierung3","content":"Programmierung III --\tNutzen Sie die Datenbank ProjektDB zur --\tLösung dieser Aufgabe USE ProjektDB; GO --\tAufgabe P1.5 -- --\tSchreiben Sie ein User Defined Function, die Ihnen die Summe --\taller Gehälter zurückgibt. CREATE OR ALTER FUNCTION Programming.udf_SumGehälter() RETURNS Money AS BEGIN RETURN (SELECT SUM(gehalt) FROM Gehalt) END GO PRINT Programming.udf_SumGehälter(); GO --\tAufgabe P1.6 -- --\tErweitern Sie die Function aus Aufgabe P1.5, so dass man der --\tFunction eine Abteilungs-ID übergeben kann, zu der die Summe --\tder Gehälter zurückgegeben wird. CREATE OR ALTER FUNCTION Programming.udf_SumGehälter (@abt_id char(2)) RETURNS Money AS BEGIN RETURN (SELECT SUM(gehalt) FROM Gehalt g JOIN Mitarbeiter m ON g.mit_id = m.id WHERE @abt_id = m.abt_id) END GO PRINT Programming.udf_SumGehälter('a1'); GO SELECT * FROM Mitarbeiter; GO --\tAufgabe P1.7 -- --\tSchreiben Sie eine User Defined Function, die Ihnen zu einem --\tübergebenen Datum die lange Version zurückgibt. -- --\tBeispiel:\t13.01.2025\t=&gt;\tMontag, der 13. Januar 2025 CREATE OR ALTER FUNCTION Programming.udf_ConvertDate (@datum DATE) RETURNS VARCHAR(50) AS BEGIN RETURN CONCAT(DATENAME(dw, @datum), ', der ', DATENAME(day, @datum), '. ', DATENAME(month, @datum),' ', YEAR(@datum)) END GO PRINT Programming.udf_ConvertDate('13.01.2025') ","keywords":"","version":"Next"},{"title":"SELF JOIN","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/ProjectDB/projektdb07-selfjoin","content":"SELF JOIN -- Nutzen Sie die Datenbank ProjektDB, -- um die folgenden Aufgaben zu lösen: USE ProjektDB; -- Aufgabe 7.1 -- -- Finden Sie alle Abteilungen, an deren Standorten -- sich weitere Abteilungen befinden. Geben Sie jeweils -- die Ids, Namen und Städte der Abteilungen aus. -- -- id bezeichnung stadt id bezeichnung stadt -- a1 Beratung München a1 Beratung München -- a2 Diagnose München a1 Beratung München -- a4 Einkauf München a1 Beratung München -- a1 Beratung München a2 Diagnose München -- a2 Diagnose München a2 Diagnose München -- a4 Einkauf München a2 Diagnose München -- ... -- (11 Zeilen) SELECT * FROM Abteilung a1 INNER JOIN Abteilung a2 ON a1.stadt = a2.stadt -- Aufgabe 7.2 -- -- Überarbeiten Sie die Abfrage aus Aufgabe 7.1. -- Diesmal sollen nur Zeilen ins Ergebnis übernommen -- werden, bei denen die Abteilungen sich unterscheiden. -- -- id bezeichnung stadt id bezeichnung stadt -- a1 Beratung München a2 Diagnose München -- a1 Beratung München a4 Einkauf München -- a2 Diagnose München a1 Beratung München -- a2 Diagnose München a4 Einkauf München -- a4 Einkauf München a1 Beratung München -- a4 Einkauf München a2 Diagnose München SELECT * FROM Abteilung a1 INNER JOIN Abteilung a2 ON a1.stadt = a2.stadt WHERE a1.id &lt;&gt; a2.id; -- Aufgabe 7.3 -- -- Überarbeiten Sie die Abfrage aus Aufgabe 7.2. -- Diesmal soll jede Kombination nur einmal angezeigt -- werden. D.h. A-B ist das gleiche wie B-A. -- -- id bezeichnung stadt id bezeichnung stadt -- a2 Diagnose München a1 Beratung München -- a4 Einkauf München a1 Beratung München -- a4 Einkauf München a2 Diagnose München SELECT * FROM Abteilung a1 INNER JOIN Abteilung a2 ON a1.stadt = a2.stadt AND a1.bezeichnung &lt;&gt; a2.bezeichnung WHERE a1.id &lt; a2.id -- Aufgabe 7.4 -- -- Finden Sie heraus, ob es Mitarbeiter gibt, die einen -- Kollegen oder eine Kollegin aus derselben Abteilung -- in ihrem Wohnort haben (Stichwort Fahrgemeinschaft). -- -- id abt_id nachname stadt -- 5765 a3 Schäfer Landshut -- 10102 a3 Huber Landshut -- 12121 a4 Richter München -- 22222 a4 Vogel München SELECT m1.* FROM Mitarbeiter m1 INNER JOIN Mitarbeiter m2 ON m1.stadt = m2.stadt WHERE m1.id &lt;&gt; m2.id AND m1.abt_id = m2.abt_id -- Aufgabe 7.5 -- -- Geben Sie die Mitarbeiter-Id, die Projektnummer und -- die Aufgabe der Mitarbeiter aus, die im gleichen -- Projekt die gleiche Aufgabe ausführen. Sortieren Sie -- die Ausgabe ggf. sinnvoll. -- -- mit_id pro_id aufgabe -- 25348 p2 Sachbearbeiter -- 28559 p2 Sachbearbeiter -- 20204 p4 Sachbearbeiter -- 27365 p4 Sachbearbeiter SELECT a1.* FROM Arbeit a1 INNER JOIN Arbeit a2 ON a1.pro_id = a2.pro_id AND a1.aufgabe = a2.aufgabe WHERE a1.mit_id &lt;&gt; a2.mit_id ORDER BY pro_id DESC ","keywords":"","version":"Next"},{"title":"Datentypen","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/SQL/Datentypen","content":"","keywords":"","version":"Next"},{"title":"SQL Server​","type":1,"pageTitle":"Datentypen","url":"/my-documentation/docs/DB/SQL/Datentypen#sql-server","content":" -- Numerische Datentypen: DECLARE @intExample INT = 123; -- Ganze Zahlen (4 Byte) DECLARE @bigIntExample BIGINT = 1234567890123; -- Große ganze Zahlen (8 Byte) DECLARE @smallIntExample SMALLINT = 12345; -- Kleinere ganze Zahlen (2 Byte) DECLARE @tinyIntExample TINYINT = 255; -- Sehr kleine ganze Zahlen (1 Byte) DECLARE @decimalExample DECIMAL(10,2) = 12345.67; -- Exakte Werte, (Präzision, Skala) DECLARE @floatExample FLOAT = 123.456; -- Gleitkommazahlen (approx.) -- Geldwerte: DECLARE @moneyExample MONEY = 12345.67; -- Währungswerte DECLARE @smallMoneyExample SMALLMONEY = 1234.56; -- Kleinere Geldwerte -- Zeichenketten: DECLARE @charExample CHAR(10) = 'Hallo'; -- Feste Länge DECLARE @varCharExample VARCHAR(50) = 'Hallo Welt'; -- Variable Länge DECLARE @nVarCharExample NVARCHAR(50) = N'Hallo Unicode'; -- Unicode, variable Länge DECLARE @textExample VARCHAR(MAX) = 'Langer Text...'; -- Für große Texte (statt TEXT) -- Datum und Zeit: DECLARE @dateExample DATE = '2025-02-13'; -- Nur Datum DECLARE @timeExample TIME = '14:30:00'; -- Nur Zeit DECLARE @dateTimeExample DATETIME = '2025-02-13 14:30:00'; -- Datum + Zeit -- Boolean: DECLARE @bitExample BIT = 1; -- 0 oder 1 (false/true) -- Binäre Datentypen: DECLARE @binaryExample BINARY(4) = 0x12345678; -- Feste Binärlänge DECLARE @varBinaryExample VARBINARY(50) = 0x1234567890; -- Variable Binärlänge DECLARE @varBinaryMaxExample VARBINARY(MAX) = 0xABCDEF; -- Große Binärdaten -- Sonstige: DECLARE @guidExample UNIQUEIDENTIFIER = NEWID(); -- Globally Unique Identifier (GUID)  ","version":"Next","tagName":"h3"},{"title":"OUTER JOIN II","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/ProjectDB/projektdb08-outerjoin2","content":"OUTER JOIN II -- Nutzen Sie die Datenbank ProjektDB, -- um die folgenden Aufgaben zu lösen: -- Aufgabe 8.9 -- -- Zeigen Sie alle Mitarbeiter mit Id und nachname an -- und geben Sie dazu die vom Mitarbeiter getätigten -- Umsätze aus. Hat der Mitarbeiter noch keine Umsätze -- getätigt, soll in der Spalte Umsatz 0 angezeigt werden. -- -- id nachname umsatz -- 2581 Kaufmann 100000,00 -- 5765 Schäfer 0,00 -- 9031 Meier 0,00 -- 9912 Wolf 0,00 -- 10102 Huber 500,00 -- 10102 Huber 500,00 -- ... -- (36 Zeilen) SELECT m.id, m.nachname, ISNULL(u.umsatz, 0) as umsatz FROM Mitarbeiter m LEFT JOIN Umsatz u ON m.id = u.mit_id -- Aufgabe 8.10 -- -- Überarbeiten Sie die Abfrage aus Aufgabe 8.9. -- Zeigen Sie diesmal nur die Mitarbeiter an, die -- noch keine Umsätze getätigt haben. -- -- id nachname umsatz -- 5765 Schäfer 0,00 -- 9031 Meier 0,00 -- 9912 Wolf 0,00 -- 12121 Richter 0,00 -- 18316 Müller 0,00 -- 20204 Fuchs 0,00 -- ... -- (11 Zeilen) SELECT m.id, m.nachname, ISNULL(u.umsatz, 0) as umsatz FROM Mitarbeiter m LEFT JOIN Umsatz u ON m.id = u.mit_id WHERE u.umsatz IS NULL; -- Aufgabe 8.11 -- -- Überarbeiten Sie die Abfrage aus Aufgabe 8.9. -- Gruppieren Sie über die Mitarbeiter und geben -- Sie statt der einzelnen Umsätze die Summe der -- Umsätze für jeden Mitarbeiter aus. Fehlende -- Umsätze sollen weiterhin mit 0 angezeigt werden. -- -- id nachname umsatz -- 2581 Kaufmann 100000,00 -- 5765 Schäfer 0,00 -- 9031 Meier 0,00 -- 9912 Wolf 0,00 -- 10102 Huber 18000,00 -- 12121 Richter 0,00 -- ... -- (15 Zeilen) SELECT m.id, m.nachname, SUM(ISNULL(u.umsatz, 0)) as umsatz FROM Mitarbeiter m LEFT JOIN Umsatz u ON m.id = u.mit_id GROUP BY m.id, m.nachname; -- Aufgabe 8.12 -- -- Überarbeiten Sie die Abfrage aus Aufgabe 8.11. -- Zeigen Sie nur die Mitarbeiter an, die weniger -- als 100000 Umsatz erreicht haben. -- -- id nachname umsatz -- 5765 Schäfer 0,00 -- 9031 Meier 0,00 -- 9912 Wolf 0,00 -- 10102 Huber 18000,00 -- 12121 Richter 0,00 -- 17000 Krüger 20000,00 -- ... -- (13 Zeilen) SELECT m.id, m.nachname, SUM(ISNULL(u.umsatz, 0)) as umsatz FROM Mitarbeiter m LEFT JOIN Umsatz u ON m.id = u.mit_id GROUP BY m.id, m.nachname HAVING SUM(ISNULL(u.umsatz, 0)) &lt; 100000; -- Aufgabe 8.13 -- -- Zeigen Sie alle Mitarbeiter der Abteilung 'a2' mit -- Id und Nachname an und geben Sie dazu die vom Mitarbeiter -- getätigten Umsätze aus. Hat der Mitarbeiter noch keine -- Umsätze getätigt, soll in der Spalte Umsatz eine 0 -- angezeigt werden. -- -- id nachname umsatz -- 2581 Kaufmann 100000 -- 9031 Meier 0 -- 29346 Probst 0 SELECT m.id, m.nachname, ISNULL(SUM(u.umsatz), 0) as umsatz FROM Mitarbeiter m LEFT JOIN Umsatz u ON m.id = u.mit_id WHERE m.abt_id = 'a2' GROUP BY m.id, m.nachname; -- Aufgabe 8.14 -- -- Zeigen Sie alle Mitarbeiter mit Id und Nachname an -- und geben Sie dazu aus, an welchem Tag der Mitarbeiter -- zum ersten Mal einen Umsatz erzielt hat und wann er -- zum letzten Mal einen Umsatz erzielt hat. -- -- id nachname erster letzter -- 2581 Kaufmann 2019-05-01 2019-05-01 -- 5765 Schäfer NULL NULL -- 9031 Meier NULL NULL -- 9912 Wolf NULL NULL -- 10102 Huber 2018-10-01 2019-01-01 -- 12121 Richter NULL NULL -- ... -- (15 Zeilen) SELECT m.id, m.nachname, MIN(u.datum) as erster, MAX(u.datum) as letzter FROM Mitarbeiter m LEFT JOIN Umsatz u ON m.id = u.mit_id GROUP BY m.id, m.nachname; -- Aufgabe 8.15 -- -- Listen Sie alle Mitarbeiter mit m_nr und m_name -- auf. Zusätzlich soll das Projekt genannt werden, -- in dem der Mitarbeiter Projektleiter ist. Sollte -- es kein passendes Projekt geben, soll '- k. A. -' -- statt des Projektnamens angezeigt werden. -- -- id nachname projekt -- 2581 Kaufmann Merkur -- 5765 Schäfer Pluto -- 9031 Meier - k. A. - -- 9912 Wolf - k. A. - -- 10102 Huber Apollo -- 12121 Richter - k. A. - -- ... -- (15 Zeilen) SELECT m.id, m.nachname, ISNULL(p.bezeichnung, '- k. A. -') as projekt FROM Mitarbeiter m LEFT JOIN Arbeit a ON a.mit_id = m.id AND a.aufgabe = 'Projektleiter' LEFT JOIN Projekt p ON a.pro_id = p.id; SELECT m.id, m.nachname, ISNULL(p.bezeichnung, '- k. A. -') AS bezeichnung FROM Mitarbeiter m OUTER APPLY ( SELECT bezeichnung FROM Projekt p INNER JOIN Arbeit a ON a.pro_id = p.id WHERE a.aufgabe = 'Projektleiter' AND a.mit_id = m.id ) AS p; ","keywords":"","version":"Next"},{"title":"DML","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/SQL/DML","content":"","keywords":"","version":"Next"},{"title":"INSERT INTO​","type":1,"pageTitle":"DML","url":"/my-documentation/docs/DB/SQL/DML#insert-into","content":" Fügt neue Datensätze in eine Tabelle ein.  INSERT INTO customers (name, email, phone) VALUES ('Max Mustermann', 'max@example.com', '+491234567890');   ","version":"Next","tagName":"h3"},{"title":"INSERT INTO (Mehrere Zeilen)​","type":1,"pageTitle":"DML","url":"/my-documentation/docs/DB/SQL/DML#insert-into-mehrere-zeilen","content":" Fügt mehrere Datensätze auf einmal ein.  INSERT INTO customers (name, email, phone) VALUES ('Erika Musterfrau', 'erika@example.com', '+491234567891'), ('John Doe', 'john@example.com', '+491234567892');   ","version":"Next","tagName":"h3"},{"title":"INSERT INTO mit RETURNING​","type":1,"pageTitle":"DML","url":"/my-documentation/docs/DB/SQL/DML#insert-into-mit-returning","content":" Gibt eingefügte Werte direkt zurück (z. B. für IDs).  INSERT INTO customers (name, email, phone) VALUES ('Anna Schmidt', 'anna@example.com', '+491234567893') RETURNING id;   ","version":"Next","tagName":"h3"},{"title":"SELECT INTO​","type":1,"pageTitle":"DML","url":"/my-documentation/docs/DB/SQL/DML#select-into","content":" Mit SELECT INTO kannst Du eine neue Tabelle erstellen und gleichzeitig Daten aus einer bestehenden Tabelle in diese kopieren.Wichtig: Die neue Tabelle übernimmt keine Indizes, Schlüssel oder Constraints der Originaltabelle – diese müssen ggf. separat definiert werden.  SELECT * INTO Kunden_backup FROM Kunden;   ","version":"Next","tagName":"h3"},{"title":"SELECT INTO mit WHERE​","type":1,"pageTitle":"DML","url":"/my-documentation/docs/DB/SQL/DML#select-into-mit-where","content":" Die neue Tabelle HighValueOrders wird nur die angegebenen Spalten enthalten und nur die Bestellungen, bei denen Gesamtbetrag größer als 1000 ist.  SELECT BestellungID, KundenID, Bestelldatum, Gesamtbetrag INTO HighValueOrders FROM Bestellungen WHERE Gesamtbetrag &gt; 1000;   ","version":"Next","tagName":"h3"},{"title":"UPDATE​","type":1,"pageTitle":"DML","url":"/my-documentation/docs/DB/SQL/DML#update","content":" Ändert vorhandene Datensätze.  UPDATE customers SET phone = '+491234567899' WHERE email = 'max@example.com'; -- spezifische Zeile updaten UPDATE employees SET department = 'IT' WHERE id = 1; -- alle Zeilen updaten UPDATE employees SET department = 'General';   ","version":"Next","tagName":"h3"},{"title":"DELETE​","type":1,"pageTitle":"DML","url":"/my-documentation/docs/DB/SQL/DML#delete","content":" Löscht Datensätze aus einer Tabelle.  DELETE FROM customers WHERE email = 'max@example.com';   ","version":"Next","tagName":"h3"},{"title":"DELETE mit TRUNCATE Unterschied​","type":1,"pageTitle":"DML","url":"/my-documentation/docs/DB/SQL/DML#delete-mit-truncate-unterschied","content":" DELETE löscht bestimmte Datensätze, während TRUNCATE die gesamte Tabelle leert.  TRUNCATE TABLE customers;   DELETE\tTRUNCATEEine Filterung der zu löschenden Datensätze kann mit der WHERE-Klausel erfolgen.\tmit der WHERE-Klausel erfolgen. Eine Filterung der Datensätze ist nicht möglich, es werden immer alle Datensätze gelöscht. Bei großen Datenmengen sehr langsam, da sehr viele Daten ins Transaktionsprotokoll geschrieben werden.\tAuch bei großen Datenmengen schnell, da nur einige wenige Metadaten ins Transaktions- protokoll geschrieben werden. Eine evtl. vorhandene IDENTITY-Spalte wird nicht zurückgesetzt. Bei einem erneuten INSERT wird also einfach weiter gezählt.\tEine evtl. vorhandene IDENTITY-Spalte wird zurückgesetzt. Bei einem erneuten INSERT beginnen die Werte wieder am Anfang. Ist auch möglich, wenn auf die Tabelle ein Fremdschlüssel verweist, sofern keine Fremdschlüsselwerte von DELETE betroffen sind.\tIst in Tabellen, auf die ein Fremdschlüssel verweist, grundsätzlich nicht möglich, selbst wenn der Fremdschlüssel deaktiviert ist. ","version":"Next","tagName":"h3"},{"title":"Mengen-Operatoren","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/ProjectDB/projektdb10-mengenoperatoren","content":"Mengen-Operatoren -- Nutzen Sie die Datenbank ProjektDB, -- um die folgenden Aufgaben zu lösen: -- Aufgabe 10.1 -- -- Erstellen Sie eine Liste mit allen Städten, in -- denen entweder ein Mitarbeiter wohnt oder aber -- eine Abteilung ihren Sitz hat. Jede Stadt soll -- nur einmal angezeigt werden. -- -- stadt -- NULL -- Augsburg -- Fürth -- Heidenheim -- Landshut -- München -- ... -- (9 Zeilen) SELECT stadt FROM Mitarbeiter UNION SELECT stadt FROM Abteilung; -- Aufgabe 10.2 -- -- Erstellen Sie eine Liste mit allen Städten, in -- denen entweder Mitarbeiter wohnen oder Kunden -- Ihren Sitz haben. Doppelte Einträge sollen nicht -- weggefiltert werden. -- -- stadt -- NULL -- Landshut -- NULL -- Heidenheim -- Landshut -- München -- ... -- (21 Zeilen) SELECT stadt FROM Mitarbeiter UNION ALL SELECT stadt FROM Kunde; -- Aufgabe 10.3 -- -- Geben Sie die Liste aus Aufgabe 10.2 jetzt sortiert -- nach dem Städtenamen aus. -- -- stadt -- NULL -- NULL -- NULL -- Augsburg -- Baden_Baden -- Fürth -- ... -- (21 Zeilen) SELECT stadt FROM Mitarbeiter UNION ALL SELECT stadt FROM Kunde ORDER BY stadt; -- Aufgabe 10.4 -- -- Finden Sie die Ids der Mitarbeiter, die entweder -- der Abteilung a1 angehören oder nach dem 1.1.2019 -- in ihr Projekt eingetreten sind. Die Ids sollen -- aufsteigend sortiert ausgegeben werden. -- -- id -- 2581 -- 9031 -- 9912 -- 17000 -- 18316 -- 28559 -- 29346 SELECT id FROM Mitarbeiter m JOIN Arbeit a ON m.id = a.mit_id WHERE abt_id = 'a1' OR a.einst_dat &gt; '20190101'; -- Aufgabe 10.5 -- -- Die Wohnorte der Mitarbeiter und die Standorte -- der Abteilungen sollen ausgewertet werden: -- -- a) Zeigen Sie, an welchen Orten entweder -- Mitarbeiter wohnen oder Abteilungen sind. -- b) Zeigen Sie, an welchen Orten sowohl Mitarbeiter -- als auch Abteilungen sind. -- c) Zeigen Sie, an welchen Orten Mitarbeiter -- wohnen, aber keine Abteilungen sind -- d) Zeigen Sie, an welchen Orten Abteilungen sind, -- aber keine Mitarbeiter wohnen. -- -- a) stadt b) stadt c) stadt d) stadt -- NULL München NULL Stuttgart -- Augsburg Ulm Augsburg -- Fürth Fürth -- Heidenheim Heidenheim -- Landshut Landshut -- München Rosenheim -- Rosenheim -- Stuttgart -- Ulm -- a) SELECT stadt FROM Mitarbeiter UNION SELECT stadt FROM Abteilung; -- b) SELECT stadt FROM Mitarbeiter INTERSECT SELECT stadt FROM Abteilung; -- c) SELECT stadt FROM Mitarbeiter EXCEPT SELECT stadt FROM Abteilung; -- d) SELECT stadt FROM Abteilung EXCEPT SELECT stadt FROM Mitarbeiter; -- Aufgabe 10.6 -- -- Erstellen Sie eine Liste der Mitarbeiter, die -- sowohl im Projekt &quot;p1&quot; als auch im Projekt &quot;p3&quot; -- arbeiten. -- -- vorname nachname -- Petra Huber -- Rainer Meier SELECT vorname, nachname FROM Mitarbeiter m JOIN Arbeit a ON m.id = a.mit_id WHERE a.pro_id = 'p1' INTERSECT SELECT vorname, nachname FROM Mitarbeiter m JOIN Arbeit a ON m.id = a.mit_id WHERE a.pro_id = 'p3'; -- Aufgabe 10.7 -- -- Erstellen Sie eine Liste der Mitarbeiter, die in den -- Projekten &quot;p4&quot; und &quot;p5&quot; arbeiten und weniger als 4000 -- verdienen. -- a) Nutzen Sie den INTERSECT-Operator -- b) Nutzen Sie den EXCEPT-Operator -- -- vorname nachname -- Dirk Fuchs -- Klaus Wolf -- Lena Albrecht -- Ursula Richter -- a) SELECT vorname, nachname FROM Mitarbeiter m JOIN Arbeit a ON m.id = a.mit_id WHERE a.pro_id = 'p4' OR a.pro_id = 'p5' INTERSECT SELECT vorname, nachname FROM Mitarbeiter m JOIN Gehalt g ON g.mit_id = m.id WHERE gehalt &lt; 4000; -- b) SELECT vorname, nachname FROM Mitarbeiter m JOIN Arbeit a ON m.id = a.mit_id WHERE a.pro_id = 'p4' OR a.pro_id = 'p5' EXCEPT SELECT vorname, nachname FROM Mitarbeiter m JOIN Gehalt g ON g.mit_id = m.id WHERE gehalt &gt;= 4000; -- Aufgabe 10.8 -- -- Erstellen Sie eine Liste aller Mitarbeiter, kombiniert -- mit einer Liste aller Kunden. Geben Sie Firma bzw. Namen -- und die Stadt aus. -- -- firma stadt -- 100% Sonderzeichen AG Baden_Baden -- Andreas Probst Augsburg -- Anke Vogel München -- Brigitte Kaufmann NULL -- Dirk Fuchs Fürth -- Finanzamt Ulm Fürth -- ... -- (21 Zeilen) SELECT firma, stadt FROM Kunde UNION SELECT CONCAT(vorname, ' ', nachname), stadt FROM Mitarbeiter; -- Aufgabe 10.9 -- -- Erweitern Sie die Abfrage aus Aufgabe 10.8 und geben -- Sie auch noch die Abteilungen mit Bezeichnung und -- Stadt in der Liste aus. -- -- bezeichnung stadt -- 100% Sonderzeichen AG Baden_Baden -- Andreas Probst Augsburg -- Anke Vogel München -- Beratung München -- Brigitte Kaufmann NULL -- Diagnose München -- ... -- (26 Zeilen) SELECT firma AS bezeichnung, stadt FROM Kunde UNION SELECT CONCAT(vorname, ' ', nachname), stadt FROM Mitarbeiter UNION SELECT bezeichnung, stadt FROM Abteilung; -- Aufgabe 10.10 -- -- Um die Übersichtlichkeit zu erhöhen, soll in der -- Liste markiert werden, ob es sich um eine Abteilung, -- einen Mitarbeiter oder einen Kunden handelt. -- -- bezeichnung stadt kategorie -- 100% Sonderzeichen AG Baden_Baden Kunde -- Andreas Probst Augsburg Mitarbeiter -- Anke Vogel München Mitarbeiter -- Beratung München Abteilung -- Brigitte Kaufmann NULL Mitarbeiter -- Diagnose München Abteilung -- ... -- (26 Zeilen) SELECT firma AS bezeichnung, stadt, 'Kunde' AS kategorie FROM Kunde UNION SELECT CONCAT(vorname, ' ', nachname), stadt, 'Mitarbeiter' FROM Mitarbeiter UNION SELECT bezeichnung, stadt, 'Abteilung' ","keywords":"","version":"Next"},{"title":"Faktorialberechnung","type":0,"sectionRef":"#","url":"/my-documentation/docs/DSA/Rekursiv/Faktorialberechnung","content":"Faktorialberechnung Pseudocode Funktion Faktorial(n) IF n := 0 THEN Ergebnis := 0 ELSE IF n := 1 THEN Ergebnis := 1 ELSE Ergebnis := n * Faktorial(n - 1) Python def faktorial(n): if n == 0: return 0 elif n == 1: return 1 else: return n * faktorial(n - 1) ","keywords":"","version":"Next"},{"title":"Fibonacci-Zahlen","type":0,"sectionRef":"#","url":"/my-documentation/docs/DSA/Rekursiv/Fibonacci-Zahlen","content":"Fibonacci-Zahlen Pseudocode Funktion Fibonacci(n) IF n &lt;= 0 THEN Ergebnis := 0 ELSE IF n = 1 THEN Ergebnis := 1 ELSE Ergebnis := Fibonacci(n - 1) + Fibonacci(n - 2) Python def fibonacci(n): if n &lt;= 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2) ","keywords":"","version":"Next"},{"title":"DDL","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/SQL/DDL","content":"","keywords":"","version":"Next"},{"title":"CREATE DATABASE​","type":1,"pageTitle":"DDL","url":"/my-documentation/docs/DB/SQL/DDL#create-database","content":" CREATE DATABASE shop_db;   ","version":"Next","tagName":"h2"},{"title":"CREATE TABLE​","type":1,"pageTitle":"DDL","url":"/my-documentation/docs/DB/SQL/DDL#create-table","content":" CREATE TABLE customers ( id SERIAL PRIMARY KEY, name VARCHAR(100) NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP );   Beispiel mit Constraints CREATE TABLE Projekt ( id CHAR(2) NOT NULL, bezeichnung VARCHAR(30)\tNOT NULL, mittel MONEY\tNULL, kd_id INT NULL, CONSTRAINT pk_projekt PRIMARY KEY (id), CONSTRAINT fk_projekt_kunde FOREIGN KEY (kd_id) REFERENCES Kunde (id) ); GO   ","version":"Next","tagName":"h2"},{"title":"ALTER TABLE​","type":1,"pageTitle":"DDL","url":"/my-documentation/docs/DB/SQL/DDL#alter-table","content":" Ändert eine bestehende Tabelle (z. B. Spalte hinzufügen).  ALTER TABLE table_name ADD column_name datatype; ALTER TABLE table_name DROP COLUMN column_name; ALTER TABLE table_name MODIFY column_definition; ALTER TABLE table_name DROP CONSTRAINT key_name; ALTER TABLE ADD CONSTRAINT key_name FOREIGN KEY column_name REFERENCES ref_table_name (ref_column_name) ON DELETE CASCADE;   Beispiele -- Spalte hinzufügen ALTER TABLE Customers ADD Email varchar(255); -- Spalte löschen ALTER TABLE Customers DROP COLUMN Email; -- Spalte verändern ALTER TABLE employees MODIFY name VARCHAR(100);   ","version":"Next","tagName":"h2"},{"title":"DROP TABLE​","type":1,"pageTitle":"DDL","url":"/my-documentation/docs/DB/SQL/DDL#drop-table","content":" -- Datenbank löschen DROP DATABASE databasename IF EXISTS -- Tabelle löschen DROP TABLE tablename IF EXISTS   ","version":"Next","tagName":"h2"},{"title":"TRUNCATE TABLE​","type":1,"pageTitle":"DDL","url":"/my-documentation/docs/DB/SQL/DDL#truncate-table","content":" Löscht alle Daten aus einer Tabelle, behält aber die Struktur bei. Im Gegensatz zu DELETE ist TRUNCATE schneller und setzt Zählerwerte zurück.  TRUNCATE TABLE customers;   ","version":"Next","tagName":"h2"},{"title":"CREATE INDEX​","type":1,"pageTitle":"DDL","url":"/my-documentation/docs/DB/SQL/DDL#create-index","content":" Erstellt einen Index zur Optimierung der Abfragen.  CREATE INDEX idx_customers_email ON customers(email);   ","version":"Next","tagName":"h2"},{"title":"DROP INDEX​","type":1,"pageTitle":"DDL","url":"/my-documentation/docs/DB/SQL/DDL#drop-index","content":" Löscht einen bestehenden Index.  DROP INDEX IF EXISTS idx_customers_email;   ","version":"Next","tagName":"h2"},{"title":"CREATE VIEW​","type":1,"pageTitle":"DDL","url":"/my-documentation/docs/DB/SQL/DDL#create-view","content":" Erstellt eine virtuelle Tabelle basierend auf einer Abfrage.  CREATE VIEW active_customers AS SELECT id, name, email FROM customers WHERE active = TRUE;   ","version":"Next","tagName":"h2"},{"title":"DROP VIEW​","type":1,"pageTitle":"DDL","url":"/my-documentation/docs/DB/SQL/DDL#drop-view","content":" Löscht eine bestehende View.  DROP VIEW IF EXISTS active_customers;   ","version":"Next","tagName":"h2"},{"title":"CREATE SCHEMA​","type":1,"pageTitle":"DDL","url":"/my-documentation/docs/DB/SQL/DDL#create-schema","content":" Erstellt ein neues Schema zur Strukturierung von Datenbanken.  CREATE SCHEMA sales;   ","version":"Next","tagName":"h2"},{"title":"DROP SCHEMA​","type":1,"pageTitle":"DDL","url":"/my-documentation/docs/DB/SQL/DDL#drop-schema","content":" Löscht ein Schema und optional alle enthaltenen Objekte.  DROP SCHEMA IF EXISTS sales CASCADE;  ","version":"Next","tagName":"h2"},{"title":"Struktogramme","type":0,"sectionRef":"#","url":"/my-documentation/docs/DSA/Struktogramme","content":"Struktogramme","keywords":"","version":"Next"},{"title":"Big-O-Notation","type":0,"sectionRef":"#","url":"/my-documentation/docs/DSA/Big-O-Notation","content":"","keywords":"","version":"Next"},{"title":"Gängige Notationen:​","type":1,"pageTitle":"Big-O-Notation","url":"/my-documentation/docs/DSA/Big-O-Notation#gängige-notationen","content":" Konstant: O(1)Linear: O(n)Logarithmisch: O(log n)Quadratisch: O(n2)Exponential: O(2n)Faktorial: O(n!)    ","version":"Next","tagName":"h3"},{"title":"Links​","type":1,"pageTitle":"Big-O-Notation","url":"/my-documentation/docs/DSA/Big-O-Notation#links","content":" GfG Big-O-Notation Tutorial ENG BroCode [YT] DE develpbär [YT] ","version":"Next","tagName":"h3"},{"title":"Prinzipien","type":0,"sectionRef":"#","url":"/my-documentation/docs/DSA/Rekursiv/Prinzipien","content":"","keywords":"","version":"Next"},{"title":"Prinzipien der Rekursiven Programmierung​","type":1,"pageTitle":"Prinzipien","url":"/my-documentation/docs/DSA/Rekursiv/Prinzipien#prinzipien-der-rekursiven-programmierung","content":" Basisfall (Terminationsbedingung) Jede rekursive Funktion muss einen Basisfall haben, der die Rekursion stoppt. Dieser Fall gibt das Ergebnis direkt zurück, ohne einen weiteren Funktionsaufruf. Rekursiver Fall Hier wird das Problem in kleinere Teilprobleme zerlegt, die sich der ursprünglichen Struktur des Problems ähneln. Die Funktion ruft sich selbst mit diesen kleineren Teilproblemen auf. Zerlegung und Wiederzusammensetzung Das Problem wird in kleinere, einfachere Teilprobleme zerlegt. Nach der Lösung der Teilprobleme werden die Teilergebnisse kombiniert, um die Lösung des ursprünglichen Problems zu bilden. ","version":"Next","tagName":"h3"},{"title":"Insertion-Sort","type":0,"sectionRef":"#","url":"/my-documentation/docs/DSA/Sortieren/Insertion-sort","content":"Insertion-Sort einfach, stabileffizient bei kleinen oder vorsortierten Datenmengenvgl. Spielkarten sortierenLaufzeitkomplexität: Best: O(n)Average: O(n²)Worst: O(n²) Pseudocode Funktion InsertionSort(array) FOR i := 1 bis Länge(array) DO temp := array[i] j := i - 1 WHILE j &gt;= 0 und array[j] &gt; temp DO array[j + 1] := array[j] j := j - 1 array[j+1] = temp Ergebnis := array PythonC# def insertion_sort(array) for i in range(1,len(array)): temp = array[i] j = i - 1 while (j &gt;= 0 and array[j] &gt; temp): array[j + 1] = array[j] j -= 1 array[j+1] = temp return array Links GfG: Insertion Sort Algorithm BroCode [YT]: Insertion-Sort visualgo - sorting","keywords":"","version":"Next"},{"title":"Bubblesort","type":0,"sectionRef":"#","url":"/my-documentation/docs/DSA/Sortieren/Bubblesort","content":"Bubblesort in-Place Verfahren: für die Sortierung wird kein weiterer Speicher benötigtdas Maximum steigt wie eine Luftblase nach obenstabiler Sortieralgorithmuswenig effizient, daher eher von akademischem InteresseLaufzeitkomplexität: Best: O(n)Average: O(n²)Worst: O(n²) Pseudocode Funktion BubbleSort(array) FOR i := 1 bis Länge[array] DO FOR j := 0 bis Länge[array] - 1 DO IF array[j] &gt; array[j + 1] THEN vertausche array[j] &lt;-&gt; array[j + 1] Ergebnis := array PythonC# def bubblesort(array): for i in range(1,len(array)): for j in range(0,len(array)-1): if array[j] &gt; array[j+1]: temp = array[j] array[j] = array[j+1] array[j+1] = temp return array Links GfG: Bubble Sort Algorithm BroCode [YT]: Bubblesort visualgo - sorting","keywords":"","version":"Next"},{"title":"Programmierung V","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/ProjectDB/projektdbp2-programmierung2","content":"Programmierung V USE ProjektDB; GO --\tNutzen Sie die Datenbank ProjektDB zur --\tLösung dieser Aufgabe --\tAufgabe P2.3 -- --\tSchreiben Sie einen zusätzlichen Trigger für die Tabelle --\tMitarbeiter, der bei einem DELETE die gelöschten Datensätze --\tin der Tabelle MitarbeiterHistorie mit den entsprechenden --\tZusatz-Informationen anlegt. CREATE OR ALTER TRIGGER tr_MitarbeiterDelete ON Mitarbeiter AFTER DELETE AS BEGIN INSERT INTO MitarbeiterHistorie SELECT *, 'DELETE', GETDATE(), SYSTEM_USER FROM deleted; END; GO SELECT * FROM Mitarbeiter DELETE FROM Arbeit WHERE mit_id = (SELECT m.id FROM Mitarbeiter m JOIN Arbeit a ON a.mit_id = m.id WHERE m.nachname = 'Probst') DELETE FROM Mitarbeiter WHERE nachname = 'Probst' --\tAufgabe P2.4 -- --\tErweitern Sie die Tabelle Mitarbeiter um zwei Felder: -- aenderUser VARCHAR(50), -- aenderDatum DATETIME --\tErstellen Sie dann einen Trigger, der nach einer Änderung --\tden User (SYSTEM_USER) und den aktuellen Zeitstempel in --\tden Datensatz schreibt. ALTER TABLE Mitarbeiter ADD aenderUser VARCHAR(50), aenderDatum DATETIME; GO CREATE OR ALTER TRIGGER tr_MitarbeiterAlter ON Mitarbeiter AFTER UPDATE AS BEGIN UPDATE Mitarbeiter SET aenderUser = SYSTEM_USER, aenderDatum = GETDATE() WHERE id = (SELECT id FROM inserted) END; GO SELECT * FROM Mitarbeiter; GO UPDATE Mitarbeiter SET vorname = 'Tina' WHERE vorname = 'Brigitte'; GO SELECT * FROM Gehalt; GO ALTER TABLE Mitarbeiter DROP COLUMN aenderUser, aenderDatum; GO --\tAufgabe P2.5 -- --\tErstellen Sie eine Log-Tabelle (Logging): -- id INT IDENTITY, -- mit_id INT, -- datumzeit DATETIME, -- benutzer VARCHAR(50), -- ereignis VARCHAR(100) --\tErstellen Sie dann einen Trigger für die Tabelle Gehalt, --\tder eine Änderung der Daten verhindert und statt dessen --\tden Versuch mit einem entsprechenden Eintrag in der --\tLog-Tabelle speichert. CREATE TABLE Logging ( id INT IDENTITY PRIMARY KEY, mit_id INT, datumzeit DATETIME, benutzer VARCHAR(50), ereignis VARCHAR(100) ); GO CREATE OR ALTER TRIGGER tr_GehaltLog ON Gehalt INSTEAD OF DELETE, INSERT, UPDATE AS BEGIN IF EXISTS (SELECt 1 FROM deleted) AND NOT EXISTS (SELECT 1 FROM inserted) INSERT INTO Logging SELECT mit_id, GETDATE(), SYSTEM_USER, 'DELETE' FROM deleted; ELSE IF EXISTS (SELECT 1 FROM inserted) AND NOT EXISTS (SELECT 1 FROM deleted) INSERT INTO Logging SELECT mit_id, GETDATE(), SYSTEM_USER, 'INSERT' FROM inserted; ELSE IF EXISTS (SELECT 1 FROM inserted) AND EXISTS (SELECT 1 FROM deleted) INSERT INTO Logging SELECT mit_id, GETDATE(), SYSTEM_USER, 'UPDATE' FROM deleted; END; GO SELECT * FROM Gehalt; GO UPDATE Gehalt SET gehalt = 7000 WHERE mit_id BETWEEN 3000 AND 10000; GO SELECT * FROM Logging; -- Klausur -- aufg. 1 SELECT id, nachname FROM Mitarbeiter WHERE abt_id = 'a2'; -- aufg. 2 SELECT mit_id, umsatz, datum FROM Umsatz WHERE umsatz &gt;= 5000; -- aufg. 3 SELECT nachname, vorname, id FROM Mitarbeiter WHERE vorname LIKE '%l_'; -- aufg. 4 SELECT vorname, nachname, stadt FROM Mitarbeiter WHERE vorname LIKE '[aeiuo]%[aeiuo]' -- aufg. 5 SELECT COUNT(mit_id) AS anzahl FROM Gehalt WHERE gehalt = 4000; -- aufg. 6 SELECT abt_id, COUNT(id) AS anzahl FROM Mitarbeiter GROUP BY abt_id; -- aufg. 7 SELECT stadt, COUNT(id) AS anzahl FROM Mitarbeiter GROUP BY stadt HAVING COUNT(id) = 1; -- aufg. 8 SELECT p.bezeichnung, m.abt_id, m.vorname, m.nachname FROM Mitarbeiter m JOIN Arbeit a ON m.id = a.mit_id JOIN Projekt p ON p.id = a.pro_id WHERE p.bezeichnung = 'Merkur' ORDER BY m.abt_id ASC, m.nachname DESC; -- aufg. 9 SELECT m.id, m.nachname, ISNULL(SUM(u.umsatz), 0) AS umsatz FROM Mitarbeiter m LEFT JOIN Umsatz u ON m.id = u.mit_id GROUP BY m.id, m.nachname; ","keywords":"","version":"Next"},{"title":"Collatz-Folge","type":0,"sectionRef":"#","url":"/my-documentation/docs/DSA/Verschiedenes/Collatz-Folge","content":"","keywords":"","version":"Next"},{"title":"Referenz​","type":1,"pageTitle":"Collatz-Folge","url":"/my-documentation/docs/DSA/Verschiedenes/Collatz-Folge#referenz","content":" Wikipedia: Collatz-Problem ","version":"Next","tagName":"h3"},{"title":"RAID Systeme","type":0,"sectionRef":"#","url":"/my-documentation/docs/Grundlagen/Hardware/Raid","content":"","keywords":"","version":"Next"},{"title":"Raid 0​","type":1,"pageTitle":"RAID Systeme","url":"/my-documentation/docs/Grundlagen/Hardware/Raid#raid-0","content":" kein &quot;echter&quot; RAIDVerteilung der Daten auf 2 Festplatten durch Stripingerhöhte Lese- und SchreibgeschwindigkeitKeine Redundanz, keine Datenausfallsicherheit    ","version":"Next","tagName":"h3"},{"title":"Raid 1​","type":1,"pageTitle":"RAID Systeme","url":"/my-documentation/docs/Grundlagen/Hardware/Raid#raid-1","content":" Mirroring spiegelt Daten auf mehrere FestplattenAlle Platten enthalten dieselben DatenAlle Platten bis auf eine dürfen ausfallen    ","version":"Next","tagName":"h3"},{"title":"Raid 5​","type":1,"pageTitle":"RAID Systeme","url":"/my-documentation/docs/Grundlagen/Hardware/Raid#raid-5","content":" Daten werden per Striping auf mehrere Platten verteiltAus der Gesamtheit der Daten werden Paritätsdaten gebildet die wiederum auf die Platten verteilt werdenMindestens 3 Festplatten: Solange 2 Intakt sind lassen sich die verlorenen Daten wieder herstellen    ","version":"Next","tagName":"h3"},{"title":"Raid 6​","type":1,"pageTitle":"RAID Systeme","url":"/my-documentation/docs/Grundlagen/Hardware/Raid#raid-6","content":" Verteilung der Daten auf mehrere Platten per StripingParitätsdaten werden doppelt erzeugtMindestens 4 Platten werden benötigtHohe Ausfallsicherheit (2 Platten dürfen ausfallen)  ","version":"Next","tagName":"h3"},{"title":"Raid 10​","type":1,"pageTitle":"RAID Systeme","url":"/my-documentation/docs/Grundlagen/Hardware/Raid#raid-10","content":" Kombination aus Raid 1 und Raid 0Letzte Zahl bildet das &quot;Dach&quot;Maximal 2 Platten dürfen ausfallen (aber die richtigen..)    ","version":"Next","tagName":"h3"},{"title":"Zusammenfassung​","type":1,"pageTitle":"RAID Systeme","url":"/my-documentation/docs/Grundlagen/Hardware/Raid#zusammenfassung","content":" Merkmal\tRAID 0\tRAID 1\tRAID 5\tRAID 6\tRAID 10\tRAID 61Mindestanzahl an Festplatten\t2\t2\t3\t4\t4\t6 Technik\tStriping\tMirroring\tStriping mit Parität\tStriping mit doppelter Parität\tMirroring + Striping\tMirroring + RAID 6 Netto-Kapazität\t100%\t50%\t(n-1)/n\t(n-2)/n\t50%\t(n-2)/2n Maximal mögliche Ausfälle\t0\t1 pro Spiegel\t1\t2\t1 pro Spiegel\t2 pro RAID 6-Array Kosten\tNiedrig\tHoch\tMittel\tHoch\tSehr hoch\tExtrem hoch Lesegeschwindigkeit\tSehr hoch\tHoch\tHoch\tHoch\tSehr hoch\tHoch Schreibgeschwindigkeit\tSehr hoch\tMittel\tMittel\tNiedrig\tHoch\tNiedrig  n = Anzahl der Festplatten im Verbund:  Zum Beispiel:  RAID 5 mit 4 Festplatten → Netto-Kapazität = 4−1 / 4 = 75%RAID 6 mit 6 Festplatten → Netto-Kapazität = 6−2 / 6 = 66,7%RAID 10 mit 4 Festplatten → Netto-Kapazität = 50%, weil immer zwei Festplatten gespiegelt werden ","version":"Next","tagName":"h3"},{"title":"Functions","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/SQL/Functions","content":"","keywords":"","version":"Next"},{"title":"Aggregat Funktionen​","type":1,"pageTitle":"Functions","url":"/my-documentation/docs/DB/SQL/Functions#aggregat-funktionen","content":" An aggregate function is a function that performs a calculation on a set of values, and returns a single value.  Aggregate functions are often used with the GROUP BY clause of the SELECT statement. The GROUP BY clause splits the result-set into groups of values and the aggregate function can be used to return a single value for each group.  The most commonly used SQL aggregate functions are:  MIN() - returns the smallest value within the selected column MAX() - returns the largest value within the selected column COUNT() - returns the number of rows in a set SUM() - returns the total sum of a numerical column AVG() - returns the average value of a numerical column  Aggregate functions ignore null values (except for COUNT()).  Regel Spalten, die in der SELECT-Klausel verwendet werden, müssen entweder als Gruppierungsmerkmal in die GROUP BY-Klausel aufgenommen werden, oder es muss eine Aggregatfunktion darauf angewendet werden.  -- Annahme: Tabelle 'Verkäufe' mit Spalte 'Betrag' SELECT SUM(Betrag) AS GesamtVerkauf, AVG(Betrag) AS Durchschnitt, MIN(Betrag) AS Minimal, MAX(Betrag) AS Maximal, COUNT(*) AS AnzahlVerkäufe FROM Verkäufe;   ","version":"Next","tagName":"h3"},{"title":"String Funktionen​","type":1,"pageTitle":"Functions","url":"/my-documentation/docs/DB/SQL/Functions#string-funktionen","content":" DECLARE @text NVARCHAR(50) = 'SQL Server Funktionen'; SELECT UPPER(@text) AS Großbuchstaben, -- Konvertiert zu Großbuchstaben LOWER(@text) AS Kleinbuchstaben, -- Konvertiert zu Kleinbuchstaben LEFT(@text, 3) AS Erste3Zeichen, -- Gibt die ersten 3 Zeichen zurück RIGHT(@text, 8) AS Letzte8Zeichen, -- Gibt die letzten 8 Zeichen zurück SUBSTRING(@text, 5, 6) AS Teilstring, -- Extrahiert 6 Zeichen ab Position 5 LEN(@text) AS Länge, -- Gibt die Länge des Strings zurück REPLACE(@text, 'Server', 'DB') AS Ersetzt, -- Ersetzt 'Server' mit 'DB' CONCAT(@text, ' Beispiel') AS Verkettet; -- Verkettet zwei Strings   ","version":"Next","tagName":"h3"},{"title":"Numerische Funktionen​","type":1,"pageTitle":"Functions","url":"/my-documentation/docs/DB/SQL/Functions#numerische-funktionen","content":" DECLARE @zahl DECIMAL(10,2) = -123.456; SELECT ABS(@zahl) AS Absolutwert, -- Absolutwert (Betrag) ROUND(@zahl, 1) AS Gerundet, -- Rundet auf 1 Dezimalstelle CEILING(@zahl) AS Aufrunden, -- Rundet auf die nächste ganze Zahl nach oben FLOOR(@zahl) AS Abrunden, -- Rundet auf die nächste ganze Zahl nach unten POWER(2, 3) AS Potenz; -- 2^3 = 8   ","version":"Next","tagName":"h3"},{"title":"Datumsfunktionen​","type":1,"pageTitle":"Functions","url":"/my-documentation/docs/DB/SQL/Functions#datumsfunktionen","content":" DECLARE @heute DATETIME = GETDATE(); DECLARE @heute2 DATETIME2 = SYSDATETIME(); SELECT @heute AS AktuellesDatum, -- Aktuelles Datum (DATETIME) via GETDATE() @heute2 AS AktuellesDatum2, -- Aktuelles Datum (DATETIME2) via SYSDATETIME() DATEADD(day, 7, @heute) AS DatumPlus7Tage, -- Fügt 7 Tage zum aktuellen Datum hinzu DATEDIFF(day, '2025-01-01', @heute) AS TageSeit, -- Differenz in Tagen seit dem 01.01.2025 FORMAT(@heute, 'dd.MM.yyyy') AS FormatiertesDatum, -- Formatiert das Datum im Format TT.MM.JJJJ DAY(@heute) AS Tag, -- Extrahiert den Tag aus dem Datum MONTH(@heute) AS Monat, -- Extrahiert den Monat aus dem Datum YEAR(@heute) AS Jahr, -- Extrahiert das Jahr aus dem Datum DATEPART(hour, @heute) AS Stunde, -- Extrahiert die Stunde aus dem Datum DATENAME(weekday, @heute) AS Wochentag; -- Gibt den Namen des Wochentags zurück   ","version":"Next","tagName":"h3"},{"title":"Konvertierungs- und Nullbehandlungsfunktionen​","type":1,"pageTitle":"Functions","url":"/my-documentation/docs/DB/SQL/Functions#konvertierungs--und-nullbehandlungsfunktionen","content":" DECLARE @wert VARCHAR(10) = '123'; SELECT CAST(@wert AS INT) AS UmgewandeltInInt, -- CAST zum Konvertieren CONVERT(DATE, '2025-02-13', 23) AS KonvertiertesDatum, -- CONVERT mit Stil (23: yyyy-mm-dd) ISNULL(NULL, 'Standardwert') AS ISNULL_Beispiel, -- Ersetzt NULL mit 'Standardwert' COALESCE(NULL, '', 'Erster Nicht-NULL') AS COALESCE_Beispiel; -- Gibt den ersten Nicht-NULL-Wert zurück  ","version":"Next","tagName":"h3"},{"title":"Aussagenlogik","type":0,"sectionRef":"#","url":"/my-documentation/docs/Grundlagen/IT-Mathe/Aussagenlogik","content":"","keywords":"","version":"Next"},{"title":"Elementaraussagen​","type":1,"pageTitle":"Aussagenlogik","url":"/my-documentation/docs/Grundlagen/IT-Mathe/Aussagenlogik#elementaraussagen","content":" Behauptung die entweder wahr oder falsch istKann verknüpft werdenEnthält keine VerknüpfungenKann ein Satz sein oder eine mathematische Aussage  KEINE Aussagen im Sinne der Logik:  MeinungsäußerungenFragestellungenUnvollständigVariablen  ","version":"Next","tagName":"h3"},{"title":"Verknüpfte Aussagen​","type":1,"pageTitle":"Aussagenlogik","url":"/my-documentation/docs/Grundlagen/IT-Mathe/Aussagenlogik#verknüpfte-aussagen","content":" Konjunktion - UND​  Wahr wenn beide Teilaussagen wahr sind  Disjunktion - ODER​  Wahr wenn mindestens eine Teilaussage wahr ist  Antivalenz - Enweder.. Oder..​  Wahr wenn genau eine Teilaussage wahr ist ","version":"Next","tagName":"h3"},{"title":"Binäre Suche","type":0,"sectionRef":"#","url":"/my-documentation/docs/DSA/Suchen/Binary-Search","content":"Binäre Suche Funktioniert nur mit einem vorsortierten ArrayLaufzeitkomplexität: O(log n) Pseudocode Funktion BinarySearch(Array, ziel) links := 0 rechts := Länge(array) - 1 WHILE links &lt;= rechts DO mitte := (links + rechts) / 2 IF array[mitte] = ziel THEN Ergebnis := mitte ELSE IF array[mitte] &lt; ziel THEN links := mitte + 1 ELSE rechts := mitte - 1 PythonC# def binary_search(array, ziel): links = 0 rechts = len(array) - 1 while links &lt;= rechts: mitte = (links + rechts) // 2 if array[mitte] == ziel: return mitte elif array[mitte] &lt; ziel: links = mitte + 1 else: rechts = mitte - 1 return -1 # ziel kein element von array Links GfG: Binary Search Algorithm BroCode [YT]: Binary Search","keywords":"","version":"Next"},{"title":"Transactions","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/SQL/Transactions","content":"","keywords":"","version":"Next"},{"title":"Was sind Transactions?​","type":1,"pageTitle":"Transactions","url":"/my-documentation/docs/DB/SQL/Transactions#was-sind-transactions","content":" Transactions sind atomare Operationseinheiten in einer Datenbank, die entweder ganz oder gar nicht ausgeführt werden (ACID-Prinzip).  ","version":"Next","tagName":"h2"},{"title":"ACID-Prinzip​","type":1,"pageTitle":"Transactions","url":"/my-documentation/docs/DB/SQL/Transactions#acid-prinzip","content":" Atomicity (Atomarität): Alles oder nichts wird ausgeführt.Consistency (Konsistenz): Daten bleiben in einem gültigen Zustand.Isolation (Isolation): Gleichzeitige Transaktionen beeinflussen sich nicht.Durability (Dauerhaftigkeit): Nach Bestätigung bleiben Änderungen erhalten.  ","version":"Next","tagName":"h2"},{"title":"SQL Transactions​","type":1,"pageTitle":"Transactions","url":"/my-documentation/docs/DB/SQL/Transactions#sql-transactions","content":" ","version":"Next","tagName":"h2"},{"title":"MySQL / PostgreSQL​","type":1,"pageTitle":"Transactions","url":"/my-documentation/docs/DB/SQL/Transactions#mysql--postgresql","content":" START TRANSACTION; UPDATE accounts SET balance = balance - 100 WHERE id = 1; UPDATE accounts SET balance = balance + 100 WHERE id = 2; COMMIT; -- Änderungen bestätigen   Rollback bei Fehler:  START TRANSACTION; UPDATE accounts SET balance = balance - 100 WHERE id = 1; -- Fehler tritt auf ROLLBACK; -- Änderungen verwerfen   ","version":"Next","tagName":"h3"},{"title":"SQLite​","type":1,"pageTitle":"Transactions","url":"/my-documentation/docs/DB/SQL/Transactions#sqlite","content":" BEGIN TRANSACTION; INSERT INTO orders (customer_id, total) VALUES (1, 50); SAVEPOINT sp1; UPDATE inventory SET stock = stock - 1 WHERE product_id = 10; ROLLBACK TO sp1; -- Rückgängig machen bis zum Savepoint COMMIT;   ","version":"Next","tagName":"h3"},{"title":"SQL Server​","type":1,"pageTitle":"Transactions","url":"/my-documentation/docs/DB/SQL/Transactions#sql-server","content":" BEGIN TRANSACTION; UPDATE accounts SET balance = balance - 100 WHERE id = 1; UPDATE accounts SET balance = balance + 100 WHERE id = 2; IF @@ERROR &lt;&gt; 0 ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION;   ","version":"Next","tagName":"h3"},{"title":"Transactions in Code​","type":1,"pageTitle":"Transactions","url":"/my-documentation/docs/DB/SQL/Transactions#transactions-in-code","content":" ","version":"Next","tagName":"h2"},{"title":"Python mit SQLite​","type":1,"pageTitle":"Transactions","url":"/my-documentation/docs/DB/SQL/Transactions#python-mit-sqlite","content":" import sqlite3 conn = sqlite3.connect('database.db') cursor = conn.cursor() try: cursor.execute(&quot;BEGIN TRANSACTION;&quot;) cursor.execute(&quot;UPDATE accounts SET balance = balance - 100 WHERE id = 1;&quot;) cursor.execute(&quot;UPDATE accounts SET balance = balance + 100 WHERE id = 2;&quot;) conn.commit() # Änderungen bestätigen except Exception: conn.rollback() # Änderungen zurücksetzen finally: conn.close()   ","version":"Next","tagName":"h3"},{"title":"C# mit Entity Framework​","type":1,"pageTitle":"Transactions","url":"/my-documentation/docs/DB/SQL/Transactions#c-mit-entity-framework","content":" using (var context = new MyDbContext()) { using (var transaction = context.Database.BeginTransaction()) { try { var acc1 = context.Accounts.Find(1); var acc2 = context.Accounts.Find(2); acc1.Balance -= 100; acc2.Balance += 100; context.SaveChanges(); transaction.Commit(); } catch { transaction.Rollback(); } } }   ","version":"Next","tagName":"h3"},{"title":"Isolation Levels​","type":1,"pageTitle":"Transactions","url":"/my-documentation/docs/DB/SQL/Transactions#isolation-levels","content":" ","version":"Next","tagName":"h2"},{"title":"SQL Isolation Levels (von niedrig zu hoch)​","type":1,"pageTitle":"Transactions","url":"/my-documentation/docs/DB/SQL/Transactions#sql-isolation-levels-von-niedrig-zu-hoch","content":" Read Uncommitted – Kann nicht bestätigte Änderungen lesenRead Committed – Liest nur bestätigte DatenRepeatable Read – Gleiche Abfrage liefert immer dieselben WerteSerializable – Maximale Isolation, vollständige Sperren  Setzen eines Isolation Levels:  SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;   ","version":"Next","tagName":"h3"},{"title":"Best Practices​","type":1,"pageTitle":"Transactions","url":"/my-documentation/docs/DB/SQL/Transactions#best-practices","content":" Verwende transaktionssichere Tabellen (z. B. InnoDB in MySQL)Nutze explizite Transaktionen, wenn mehrere Operationen zusammengehörenBehandle Fehler und implementiere RollbacksSetze passende Isolation Levels für Performance und DatenintegritätSchließe Transaktionen schnell ab, um Sperren zu minimieren ","version":"Next","tagName":"h2"},{"title":"Datengrößen","type":0,"sectionRef":"#","url":"/my-documentation/docs/Grundlagen/IT-Mathe/Datengroessen","content":"","keywords":"","version":"Next"},{"title":"Grundlegende Einheiten​","type":1,"pageTitle":"Datengrößen","url":"/my-documentation/docs/Grundlagen/IT-Mathe/Datengroessen#grundlegende-einheiten","content":" Bit (b): Kleinste Informationseinheit (0 oder 1)Byte (B): 1 Byte = 8 Bit  ","version":"Next","tagName":"h3"},{"title":"Dezimale Einheiten (SI)​","type":1,"pageTitle":"Datengrößen","url":"/my-documentation/docs/Grundlagen/IT-Mathe/Datengroessen#dezimale-einheiten-si","content":" Kilobyte (KB): 1 KB = 1.000 ByteMegabyte (MB): 1 MB = 1.000 KB = 1.000.000 ByteGigabyte (GB): 1 GB = 1.000 MB = 1.000.000.000 ByteTerabyte (TB): 1 TB = 1.000 GB = 1.000.000.000.000 Byte  ","version":"Next","tagName":"h3"},{"title":"Binäre Einheiten (IEC)​","type":1,"pageTitle":"Datengrößen","url":"/my-documentation/docs/Grundlagen/IT-Mathe/Datengroessen#binäre-einheiten-iec","content":" Kibibyte (KiB): 1 KiB = 1024 ByteMebibyte (MiB): 1 MiB = 1024 KiB = 1.048.576 ByteGibibyte (GiB): 1 GiB = 1024 MiB = 1.073.741.824 Byte  ","version":"Next","tagName":"h3"},{"title":"Umrechnung von Datengrößen​","type":1,"pageTitle":"Datengrößen","url":"/my-documentation/docs/Grundlagen/IT-Mathe/Datengroessen#umrechnung-von-datengrößen","content":"  ","version":"Next","tagName":"h3"},{"title":"Euklidischer Algorithmus","type":0,"sectionRef":"#","url":"/my-documentation/docs/DSA/Verschiedenes/Euklidischer-Algorithmus","content":"","keywords":"","version":"Next"},{"title":"Referenz​","type":1,"pageTitle":"Euklidischer Algorithmus","url":"/my-documentation/docs/DSA/Verschiedenes/Euklidischer-Algorithmus#referenz","content":" Wikipedia: Euklidischer Algorithmus ","version":"Next","tagName":"h3"},{"title":"Gaußsche Summenformel","type":0,"sectionRef":"#","url":"/my-documentation/docs/DSA/Verschiedenes/Gaußsche-Summenformel","content":"","keywords":"","version":"Next"},{"title":"Referenz​","type":1,"pageTitle":"Gaußsche Summenformel","url":"/my-documentation/docs/DSA/Verschiedenes/Gaußsche-Summenformel#referenz","content":" Wikipedia: Gaußsche Summenformel ","version":"Next","tagName":"h3"},{"title":"Netzplantechnik","type":0,"sectionRef":"#","url":"/my-documentation/docs/Grundlagen/Projektplanung/Netzplantechnik","content":"","keywords":"","version":"Next"},{"title":"Erstellung eines Netzplanes​","type":1,"pageTitle":"Netzplantechnik","url":"/my-documentation/docs/Grundlagen/Projektplanung/Netzplantechnik#erstellung-eines-netzplanes","content":" Vorgang\tDauer\tNachfolger\tggfs BezeichnungA\t3\tB,C,D\tTransport/Anlieferung B\t10\tF\tVormontage Prozessstation C\t7\tF\tVormontage Transportband D\t2\tE,F\tAnpassung Steuereinheit E\t8\tG\tProgrammierung Steuereinheit F\t10\tG\tMontage Gesamtsystem G\t5\tH\tTest Gesamtsystem H\t2\t-\tEinweisung der Produktionsmitarbeiter  ","version":"Next","tagName":"h3"},{"title":"Schritt 1 Ablaufplan​","type":1,"pageTitle":"Netzplantechnik","url":"/my-documentation/docs/Grundlagen/Projektplanung/Netzplantechnik#schritt-1-ablaufplan","content":" Anlegen aller Vorgänge mit den schon bekannten Größen und Verknüpfungen    ","version":"Next","tagName":"h3"},{"title":"Schritt 2 Vorwärtsrechnung​","type":1,"pageTitle":"Netzplantechnik","url":"/my-documentation/docs/Grundlagen/Projektplanung/Netzplantechnik#schritt-2-vorwärtsrechnung","content":" Früheste Anfangszeitpunkte FAZ = FEZ des größten VorgängersFrüheste Endzeitpunkte FEZ = FAZ + Dauer    ","version":"Next","tagName":"h3"},{"title":"Schritt 3 Rückwärtsrechnung​","type":1,"pageTitle":"Netzplantechnik","url":"/my-documentation/docs/Grundlagen/Projektplanung/Netzplantechnik#schritt-3-rückwärtsrechnung","content":" Spätester Anfangszeitpunkt SAZ = SEZ - DauerSpätester Endzeitpunkt SEZ = SAZ des kleinsten Nachfolgers    ","version":"Next","tagName":"h3"},{"title":"Schritt 4 Pufferzeiten​","type":1,"pageTitle":"Netzplantechnik","url":"/my-documentation/docs/Grundlagen/Projektplanung/Netzplantechnik#schritt-4-pufferzeiten","content":" Gesamtpuffer = SEZ - FEZ oder SAZ - FAZ maximale Verschiebung eines Vorgangs oder dessen Verlängerung in die Zukunft ohne dass sich dadurch das Projektende verschiebtFreier Puffer = niedrigster FAZ (Nachfolger) - FEZ beschreibt, wie weit ein Vorgang verschoben oder verlängert werden kann, ohne dass es Einfluss auf die Lage der benachbarten Vorgänge hat    ","version":"Next","tagName":"h3"},{"title":"Schritt 5 Kritischer Pfad​","type":1,"pageTitle":"Netzplantechnik","url":"/my-documentation/docs/Grundlagen/Projektplanung/Netzplantechnik#schritt-5-kritischer-pfad","content":" Aufeinanderfolgende Vorgänge ohne Puffer: A =&gt; B =&gt; F =&gt; G =&gt; H ","version":"Next","tagName":"h3"},{"title":"Mengenlehre","type":0,"sectionRef":"#","url":"/my-documentation/docs/Grundlagen/IT-Mathe/Mengenlehre","content":"","keywords":"","version":"Next"},{"title":"Mengen:​","type":1,"pageTitle":"Mengenlehre","url":"/my-documentation/docs/Grundlagen/IT-Mathe/Mengenlehre#mengen","content":" enthalten keine Duplikatewerden als ganzes betrachtet    ","version":"Next","tagName":"h3"},{"title":"Vereiningungsmenge​","type":1,"pageTitle":"Mengenlehre","url":"/my-documentation/docs/Grundlagen/IT-Mathe/Mengenlehre#vereiningungsmenge","content":" Die Vereinigung A∪B ist die Menge, die alle Elemente aus A und B enthält, ohne Duplikate.A ∪ B (Equivalent zum logischen oder: In A oder in B)A ∪ B = Summe der Elemente beider Mengen    ","version":"Next","tagName":"h3"},{"title":"Schnittmenge​","type":1,"pageTitle":"Mengenlehre","url":"/my-documentation/docs/Grundlagen/IT-Mathe/Mengenlehre#schnittmenge","content":" Die Schnittmenge A∩B ist die Menge, die alle Elemente enthält, die sowohl in A als auch in B vorkommen. A ∩ B (Equivalent zum logischen und: Sowohl in A als auch in B)A ∩ B = Elemente die in beiden Mengen vorkommen    ","version":"Next","tagName":"h3"},{"title":"Differenzmenge​","type":1,"pageTitle":"Mengenlehre","url":"/my-documentation/docs/Grundlagen/IT-Mathe/Mengenlehre#differenzmenge","content":" Die Differenzmenge A / B enthält alle Elemente, die in A sind, aber nicht in B.entspricht A ohne B oder A - BA / B = Elemente die nur in A vorkommen    ","version":"Next","tagName":"h3"},{"title":"Teilmenge​","type":1,"pageTitle":"Mengenlehre","url":"/my-documentation/docs/Grundlagen/IT-Mathe/Mengenlehre#teilmenge","content":" C ist Teilmenge von B (C ⊆ B), wenn jedes Element von C auch ein Element von B istC darf = B sein!    ","version":"Next","tagName":"h3"},{"title":"Echte Teilmenge​","type":1,"pageTitle":"Mengenlehre","url":"/my-documentation/docs/Grundlagen/IT-Mathe/Mengenlehre#echte-teilmenge","content":" A ist eine echte Teilmenge von B (A ⊂ B), wenn jedes Element von A auch ein Element von B ist, B aber nicht = A ist.A ⊂ B gilt, wenn alle Elemente von A auch in B sind und B mind. eine weiteres Element enthält.   ","version":"Next","tagName":"h3"},{"title":"Datentypen und Variablen","type":0,"sectionRef":"#","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Datentypen-und-Variablen","content":"","keywords":"","version":"Next"},{"title":"Value Types​","type":1,"pageTitle":"Datentypen und Variablen","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Datentypen-und-Variablen#value-types","content":" Direkt auf dem Stack gespeichert (schnell)Wert wird direkt kopiert, wenn zugewiesen (x = y → Kopie von y)Enthalten den tatsächlichen Wert, nicht eine Referenz.Kein null möglich, außer mit Nullable&lt;T&gt; (int?, double?, etc.)  ","version":"Next","tagName":"h2"},{"title":"Primitive Datentypen​","type":1,"pageTitle":"Datentypen und Variablen","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Datentypen-und-Variablen#primitive-datentypen","content":" Alle primitiven Datentypen (int, double, etc.) sind Value Types, weil sie direkt auf dem Stack gespeichert werden.Nicht alle Value Types sind primitive Datentypen, weil struct, enum, DateTime oder Tuple&lt;T1, T2&gt; auch Value Types sind, aber keine primitiven Datentypen.  Kategorie\tBeispiele\tBeschreibungPrimitive Datentypen\tint, double, bool, char, byte, float, decimal, short, long, sbyte, ushort, uint, ulong\tBasieren direkt auf struct, haben vordefinierte Größen und keine eigene Logik. Value Types\tAlle primitiven Datentypen + enum, struct, Tuple&lt;T1, T2&gt;, bool, DateTime, decimal, TimeSpan\tWerttypen, die entweder primitive Typen oder benutzerdefinierte Strukturen (struct) sind.  ","version":"Next","tagName":"h3"},{"title":"Reference Types​","type":1,"pageTitle":"Datentypen und Variablen","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Datentypen-und-Variablen#reference-types","content":" Werden auf dem Heap gespeichert, aber die Referenz darauf liegt im Stack.Speichern eine Referenz (Zeiger) auf die Daten, nicht den Wert selbst.Eine Zuweisung kopiert die Referenz, nicht die Daten (Änderungen wirken sich auf alle Referenzen aus).  Typ\tBeschreibungclass\tDefiniert komplexe Objekte mit Methoden und Eigenschaften. interface\tDefiniert ein Verhalten, das Klassen implementieren müssen. delegate\tReferenz auf eine Methode (wie ein Funktionszeiger). array\tSammlung von Elementen gleichen Typs mit fester Größe. string\tEine Zeichenkette (immutable, ändert sich nicht direkt).  ","version":"Next","tagName":"h2"},{"title":"Mutable Types​","type":1,"pageTitle":"Datentypen und Variablen","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Datentypen-und-Variablen#mutable-types","content":" Veränderbare Typen sind Objekte, deren Inhalt nach ihrer Erstellung geändert werden kann. Änderungen können durch Hinzufügen, Entfernen oder Ändern von Elementen innerhalb des Objekts erfolgen.  Beispiel: Set (Menge)  Ein Set in Python ist eine Sammlung eindeutiger, ungeordneter Elemente. Sets sind veränderbar, was bedeutet, dass du Elemente hinzufügen oder entfernen kannst.  Die Variable speichert eine Referenz auf das Objekt.Wenn eine andere Variable darauf zeigt, beeinflussen Änderungen beide.  Referenzierung im Speicher bei Mutable Types    ","version":"Next","tagName":"h2"},{"title":"Immutable Types​","type":1,"pageTitle":"Datentypen und Variablen","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Datentypen-und-Variablen#immutable-types","content":" Unveränderbare Typen sind Objekte, deren Inhalt nach ihrer Erstellung nicht geändert werden kann. Wenn du versuchst, den Inhalt eines unveränderbaren Typs zu ändern, musst du ein neues Objekt erstellen.  Beispiel: Tuple (Tupel)  Ein Tupel in Python ist eine geordnete Sammlung von Elementen. Tupel sind unveränderbar, was bedeutet, dass du ihre Elemente nach der Erstellung nicht ändern kannst.  Änderungen erzeugen ein neues Objekt im Speicher.Die ursprüngliche Variable bleibt unberührt.  Refrenzierung im Speicher bei Immutable Types    Wann sollte man immutable Typen verwenden?  Thread-Sicherheit: Immutable Typen sind automatisch thread-safe.Datenintegrität: Unveränderbare Objekte vermeiden ungewollte Seiteneffekte.Value Objects (DDD): Gut für Konzepte wie Geld (Money) oder Punkte (Point).  (DDD = Domain Driven Design)  ","version":"Next","tagName":"h2"},{"title":"Stack und Heap​","type":1,"pageTitle":"Datentypen und Variablen","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Datentypen-und-Variablen#stack-und-heap","content":" Die Begriffe Stack und Heap stammen aus der Informatikgeschichte und haben ihre Wurzeln in der frühen Speicherverwaltung von Computern. Ihre Konzepte wurden über Jahrzehnte hinweg entwickelt und sind heute fundamentale Bestandteile moderner Programmiersprachen.  Mutable oder immutable hat nichts mit Stack oder Heap zu tun!sind nicht physisch getrennt, sondern werden logisch organisiertDie Speicherverwaltung erfolgt größtenteils automatisch  ","version":"Next","tagName":"h2"},{"title":"Vergleich Stack vs. Heap​","type":1,"pageTitle":"Datentypen und Variablen","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Datentypen-und-Variablen#vergleich-stack-vs-heap","content":" Eigenschaft\tStack\tHeapGeschwindigkeit\tSehr schnell\tLangsam Speicherort\tLokale Variablen, Methodenaufrufe\tObjekte, Referenztypen Speicherfreigabe\tAutomatisch (LIFO)\tGarbage Collector Speicherung von\tWerttypen\tReferenztypen Lebensdauer\tBis Methode endet\tUnbekannt (bis GC es entfernt)  Wer verwaltet Stack und Heap in .NET?  Stack: Wird durch den Thread-Speicher verwaltet.  Jeder Thread hat seinen eigenen Stack.Die Verwaltung erfolgt automatisch durch die CLR.  Heap: Wird durch den Garbage Collector (GC) verwaltet.  Objekte im Heap bleiben bestehen, bis der GC sie entfernt.Die Speicherverwaltung erfolgt automatisch durch die CLR.  ","version":"Next","tagName":"h3"},{"title":"Historischer Vergleich​","type":1,"pageTitle":"Datentypen und Variablen","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Datentypen-und-Variablen#historischer-vergleich","content":" Konzept\tUrsprung\tErste Implementierung\tZweckStack\tFrühe CPU-Architektur, Assembler\tBurroughs B5000 (1961)\tSchnelle, automatische Speicherverwaltung für Funktionsaufrufe Heap\tDynamische Speicherverwaltung, frühe Hochsprachen\tLISP (1959), C (1970er)\tFlexibler Speicher für Objekte mit unbestimmter Lebensdauer ","version":"Next","tagName":"h3"},{"title":"Operators","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/SQL/Operators","content":"","keywords":"","version":"Next"},{"title":"ARITHMETIC OPERATORS​","type":1,"pageTitle":"Operators","url":"/my-documentation/docs/DB/SQL/Operators#arithmetic-operators","content":" SELECT 5 + 3 AS Addition, 5 - 3 AS Subtraction, 5 * 3 AS Multiplication, 5 / 3.0 AS Division, 5 % 3 AS Modulus;   ","version":"Next","tagName":"h3"},{"title":"COMPARISON OPERATORS​","type":1,"pageTitle":"Operators","url":"/my-documentation/docs/DB/SQL/Operators#comparison-operators","content":" =, &lt;&gt;, &gt;, &lt;, &gt;=, &lt;=  SELECT * FROM Employees WHERE Salary &gt;= 50000;   ","version":"Next","tagName":"h3"},{"title":"LOGICAL OPERATORS​","type":1,"pageTitle":"Operators","url":"/my-documentation/docs/DB/SQL/Operators#logical-operators","content":" SELECT * FROM Employees WHERE Salary &gt; 50000 AND Department = 'IT'; SELECT * FROM Employees WHERE Salary &gt; 50000 OR Department = 'HR'; SELECT * FROM Employees WHERE NOT (Department = 'IT');   ","version":"Next","tagName":"h3"},{"title":"BETWEEN​","type":1,"pageTitle":"Operators","url":"/my-documentation/docs/DB/SQL/Operators#between","content":" Werte innerhalb eines Bereichs  SELECT * FROM Orders WHERE OrderDate BETWEEN '2025-01-01' AND '2025-01-31';   ","version":"Next","tagName":"h3"},{"title":"IN​","type":1,"pageTitle":"Operators","url":"/my-documentation/docs/DB/SQL/Operators#in","content":" Übereinstimmung mit einer Liste von Werten  SELECT * FROM Orders WHERE Status IN ('Pending', 'Processing');   ","version":"Next","tagName":"h3"},{"title":"LIKE​","type":1,"pageTitle":"Operators","url":"/my-documentation/docs/DB/SQL/Operators#like","content":" SELECT * FROM Customers WHERE Name LIKE 'A%';   Pattern Matching mit LIKE  Jokerzeichen\tBedeutung\tBeispiel\tErklärung%\tBeliebige Anzahl von Zeichen (auch kein Zeichen)\t'M%'`\tFindet alle Namen, die mit &quot;M&quot; beginnen (z. B. &quot;Max&quot;, &quot;Maria&quot;, &quot;Michael&quot;) _\tGenau ein beliebiges Zeichen\t'J_n'`\tFindet Namen mit genau drei Zeichen, die mit &quot;J&quot; beginnen und auf &quot;n&quot; enden (z. B. &quot;Jan&quot;, &quot;Jon&quot;) [ ]\tBestimmte Zeichen an einer Position\t'T[ae]m'`\tFindet &quot;Tam&quot; oder &quot;Tem&quot;, aber nicht &quot;Tim&quot; [^ ]\tAusschluss bestimmter Zeichen\t'T[^a]m'`\tFindet &quot;Tim&quot; oder &quot;Tom&quot;, aber nicht &quot;Tam&quot; [ - ]\tZeichenbereich\t'C[a-c]t'`\tFindet &quot;Cat&quot;, &quot;Cbt&quot; oder &quot;Cct&quot; ESCAPE\tErmöglicht die Suche nach Sonderzeichen (% oder _)\tWHERE Name LIKE '50\\\\%' ESCAPE '\\\\'\tFindet &quot;50%&quot; statt &quot;50irgendwas&quot;  ","version":"Next","tagName":"h3"},{"title":"IS: NULL-Prüfung​","type":1,"pageTitle":"Operators","url":"/my-documentation/docs/DB/SQL/Operators#is-null-prüfung","content":" SELECT * FROM Products WHERE Discontinued IS NULL;   ","version":"Next","tagName":"h3"},{"title":"BITWISE OPERATORS​","type":1,"pageTitle":"Operators","url":"/my-documentation/docs/DB/SQL/Operators#bitwise-operators","content":" DECLARE @a INT = 5, @b INT = 3; SELECT @a &amp; @b AS BitwiseAND, @a | @b AS BitwiseOR, @a ^ @b AS BitwiseXOR;   ","version":"Next","tagName":"h3"},{"title":"STRING-KONKATENATION​","type":1,"pageTitle":"Operators","url":"/my-documentation/docs/DB/SQL/Operators#string-konkatenation","content":" SELECT 'Hello, ' + 'World!' AS Greeting;   ","version":"Next","tagName":"h3"},{"title":"CASE​","type":1,"pageTitle":"Operators","url":"/my-documentation/docs/DB/SQL/Operators#case","content":" SELECT Name, CASE WHEN Salary &gt; 70000 THEN 'High' WHEN Salary BETWEEN 50000 AND 70000 THEN 'Medium' ELSE 'Low' END AS SalaryLevel FROM Employees;   ","version":"Next","tagName":"h3"},{"title":"COALESCE & ISNULL​","type":1,"pageTitle":"Operators","url":"/my-documentation/docs/DB/SQL/Operators#coalesce--isnull","content":" (NULL-Behandlung)  SELECT Name, COALESCE(Phone, 'No Phone') AS PhoneNumber FROM Employees; SELECT Name, ISNULL(Phone, 'No Phone') AS PhoneNumber FROM Employees;   ","version":"Next","tagName":"h3"},{"title":"ALL​","type":1,"pageTitle":"Operators","url":"/my-documentation/docs/DB/SQL/Operators#all","content":" Vergleicht einen Wert mit allen Werten in einer Unterabfrage.Beispiel: Finde alle Produkte, deren Preis höher ist als der Preis aller Produkte in der Kategorie 'Elektronik'.  SELECT Produktname FROM Produkte WHERE Preis &gt; ALL (SELECT Preis FROM Produkte WHERE Kategorie = 'Elektronik');   ","version":"Next","tagName":"h3"},{"title":"ANY​","type":1,"pageTitle":"Operators","url":"/my-documentation/docs/DB/SQL/Operators#any","content":" Vergleicht einen Wert mit mindestens einem Wert in einer Unterabfrage.Beispiel: Finde alle Produkte, deren Preis höher ist als der Preis irgendeines Produkts in der Kategorie 'Elektronik'.  SELECT Produktname FROM Produkte WHERE Preis &gt; ANY (SELECT Preis FROM Produkte WHERE Kategorie = 'Elektronik');   ","version":"Next","tagName":"h3"},{"title":"EXISTS​","type":1,"pageTitle":"Operators","url":"/my-documentation/docs/DB/SQL/Operators#exists","content":" Prüft, ob eine Unterabfrage mindestens eine Zeile zurückgibt.Beispiel: Finde alle Kunden, die mindestens eine Bestellung aufgegeben haben.  SELECT Kundenname FROM Kunden WHERE EXISTS (SELECT 1 FROM Bestellungen WHERE KundenID = Kunden.KundenID);  ","version":"Next","tagName":"h3"},{"title":"Windows","type":0,"sectionRef":"#","url":"/my-documentation/docs/Grundlagen/Sonstiges/Windows","content":"","keywords":"","version":"Next"},{"title":"Executing Scripts​","type":1,"pageTitle":"Windows","url":"/my-documentation/docs/Grundlagen/Sonstiges/Windows#executing-scripts","content":" Show actual Policies Get-ExecutionPolicy -list  Set Policy for -Scope to RemoteSigned  Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine   -ExecutionPolicy​  Specifies the execution policy. If there are no Group Policies and each scope's execution policy is set to Undefined, then Restricted becomes the effective policy for all users.  The acceptable execution policy values are as follows:  AllSigned. Requires that all scripts and configuration files are signed by a trusted publisher, including scripts written on the local computer.Bypass. Nothing is blocked and there are no warnings or prompts.Default. Sets the default execution policy. Restricted for Windows clients or RemoteSigned for Windows servers.RemoteSigned. Requires that all scripts and configuration files downloaded from the Internet are signed by a trusted publisher. The default execution policy for Windows server computers.Restricted. Doesn't load configuration files or run scripts. The default execution policy for Windows client computers.Undefined. No execution policy is set for the scope. Removes an assigned execution policy from a scope that is not set by a Group Policy. If the execution policy in all scopes is Undefined, the effective execution policy is Restricted.Unrestricted. Beginning in PowerShell 6.0, this is the default execution policy for non-Windows computers and can't be changed. Loads all configuration files and runs all scripts. If you run an unsigned script that was downloaded from the internet, you're prompted for permission before it runs.  -Scope​  Specifies the scope that is affected by an execution policy. The default scope is LocalMachine.  The effective execution policy is determined by the order of precedence as follows:  MachinePolicy - Set by a Group Policy for all users of the computerUserPolicy - Set by a Group Policy for the current user of the computerProcess - Affects only the current PowerShell sessionLocalMachine - Default scope that affects all users of the computerCurrentUser - Affects only the current user  ","version":"Next","tagName":"h2"},{"title":"Set Alias​","type":1,"pageTitle":"Windows","url":"/my-documentation/docs/Grundlagen/Sonstiges/Windows#set-alias","content":" Creates a Windows Powershell Profile for the local User in %USERPROFILE%\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1   New-Item -path $profile -type file -force   Set an alias to execute a specific file:  # in der zuvor erstellten Datei set-alias my_alias c:\\path\\to\\my\\powershell\\script.ps1   ","version":"Next","tagName":"h3"},{"title":"Prüfsummen​","type":1,"pageTitle":"Windows","url":"/my-documentation/docs/Grundlagen/Sonstiges/Windows#prüfsummen","content":" ","version":"Next","tagName":"h2"},{"title":"get-filehash​","type":1,"pageTitle":"Windows","url":"/my-documentation/docs/Grundlagen/Sonstiges/Windows#get-filehash","content":" Beispiel (Formaierte Ausgabe) PS C:\\WINDOWS\\system32&gt; get-filehash C:\\Users\\path\\to\\file.iso -Algorithm SHA384 | Format-List Algorithm : SHA384 Hash : 555073E147487CDC5428EED6FF18CEB3973F7322C461FF9AF0629A37ECF7CDF98912F931641C2C46C10F7F9E3E29B50A Path : C:\\Users\\lem0th\\Desktop\\Windows.iso   using the -path parameter PS C:\\WINDOWS\\system32&gt; get-filehash -path C:\\Users\\lem0th\\Desktop\\Tuts.7z -Algorithm SHA256 Algorithm Hash Path --------- ---- ---- SHA256 38F3B3F4800A6E59C5DFCBC222ADB6ED6987087E9A90E25D39E1C0CCD3EAEA97   -PathGibt den Pfad zu einer oder mehreren Dateien als Array an. Platzhalterzeichen sind zulässig.  ","version":"Next","tagName":"h3"},{"title":"compare hashes​","type":1,"pageTitle":"Windows","url":"/my-documentation/docs/Grundlagen/Sonstiges/Windows#compare-hashes","content":" Get-FileHash -Path C:\\DateiName -Algorithm SHA256| Compare-Object -ReferenceObject &quot;2F9296722Cd04054566D98F97649B09E&quot; -DifferenceObject {$_.Hash}   -ReferenceObjectDie Referenz Prüfsumme mit der das zu prüfende Objekt verglichen wird ","version":"Next","tagName":"h3"},{"title":"CREATE ProjectDB","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/ProjectDB/create-projectdb","content":"CREATE ProjectDB USE master; -- Datenbank löschen, falls vorhanden DROP DATABASE IF EXISTS ProjektDB; -- Datenbank erstellen CREATE DATABASE ProjektDB; GO -- Authorisierung ändern für Diagramme ALTER AUTHORIZATION ON DATABASE::ProjektDB TO sa GO -- Zur neuen Datenbank wechseln USE ProjektDB; GO -- Anlegen der Tabellen CREATE TABLE Abteilung ( id CHAR(2) NOT NULL, bezeichnung\tVARCHAR(30)\tNOT NULL, stadt VARCHAR(25)\tNULL, CONSTRAINT pk_abteilung PRIMARY KEY (id) ); GO CREATE TABLE Kunde ( id INT IDENTITY\tNOT NULL, firma VARCHAR(30) NOT NULL, stadt VARCHAR(25) NOT NULL, CONSTRAINT pk_kunde PRIMARY KEY (id) ); GO CREATE TABLE Projekt ( id CHAR(2) NOT NULL, bezeichnung\tVARCHAR(30)\tNOT NULL, mittel MONEY NULL, kd_id INT NULL, CONSTRAINT pk_projekt PRIMARY KEY (id), CONSTRAINT fk_projekt_kunde FOREIGN KEY (kd_id) REFERENCES Kunde (id) ); GO CREATE TABLE Mitarbeiter ( id INT NOT NULL, nachname VARCHAR(30) NOT NULL, vorname VARCHAR(30) NOT NULL, abt_id CHAR(2) NULL, stadt VARCHAR(25)\tNULL, CONSTRAINT pk_mitarbeiter PRIMARY KEY (id), CONSTRAINT fk_mitarbeiter_abteilung FOREIGN KEY(abt_id) REFERENCES Abteilung (id) ); GO CREATE TABLE Arbeit ( mit_id INT NOT NULL, pro_id CHAR(2) NOT NULL, aufgabe VARCHAR(30)\tNULL, einst_dat DATE NULL, CONSTRAINT pk_arbeit PRIMARY KEY(mit_id, pro_id), CONSTRAINT fk_arbeit_mitarbeiter FOREIGN KEY (mit_id) REFERENCES Mitarbeiter (id), CONSTRAINT fk_arbeit_projekt FOREIGN KEY (pro_id) REFERENCES Projekt (id) ); GO CREATE TABLE Gehalt ( mit_id INT NOT NULL, gehalt MONEY NOT NULL, CONSTRAINT pk_gehalt PRIMARY KEY(mit_id), CONSTRAINT fk_gehalt_mitarbeiter FOREIGN KEY (mit_id) REFERENCES Mitarbeiter (id) ); GO CREATE TABLE Umsatz ( id INT NOT NULL, mit_id INT NOT NULL, datum DATE NOT NULL, umsatz MONEY NOT NULL, CONSTRAINT pk_umsatz PRIMARY KEY (id), CONSTRAINT fk_umsatz_mitarbeiter FOREIGN KEY (mit_id) REFERENCES Mitarbeiter (id) ); GO -- Daten der Tabelle Abteilung INSERT INTO Abteilung VALUES ('a1', 'Beratung', 'München'); INSERT INTO Abteilung VALUES ('a2', 'Diagnose', 'München'); INSERT INTO Abteilung VALUES ('a3', 'Freigabe', 'Stuttgart'); INSERT INTO Abteilung VALUES ('a4', 'Einkauf', 'München'); INSERT INTO Abteilung VALUES ('a5', 'Verkauf', 'Ulm'); -- Daten der Tabelle Kunde INSERT INTO Kunde VALUES ('Im- und Export AG', 'München'); INSERT INTO Kunde VALUES ('Technische Produkte oHG', 'Ulm'); INSERT INTO Kunde VALUES ('Frankreich-Reisen GmbH', 'Saarlouis'); INSERT INTO Kunde VALUES ('Getränke Schneider', 'Heidenheim'); INSERT INTO Kunde VALUES ('Finanzamt Ulm', 'Fürth'); INSERT INTO Kunde VALUES ('100% Sonderzeichen AG', 'Baden_Baden'); -- Daten der Tabelle Projekt INSERT INTO Projekt VALUES ('p1', 'Apollo', 120000.0, 3); INSERT INTO Projekt VALUES ('p2', 'Gemini', 95000.0, 5); INSERT INTO Projekt VALUES ('p3', 'Merkur', 186500.0, 1); INSERT INTO Projekt VALUES ('p4', 'Pluto', 88500.0, 4); INSERT INTO Projekt VALUES ('p5', 'Ariane', 165000.0, 2); -- Daten der Tabelle Mitarbeiter INSERT INTO Mitarbeiter VALUES (2581, 'Kaufmann', 'Brigitte', 'a2', NULL); INSERT INTO Mitarbeiter VALUES (5765, 'Schäfer', 'Sabine', 'a3', 'Landshut'); INSERT INTO Mitarbeiter VALUES (9031, 'Meier', 'Rainer', 'a2', NULL); INSERT INTO Mitarbeiter VALUES (9912, 'Wolf', 'Klaus', 'a4', 'Heidenheim'); INSERT INTO Mitarbeiter VALUES (10102, 'Huber', 'Petra', 'a3', 'Landshut'); INSERT INTO Mitarbeiter VALUES (12121, 'Richter', 'Ursula', 'a4', 'München'); INSERT INTO Mitarbeiter VALUES (17000, 'Krüger', 'Martin', 'a5', 'Ulm'); INSERT INTO Mitarbeiter VALUES (18316, 'Müller', 'Gabriele', 'a1', 'Rosenheim'); INSERT INTO Mitarbeiter VALUES (20204, 'Fuchs', 'Dirk', 'a4', 'Fürth'); INSERT INTO Mitarbeiter VALUES (22222, 'Vogel', 'Anke', 'a4', 'München'); INSERT INTO Mitarbeiter VALUES (24321, 'Schubert', 'Rolf', 'a5', 'München'); INSERT INTO Mitarbeiter VALUES (25348, 'Keller', 'Hans', 'a3', 'München'); INSERT INTO Mitarbeiter VALUES (27365, 'Albrecht', 'Lena', 'a5', NULL); INSERT INTO Mitarbeiter VALUES (28559, 'Mozer', 'Sibille', 'a1', 'Ulm'); INSERT INTO Mitarbeiter VALUES (29346, 'Probst', 'Andreas', 'a2', 'Augsburg'); -- Daten der Tabelle Gehalt INSERT INTO Gehalt VALUES (2581, 3000); INSERT INTO Gehalt VALUES (5765, 4500); INSERT INTO Gehalt VALUES (9031, 4000); INSERT INTO Gehalt VALUES (9912, 3500); INSERT INTO Gehalt VALUES (10102, 3500); INSERT INTO Gehalt VALUES (12121, 3000); INSERT INTO Gehalt VALUES (17000, 4000); INSERT INTO Gehalt VALUES (18316, 3000); INSERT INTO Gehalt VALUES (20204, 3500); INSERT INTO Gehalt VALUES (22222, 5000); INSERT INTO Gehalt VALUES (24321, 3000); INSERT INTO Gehalt VALUES (25348, 1000); INSERT INTO Gehalt VALUES (27365, 2500); INSERT INTO Gehalt VALUES (28559, 6000); INSERT INTO Gehalt VALUES (29346, 5000); -- Daten der Tabelle Arbeit INSERT INTO Arbeit VALUES (2581, 'p3', 'Projektleiter', '20191015'); INSERT INTO Arbeit VALUES (5765, 'p4', 'Projektleiter', '20180720'); INSERT INTO Arbeit VALUES (9031, 'p1', 'Gruppenleiter', '20190415'); INSERT INTO Arbeit VALUES (9031, 'p3', 'Sachbearbeiter', '20181115'); INSERT INTO Arbeit VALUES (9912, 'p5', 'Sachbearbeiter', '20190117'); INSERT INTO Arbeit VALUES (10102, 'p1', 'Projektleiter', '20181001'); INSERT INTO Arbeit VALUES (10102, 'p3', 'Gruppenleiter', '20190101'); INSERT INTO Arbeit VALUES (12121, 'p4', 'Gruppenleiter', '20180903'); INSERT INTO Arbeit VALUES (17000, 'p5', NULL, '20191112'); INSERT INTO Arbeit VALUES (17000, 'p1', NULL, '20191112'); INSERT INTO Arbeit VALUES (18316, 'p2', NULL, '20190601'); INSERT INTO Arbeit VALUES (20204, 'p4', 'Sachbearbeiter', '20171220'); INSERT INTO Arbeit VALUES (22222, 'p5', 'Projektleiter', '20190101'); INSERT INTO Arbeit VALUES (24321, 'p3', NULL, '20181201'); INSERT INTO Arbeit VALUES (25348, 'p2', 'Sachbearbeiter', '20180215'); INSERT INTO Arbeit VALUES (27365, 'p4', 'Sachbearbeiter', '20180903'); INSERT INTO Arbeit VALUES (28559, 'p1', NULL, '20180415'); INSERT INTO Arbeit VALUES (28559, 'p2', 'Sachbearbeiter', '20180201'); INSERT INTO Arbeit VALUES (29346, 'p1', 'Sachbearbeiter', '20190401'); INSERT INTO Arbeit VALUES (29346, 'p2', NULL, '20171215'); -- Daten der Tabelle Umsatz INSERT INTO Umsatz VALUES (1, 10102, '20181001', 500); INSERT INTO Umsatz VALUES (2, 10102, '20181002', 500); INSERT INTO Umsatz VALUES (3, 10102, '20181101', 500); INSERT INTO Umsatz VALUES (4, 10102, '20181101', 5000); INSERT INTO Umsatz VALUES (5, 10102, '20181102', 500); INSERT INTO Umsatz VALUES (6, 10102, '20181209', 500); INSERT INTO Umsatz VALUES (7, 10102, '20181210', 500); INSERT INTO Umsatz VALUES (8, 10102, '20181223', 5000); INSERT INTO Umsatz VALUES (9, 10102, '20181228', 500); INSERT INTO Umsatz VALUES (10, 10102, '20190101', 4500); INSERT INTO Umsatz VALUES (11, 25348, '20180215', 1500); INSERT INTO Umsatz VALUES (12, 25348, '20180216', 1500); INSERT INTO Umsatz VALUES (13, 25348, '20180217', 1500); INSERT INTO Umsatz VALUES (14, 25348, '20180501', 1500); INSERT INTO Umsatz VALUES (15, 25348, '20180502', 15000); INSERT INTO Umsatz VALUES (16, 25348, '20181011', 15000); INSERT INTO Umsatz VALUES (17, 25348, '20190201', 150000); INSERT INTO Umsatz VALUES (18, 25348, '20190301', 1500); INSERT INTO Umsatz VALUES (19, 25348, '20190401', 15); INSERT INTO Umsatz VALUES (20, 25348, '20190501', 150); INSERT INTO Umsatz VALUES (21, 2581, '20190501', 100000); INSERT INTO Umsatz VALUES (22, 17000, '20180303', 5000); INSERT INTO Umsatz VALUES (23, 17000, '20180304', 5000); INSERT INTO Umsatz VALUES (24, 17000, '20180305', 5000); INSERT INTO Umsatz VALUES (25, 17000, '20180306', 5000); ","keywords":"","version":"Next"},{"title":"Links","type":0,"sectionRef":"#","url":"/my-documentation/docs/Linux/Dateisystem/Links","content":"","keywords":"","version":"Next"},{"title":"Symlinks​","type":1,"pageTitle":"Links","url":"/my-documentation/docs/Linux/Dateisystem/Links#symlinks","content":" Symlinks sind wie Verknüpfungen: Sie verweisen auf eine Datei oder ein Verzeichnis, aber enthalten nicht die eigentlichen Daten.  ln -s &lt;source&gt; &lt;destination/mein_link&gt;   ","version":"Next","tagName":"h3"},{"title":"Hardlinks​","type":1,"pageTitle":"Links","url":"/my-documentation/docs/Linux/Dateisystem/Links#hardlinks","content":" Hardlinks sind alternative Namen für dieselbe Datei im gleichen Dateisystem. Sie zeigen direkt auf die gleichen Datenblöcke wie die Originaldatei.  ln &lt;source&gt; &lt;destination/mein_link&gt;   Anzahl der Hardlinks prüfen  ls -l /home/user/datei.txt /tmp/mein_hardlink # Die zweite Spalte zeigt die Anzahl der Hardlinks zur Datei. stat /home/user/datei.txt # Zeigt die Anzahl der Hardlinks (Links:).   ","version":"Next","tagName":"h3"},{"title":"Zusammenfassung​","type":1,"pageTitle":"Links","url":"/my-documentation/docs/Linux/Dateisystem/Links#zusammenfassung","content":" Feature\tSymbolischer Link (ln -s)\tHardlink (ln)Verweist auf\tDatei oder Verzeichnis\tDirekt auf Datenblöcke Gültig nach Löschen der Originaldatei?\t❌ Nein\t✅ Ja Kann auf anderes Dateisystem zeigen?\t✅ Ja\t❌ Nein Unterstützt Verzeichnisse?\t✅ Ja\t❌ Nein  ","version":"Next","tagName":"h3"},{"title":"Symlink Script​","type":1,"pageTitle":"Links","url":"/my-documentation/docs/Linux/Dateisystem/Links#symlink-script","content":" Erstellt Symlinks im Target von jedem Ordner unter Source  #!/bin/bash if [ &quot;$#&quot; -ne 2 ]; then echo &quot;Usage: $0 target destination&quot; exit 1 fi TARGET=$1 DESTINATION=$2 for dir in &quot;$TARGET&quot;/*/; do ln -s &quot;$dir&quot; &quot;$DESTINATION&quot; done echo &quot;Symbolic links created from $TARGET to $DESTINATION&quot;  ","version":"Next","tagName":"h3"},{"title":"LVM","type":0,"sectionRef":"#","url":"/my-documentation/docs/Linux/Dateisystem/LVM","content":"","keywords":"","version":"Next"},{"title":"Grundlagen von LVM​","type":1,"pageTitle":"LVM","url":"/my-documentation/docs/Linux/Dateisystem/LVM#grundlagen-von-lvm","content":" Physical Volumes (PV): Physische Datenträger oder Partitionen, die von LVM genutzt werden. Bevor ein Datenträger in eine Volume Group aufgenommen werden kann, muss er mit dem Befehl pvcreate initialisiert werden. Volume Groups (VG): Eine Sammlung von Physical Volumes, die zu einem gemeinsamen Speicherpool zusammengefasst werden. Dieser Pool stellt den Speicherplatz bereit, aus dem dann logische Volumes erstellt werden. Ein neuer Speicherpool wird typischerweise mit vgcreate angelegt, und bestehende PVs können mit vgextend hinzugefügt werden. Logical Volumes (LV): Die aus der Volume Group zugeteilten logischen Partitionen. Diese können als Dateisysteme eingebunden werden und bieten Flexibilität, da sie in der Größe verändert oder zwischen VGs verschoben werden können. Mit lvcreate legt man ein neues LV an, und mit lvextend oder lvreduce passt man die Größe an.    ","version":"Next","tagName":"h2"},{"title":"Wichtige Befehle​","type":1,"pageTitle":"LVM","url":"/my-documentation/docs/Linux/Dateisystem/LVM#wichtige-befehle","content":" Hier ist eine tabellarische Übersicht der wichtigsten LVM-Befehle:  Befehl\tBeschreibung\tBeispielpvcreate\tInitialisiert ein physisches Volume (PV)\tsudo pvcreate /dev/sda1 pvdisplay\tZeigt detaillierte Informationen zu einem PV\tpvdisplay /dev/sda1 pvs\tKompakte Übersicht aller vorhandenen PVs\tpvs vgcreate\tErstellt eine neue Volume Group (VG) aus einem oder mehreren PVs\tsudo vgcreate vg_data /dev/sda1 vgdisplay\tZeigt Details zur Volume Group\tvgdisplay vg_data vgs\tKompakte Übersicht aller VGs\tvgs vgextend\tErweitert eine VG durch Hinzufügen eines weiteren PVs\tsudo vgextend vg_data /dev/sdb1 lvcreate\tErstellt ein neues logisches Volume (LV)\tsudo lvcreate -L 10G -n lv_home vg_data lvdisplay\tZeigt detaillierte Informationen zu einem LV\tlvdisplay /dev/vg_data/lv_home lvs\tKompakte Übersicht aller LVs\tlvs lvextend\tErweitert ein LV um zusätzlichen Speicherplatz\tsudo lvextend -L +5G /dev/vg_data/lv_home lvreduce\tVerkleinert ein LV (nach vorheriger Anpassung des Dateisystems)\tsudo lvreduce -L 5G /dev/vg_data/lv_home lvremove\tEntfernt ein LV\tsudo lvremove /dev/vg_data/lv_home vgremove\tEntfernt eine VG\tsudo vgremove vg_data pvremove\tLöscht LVM-Daten von einem PV (entfernt das PV aus der LVM-Konfiguration)\tsudo pvremove /dev/sda1  Dateisystem-Anpassung: Nach der Erweiterung eines LVs muss das darauf befindliche Dateisystem vergrößert werden. Bei ext4 etwa: sudo resize2fs /dev/vg_data/lv_home Für XFS-Dateisysteme: sudo xfs_growfs /mountpunkt     ","version":"Next","tagName":"h2"},{"title":"Praxisbeispiel: Einbindung einer neuen Festplatte​","type":1,"pageTitle":"LVM","url":"/my-documentation/docs/Linux/Dateisystem/LVM#praxisbeispiel-einbindung-einer-neuen-festplatte","content":" ","version":"Next","tagName":"h2"},{"title":"1. Neue Festplatte identifizieren und vorbereiten​","type":1,"pageTitle":"LVM","url":"/my-documentation/docs/Linux/Dateisystem/LVM#1-neue-festplatte-identifizieren-und-vorbereiten","content":" Überprüfe den aktuellen Speicherstatus df -h lsblk lfdisplay Festplatte finden: Verwenden Sie lsblk oder fdisk -l, um die neue Festplatte (z. B. /dev/sdb) zu identifizieren. lsblk sudo fdisk -l Partition anlegen: Nutzen Sie fdisk oder parted, um eine neue Partition anzulegen. Achten Sie darauf, den Partitions-Typ auf „Linux LVM“ (Code 8e) zu setzen. sudo fdisk /dev/sdb Im fdisk-Menü: Drücken Sie n, um eine neue Partition zu erstellen.Ändern Sie mit t den Partitions-Typ auf 8e.Speichern Sie mit w.  ","version":"Next","tagName":"h3"},{"title":"2. Physical Volume erstellen oder erweitern​","type":1,"pageTitle":"LVM","url":"/my-documentation/docs/Linux/Dateisystem/LVM#2-physical-volume-erstellen-oder-erweitern","content":" Wenn du eine neue Festplatte oder Partition hinzufügst: pvcreate /dev/sdX # Falls eine neue Partition oder Festplatte genutzt wird vgextend my_vg /dev/sdX # Volume Group um das neue PV erweitern Falls das PV bereits existiert und vergrößert wurde (z. B. nach einer VM-Festplattenerweiterung): pvresize /dev/sdX   ","version":"Next","tagName":"h3"},{"title":"3. Logical Volume erweitern oder neu erstellen​","type":1,"pageTitle":"LVM","url":"/my-documentation/docs/Linux/Dateisystem/LVM#3-logical-volume-erweitern-oder-neu-erstellen","content":" Erweiterung eines bestehenden Logical Volumes: Falls Sie bereits ein Logical Volume (z. B. /dev/vg_data/lv_home) haben und dessen Größe vergrößern möchten: sudo lvextend -l +100%FREE /dev/vg_data/lv_home Anschließend muss das Dateisystem angepasst werden: df -Th / | grep mapper # Prüfung des Typs (zb ext4 oder xfs) sudo resize2fs /dev/vg_data/lv_home # für ext4 sudo xfs_growfs / # für xfs Neues Logical Volume erstellen: Falls Sie ein neues LV anlegen wollen: sudo lvcreate -L 20G -n lv_new vg_data Formatieren Sie das neue LV mit dem gewünschten Dateisystem, z. B. ext4: sudo mkfs.ext4 /dev/vg_data/lv_new Und binden Sie es in das Dateisystem ein: sudo mkdir /mnt/new_storage sudo mount /dev/vg_data/lv_new /mnt/new_storage   ","version":"Next","tagName":"h3"},{"title":"5. Abschluss und Überprüfung​","type":1,"pageTitle":"LVM","url":"/my-documentation/docs/Linux/Dateisystem/LVM#5-abschluss-und-überprüfung","content":" Überprüfen Sie mit pvdisplay, vgdisplay und lvdisplay die aktuelle LVM-Konfiguration.Stellen Sie sicher, dass das Dateisystem korrekt eingebunden und verfügbar ist. ","version":"Next","tagName":"h3"},{"title":"Package Management","type":0,"sectionRef":"#","url":"/my-documentation/docs/Linux/Package-Management","content":"","keywords":"","version":"Next"},{"title":"YUM​","type":1,"pageTitle":"Package Management","url":"/my-documentation/docs/Linux/Package-Management#yum","content":" für ältere RHEL, CentOS  yum update # Systemaktualisierung yum install [paket] # Paket installieren yum remove [paket] # Paket deinstallieren yum search [paket] # Nach einem Paket suchen yum list installed # Installierte Pakete anzeigen yum clean all # Paket-Cache bereinigen   ","version":"Next","tagName":"h3"},{"title":"DNF​","type":1,"pageTitle":"Package Management","url":"/my-documentation/docs/Linux/Package-Management#dnf","content":" Nachfolger von YUM, für RHEL, Fedora, CentOS  dnf update # Systemaktualisierung dnf install [paket] # Paket installieren dnf remove [paket] # Paket deinstallieren dnf search [paket] # Nach einem Paket suchen dnf list --installed # Installierte Pakete anzeigen dnf list --available # List availabe Packages dnf clean all # Paket-Cache bereinigen # Package Groups dnf grouplist # List available groups dnf groupinfo [group] # Infos about a group dnf groupinstall [group] # Install specified group dnf groupremove [group] # Remove group   ","version":"Next","tagName":"h3"},{"title":"RPM​","type":1,"pageTitle":"Package Management","url":"/my-documentation/docs/Linux/Package-Management#rpm","content":" rpm -i [package.rpm] # Installiert ein .rpm-Paket rpm -U [package.rpm] # Upgradet oder installiert ein .rpm-Paket rpm -e [package] # Entfernt ein installiertes Paket rpm -q [package] # Zeigt Informationen zu einem Paket an rpm -qa # Listet alle installierten Pakete auf rpm -V [package] # Verifiziert ein installiertes Paket rpm -qf /path/to/file # Find installed package containing file rpm -qf $(which [exe]) # Get package that installed the executable rpm -ql [package] # List files in package   ","version":"Next","tagName":"h3"},{"title":"APT​","type":1,"pageTitle":"Package Management","url":"/my-documentation/docs/Linux/Package-Management#apt","content":" für Debian, Ubuntu, Linux Mint  apt update # Paketlisten aktualisieren apt upgrade # Systemaktualisierung apt update &amp;&amp; sudo apt upgrade -y # Update repositories and install updates -yes to all apt install [paket] # Paket installieren apt remove [paket] # Paket deinstallieren apt search [paket] # Nach einem Paket suchen apt list --installed # Installierte Pakete anzeigen apt autoremove # Nicht mehr benötigte Pakete entfernen apt clean # Paket-Cache bereinigen   ","version":"Next","tagName":"h3"},{"title":"DPKG​","type":1,"pageTitle":"Package Management","url":"/my-documentation/docs/Linux/Package-Management#dpkg","content":" dpkg -i [package.deb] # Installiert ein .deb-Paket dpkg -r [package] # Entfernt ein installiertes Paket dpkg -P [package] # Entfernt ein Paket samt Konfigurationsdateien (Purge) dpkg -l # Listet alle installierten Pakete auf dpkg -L [package] # Zeigt alle Dateien, die von einem Paket installiert wurden dpkg -s [package] # Zeigt Statusinformationen zu einem Paket an   ","version":"Next","tagName":"h3"},{"title":"PACMAN​","type":1,"pageTitle":"Package Management","url":"/my-documentation/docs/Linux/Package-Management#pacman","content":" für Arch Linux, Manjaro  pacman -Syu # Systemaktualisierung pacman -S [paket] # Paket installieren pacman -R [paket] # Paket deinstallieren pacman -Ss [paket] # Nach einem Paket suchen pacman -Q # Installierte Pakete anzeigen pacman -Sc # Paket-Cache bereinigen pacman -Rns [paket] # Paket und Abhängigkeiten entfernen   ","version":"Next","tagName":"h3"},{"title":"FLATPAK​","type":1,"pageTitle":"Package Management","url":"/my-documentation/docs/Linux/Package-Management#flatpak","content":" flatpak install [paket] # Paket installieren flatpak update # alle installierten Anwendungen und Laufzeitumgebungen updaten flatpak run [paket] # anwendung starten flatpak list # auflistung aller installierten pakete und laufzeitumgebungen flatpak uninstall [paket] # Paket deinstallieren flatpak repair # fix inconsistencies with your local installation flatpak search [string] # suche nach paketen   ","version":"Next","tagName":"h3"},{"title":"SNAP​","type":1,"pageTitle":"Package Management","url":"/my-documentation/docs/Linux/Package-Management#snap","content":" snap list # Zeigt alle installierten Snap-Pakete an snap find [name] # Sucht nach einem Snap-Paket im Snap Store snap install [name] # Installiert ein Snap-Paket snap remove [name] # Deinstalliert ein Snap-Paket snap refresh # Aktualisiert alle installierten Snap-Pakete snap refresh [name] # Aktualisiert ein bestimmtes Snap-Paket snap revert [name] # Setzt ein Snap-Paket auf die vorherige Version zurück snap info [name] # Zeigt Informationen zu einem Snap-Paket an snap enable [name] # Aktiviert ein deaktiviertes Snap-Paket snap disable [name] # Deaktiviert ein Snap-Paket (ohne Deinstallation) snap services # Listet die Dienste von Snap-Paketen auf snap start [name] # Startet einen Snap-Dienst snap stop [name] # Stoppt einen Snap-Dienst snap restart [name] # Startet einen Snap-Dienst neu snap changes # Zeigt eine Liste der letzten Änderungen durch Snap an snap revert [name] # Setzt ein Snap-Paket auf eine vorherige Version zurück snap connections # Zeigt die aktuellen Verbindungen der Snap-Pakete snap interface [name] # Zeigt Informationen über eine bestimmte Schnittstelle   Snap installieren​  # Ubuntu / Debian sudo apt update sudo apt install snapd sudo systemctl enable --now snapd   From Linux Mint 20 onwards, a file called nosnap.pref needs to be either moved or removed from /etc/apt/preferences.d/ before Snap can be installed.  sudo mv /etc/apt/preferences.d/nosnap.pref ~/Documents/nosnap.backup    ","version":"Next","tagName":"h3"},{"title":"Zahlensysteme","type":0,"sectionRef":"#","url":"/my-documentation/docs/Grundlagen/IT-Mathe/Zahlensysteme","content":"","keywords":"","version":"Next"},{"title":"Binär zu Dezimal​","type":1,"pageTitle":"Zahlensysteme","url":"/my-documentation/docs/Grundlagen/IT-Mathe/Zahlensysteme#binär-zu-dezimal","content":" 1\t1\t0\t1\t0\t0\t1\t0\tBinär1 x 27\t1 x 26\t0 x 25\t1 x 24\t0 x 23\t0 x 22\t1 x 21\t0 x 20\tSumme 128\t64\t0\t16\t0\t0\t2\t0\t= 210  ","version":"Next","tagName":"h3"},{"title":"Binär zu Hexadecimal​","type":1,"pageTitle":"Zahlensysteme","url":"/my-documentation/docs/Grundlagen/IT-Mathe/Zahlensysteme#binär-zu-hexadecimal","content":" Binärzahl in 4er Blöcke aufteilen.Fehlende Nullen beim vordersten Block auffüllen und mit unten stehender Tabelle umrechnenDie Umrechnung Hexadecimal zu Binär erfolgt analog nur umgekehrt  Hex\tBinär\tHex\tBinär0\t0000\t8\t1000 1\t0001\t9\t1001 2\t0010\tA\t1010 3\t0011\tB\t1011 4\t0100\tC\t1100 5\t0101\tD\t1101 6\t0110\tE\t1110 7\t0111\tF\t1111  ","version":"Next","tagName":"h3"},{"title":"Dezimal zu Binär​","type":1,"pageTitle":"Zahlensysteme","url":"/my-documentation/docs/Grundlagen/IT-Mathe/Zahlensysteme#dezimal-zu-binär","content":" Das Ergebnis wird von unten nach oben gelesen! 94 / 2 = 47 Rest 0 ^ 47 / 2 = 23 Rest 1 ^ 23 / 2 = 11 Rest 1 ^ 11 / 2 = 5 Rest 1 ^ 5 / 2 = 2 Rest 1 ^ 2 / 2 = 1 Rest 0 ^ 1 / 2 = 0 Rest 1 ^ = 1011110   ","version":"Next","tagName":"h3"},{"title":"Dezimal zu Hexadezimal​","type":1,"pageTitle":"Zahlensysteme","url":"/my-documentation/docs/Grundlagen/IT-Mathe/Zahlensysteme#dezimal-zu-hexadezimal","content":" Dezimal zu Binär umrechnenBinärzahl in 4er Blöcke einteilen und fehlende Nullen auffüllenDie 4er Blöcke zu Hexadezimalzahlen umrechnen (siehe Tabelle)  ","version":"Next","tagName":"h3"},{"title":"Hexadezimal zu Dezimal​","type":1,"pageTitle":"Zahlensysteme","url":"/my-documentation/docs/Grundlagen/IT-Mathe/Zahlensysteme#hexadezimal-zu-dezimal","content":" 2\tA\t5\tE\tHexadecimal2 x 163\t10 x 162\t5 x 161\t14 x 160\tSumme 8192\t2560\t80\t14\t= 10846  ","version":"Next","tagName":"h3"},{"title":"Binäre Arithmetik​","type":1,"pageTitle":"Zahlensysteme","url":"/my-documentation/docs/Grundlagen/IT-Mathe/Zahlensysteme#binäre-arithmetik","content":" Binäres Addieren (z. B.: 1010 + 0101) Stelle 1: 0 + 1 = 1 von rechtsStelle 2: 1 + 0 = 1Stelle 3: 0 + 1 = 1Stelle 4: 1 + 0 = 1 ========================= Ergebnis: 1111 (Hinweis: Bei 1+1 schreibt man 0 und überträgt 1.) Binäres Subtrahieren (z. B.: 1010 - 0101) Stelle 1: 0 - 1 → nicht möglich, also leihen =&gt; 102 - 1 = 1; nächst höhere Stelle wird um 1 reduziert.Stelle 2: (1-1) = 0 (wegen Leihen)Stelle 3: 0 - 1 → wieder leihen =&gt; 102 - 1 = 1; nächst höhere Stelle um 1 reduziert.Stelle 4: (1-1) = 0 ========================= Ergebnis: 0101 (Hinweis: Leihen im Binärsystem entspricht dem Hinzufügen von 2.) Bitweise Operationen (Bit-für-Bit, bei gleicher Stellenzahl):   a) AND: - Regel: Nur 1, wenn beide Bits 1 sind; sonst 0. 1010 &amp; 0101 = 0000 b) OR: Regel: 1, wenn mindestens ein Bit 1 ist. 1010 | 0101 = 1111 c) XOR: Regel: 1, wenn die Bits unterschiedlich sind; sonst 0. 1010 ^ 0101 = 1111  ","version":"Next","tagName":"h3"},{"title":"DQL","type":0,"sectionRef":"#","url":"/my-documentation/docs/DB/SQL/DQL","content":"","keywords":"","version":"Next"},{"title":"Überblick​","type":1,"pageTitle":"DQL","url":"/my-documentation/docs/DB/SQL/DQL#überblick","content":" SELECT Selektieren von Daten aus einer TabelleJOINs: Verknüpfen Daten aus mehreren Tabellen basierend auf gemeinsamen Schlüsseln. Wichtige Typen: INNER, LEFT, RIGHT, FULL und CROSS.Subselects (Subqueries): Ermöglichen verschachtelte Abfragen zur Filterung, Aggregation oder Berechnung.UNION: Kombiniert Ergebnisse aus mehreren Abfragen (entfernt Duplikate, UNION ALL behält sie).INTERSECT: Gibt nur die gemeinsamen Zeilen aus zwei Abfragen zurück.EXCEPT: Gibt Zeilen aus der ersten Abfrage zurück, die in der zweiten nicht vorkommen.  ","version":"Next","tagName":"h2"},{"title":"SELECT​","type":1,"pageTitle":"DQL","url":"/my-documentation/docs/DB/SQL/DQL#select","content":" Ruft Daten aus einer Tabelle ab.  SELECT name, email FROM customers; -- Selektieren mit alias (AS) SELECT e.* FROM DimEmployee AS e ORDER BY LastName;   Reihenfolge der Syntax vs Ausführung:  Syntax\tAusführungSELECT\tFROM FROM\tWHERE WHERE\tGROUP BY GROUP BY\tHAVING HAVING\tSELECT ORDER BY\tORDER BY  ","version":"Next","tagName":"h2"},{"title":"SELECT mit WHERE​","type":1,"pageTitle":"DQL","url":"/my-documentation/docs/DB/SQL/DQL#select-mit-where","content":" Filtert Daten basierend auf Bedingungen.  Beispiel 1 SELECT * FROM customers WHERE email = 'max@example.com'; -- einzelne Bedingung SELECT * FROM employees WHERE age &gt; 30; -- mehrere Bedingungen SELECT * FROM employees WHERE age &gt; 30 AND department = 'HR';   Beispiel 2 SELECT FirstName, LastName, StartDate AS FirstDay FROM DimEmployee WHERE EndDate IS NOT NULL AND MaritalStatus = 'M' ORDER BY LastName;   The following operators can be used in the WHERE clause:  Operator\tDescription=\tEqual &gt;\tGreater than &lt;\tLess than &gt;=\tGreater than or equal &lt;=\tLess than or equal &lt;&gt;\tNot equal. Note: In some versions of SQL this operator may be written as != BETWEEN\tBetween a certain range LIKE\tSearch for a pattern IN\tTo specify multiple possible values for a column  ","version":"Next","tagName":"h3"},{"title":"DISTINCT with SELECT​","type":1,"pageTitle":"DQL","url":"/my-documentation/docs/DB/SQL/DQL#distinct-with-select","content":" The following example uses DISTINCT to generate a list of all unique titles in the DimEmployee table.  SELECT DISTINCT Title FROM DimEmployee ORDER BY Title;   ","version":"Next","tagName":"h3"},{"title":"SELECT mit GROUP BY​","type":1,"pageTitle":"DQL","url":"/my-documentation/docs/DB/SQL/DQL#select-mit-group-by","content":" The following example finds the total amount for all sales on each day.  SELECT customer_id, COUNT(*) AS order_count FROM orders GROUP BY customer_id; SELECT OrderDateKey, SUM(SalesAmount) AS TotalSales FROM FactInternetSales GROUP BY OrderDateKey ORDER BY OrderDateKey; -- with multiple Groups SELECT OrderDateKey, PromotionKey, AVG(SalesAmount) AS AvgSales, SUM(SalesAmount) AS TotalSales FROM FactInternetSales GROUP BY OrderDateKey, PromotionKey ORDER BY OrderDateKey; -- GROUP BY and WHERE SELECT OrderDateKey, SUM(SalesAmount) AS TotalSales FROM FactInternetSales WHERE OrderDateKey &gt; '20020801' GROUP BY OrderDateKey ORDER BY OrderDateKey;   ","version":"Next","tagName":"h3"},{"title":"SELECT mit HAVING​","type":1,"pageTitle":"DQL","url":"/my-documentation/docs/DB/SQL/DQL#select-mit-having","content":" Wenn Daten aggregiert wurden müssen wir HAVING anstelle von WHERE zum filtern verwenden.  SELECT customer_id, COUNT(*) AS order_count FROM orders GROUP BY customer_id HAVING COUNT(*) &gt; 2; USE AdventureWorks2022; GO SELECT SalesOrderID, SUM(LineTotal) AS SubTotal FROM Sales.SalesOrderDetail GROUP BY SalesOrderID HAVING SUM(LineTotal) &gt; 100000.00 ORDER BY SalesOrderID ;   ","version":"Next","tagName":"h3"},{"title":"SELECT mit ORDER BY​","type":1,"pageTitle":"DQL","url":"/my-documentation/docs/DB/SQL/DQL#select-mit-order-by","content":" Sortiert die Ergebnisse auf- oder absteigend.  SELECT * FROM customers ORDER BY name ASC;   ","version":"Next","tagName":"h3"},{"title":"SELECT mit CASE​","type":1,"pageTitle":"DQL","url":"/my-documentation/docs/DB/SQL/DQL#select-mit-case","content":" Erzeugt bedingte Werte.  SELECT name, CASE WHEN total_amount &gt; 100 THEN 'VIP' ELSE 'Regular' END AS customer_status FROM orders;   ","version":"Next","tagName":"h3"},{"title":"SELECT mit LIMIT​","type":1,"pageTitle":"DQL","url":"/my-documentation/docs/DB/SQL/DQL#select-mit-limit","content":" Begrenzt die Anzahl der zurückgegebenen Zeilen.  SELECT * FROM customers LIMIT 5;   ","version":"Next","tagName":"h3"},{"title":"SELECT TOP​","type":1,"pageTitle":"DQL","url":"/my-documentation/docs/DB/SQL/DQL#select-top","content":" Begrenzt die Anzahl der zurückgegebenen Zeilen.  -- Select the first 3 records of the Customers table SELECT TOP 3 * FROM Customers; -- the first 50% of the records from the &quot;Customers&quot; table SELECT TOP 50 PERCENT * FROM Customers;   ","version":"Next","tagName":"h3"},{"title":"JOIN​","type":1,"pageTitle":"DQL","url":"/my-documentation/docs/DB/SQL/DQL#join","content":" JOINs ermöglichen es, Daten aus zwei oder mehr Tabellen anhand einer gemeinsamen Spalte zu verknüpfen.  ","version":"Next","tagName":"h2"},{"title":"INNER JOIN​","type":1,"pageTitle":"DQL","url":"/my-documentation/docs/DB/SQL/DQL#inner-join","content":" Zeige alle Kunden, die mindestens eine Bestellung haben.  SELECT k.Name, b.Bestelldatum FROM Kunden k INNER JOIN Bestellungen b ON k.KundenID = b.KundenID;   Ergebnis: Nur Kunden, für die es einen passenden Eintrag in Bestellungen gibt, werden angezeigt.  ","version":"Next","tagName":"h3"},{"title":"LEFT JOIN​","type":1,"pageTitle":"DQL","url":"/my-documentation/docs/DB/SQL/DQL#left-join","content":" (oder LEFT OUTER JOIN)Zeige alle Kunden – auch jene ohne Bestellung. Für Kunden ohne Bestellung wird der Bestellwert NULL sein.  SELECT k.Name, b.Bestelldatum FROM Kunden k LEFT JOIN Bestellungen b ON k.KundenID = b.KundenID;   ","version":"Next","tagName":"h3"},{"title":"RIGHT JOIN​","type":1,"pageTitle":"DQL","url":"/my-documentation/docs/DB/SQL/DQL#right-join","content":" Zeige alle Bestellungen und die zugehörigen Kundendaten. Falls es eine Bestellung ohne zugeordneten Kunden gibt (selten), werden Kundendaten als NULL angezeigt.  SELECT k.Name, b.Bestelldatum FROM Kunden k RIGHT JOIN Bestellungen b ON k.KundenID = b.KundenID;   ","version":"Next","tagName":"h3"},{"title":"FULL JOIN​","type":1,"pageTitle":"DQL","url":"/my-documentation/docs/DB/SQL/DQL#full-join","content":" Zeige alle Kunden und alle Bestellungen, auch wenn keine direkte Übereinstimmung vorliegt.  SELECT k.Name, b.Bestelldatum FROM Kunden k FULL OUTER JOIN Bestellungen b ON k.KundenID = b.KundenID;   Hinweis: FULL OUTER JOIN wird nicht von allen Datenbanken unterstützt (z. B. MySQL nicht standardmäßig).  ","version":"Next","tagName":"h3"},{"title":"CROSS JOIN​","type":1,"pageTitle":"DQL","url":"/my-documentation/docs/DB/SQL/DQL#cross-join","content":" Erzeuge das kartesische Produkt zweier Tabellen. Dies liefert jede Kombination von Zeilen aus beiden Tabellen.  SELECT k.Name, p.Produktname FROM Kunden k CROSS JOIN Produkte p;   Ergebnis: Jeder Kunde wird mit jedem Produkt kombiniert – nützlich für bestimmte analytische Aufgaben.  ","version":"Next","tagName":"h3"},{"title":"Subselects​","type":1,"pageTitle":"DQL","url":"/my-documentation/docs/DB/SQL/DQL#subselects","content":" Subqueries sind verschachtelte Abfragen, die innerhalb einer äußeren (Haupt‑)Abfrage verwendet werden. Sie können in der SELECT-, FROM- oder WHERE-Klausel vorkommen.  Selbständige Unterabfragen: Die Unterabfrage ist von der äußeren, sie umgebenden Anweisung unabhängig. Sie kann auch separat ausgeführt werden. Korrelierte Unterabfragen: Die Unterabfrage bezieht sich auf einen oder mehrere Werte der äußeren, sie umgebenden Anweisung. Sie kann nicht separat ausgeführt werden.  Unterscheidung nach Ergebnis:  skalar =&gt; liefert genau einen einzelnen Wert zurückmehrwertig =&gt; liefert eine Liste von einzelnen Werten zurücktabellenwertig =&gt; liefert eine Tabelle zurück  ","version":"Next","tagName":"h2"},{"title":"Subquery in der WHERE-Klausel​","type":1,"pageTitle":"DQL","url":"/my-documentation/docs/DB/SQL/DQL#subquery-in-der-where-klausel","content":" Finde alle Kunden, deren Stadt in der Liste der Städte aus der Tabelle Filialen (z. B. in Deutschland) vorkommt.  SELECT * FROM Kunden WHERE Stadt IN ( SELECT Stadt FROM Filialen WHERE Land = 'DE' );   ","version":"Next","tagName":"h3"},{"title":"Korrelierte Subquery in der SELECT-Klausel​","type":1,"pageTitle":"DQL","url":"/my-documentation/docs/DB/SQL/DQL#korrelierte-subquery-in-der-select-klausel","content":" Zeige den Namen jedes Kunden sowie die Anzahl seiner Bestellungen. Angenommen, Kunden hat die Spalte KundenID und Bestellungen hat ebenfalls eine Spalte KundenID.  SELECT k.Name, ( SELECT COUNT(*) FROM Bestellungen b WHERE b.KundenID = k.KundenID ) AS Bestellanzahl FROM Kunden k;   ","version":"Next","tagName":"h3"},{"title":"Subquery im FROM-Teil (Derived Table)​","type":1,"pageTitle":"DQL","url":"/my-documentation/docs/DB/SQL/DQL#subquery-im-from-teil-derived-table","content":" Ermittle Kunden, die mehr als 5 Bestellungen haben, indem Du zuerst die Bestellanzahl pro Kunde aggregierst.  SELECT t.KundenID, t.Bestellanzahl FROM ( SELECT KundenID, COUNT(*) AS Bestellanzahl FROM Bestellungen GROUP BY KundenID ) t WHERE t.Bestellanzahl &gt; 5;   ","version":"Next","tagName":"h3"},{"title":"Subquery in einem INSERT INTO​","type":1,"pageTitle":"DQL","url":"/my-documentation/docs/DB/SQL/DQL#subquery-in-einem-insert-into","content":" INSERT INTO Bestellungen (KundeID, ProduktID, Bestelldatum) SELECT KundeID, 101, GETDATE() FROM Kunden WHERE Land = 'Deutschland';   ","version":"Next","tagName":"h3"},{"title":"UNION​","type":1,"pageTitle":"DQL","url":"/my-documentation/docs/DB/SQL/DQL#union","content":" Mit UNION werden die Ergebnisse von zwei (oder mehr) SELECT-Abfragen kombiniert. Dabei müssen alle Abfragen die gleiche Anzahl und kompatible Datentypen von Spalten zurückgeben.  Hinweis: Standardmäßig entfernt UNION Duplikate. Möchtest Du alle Zeilen (inklusive Duplikate), verwende UNION ALL.  Beispiel: Stell Dir vor, Du hast zwei Tabellen: Kunden und Lieferanten. Beide haben Spalten Name und Stadt.  -- Alle Namen und Städte aus beiden Tabellen (ohne Duplikate) SELECT Name, Stadt FROM Kunden UNION SELECT Name, Stadt FROM Lieferanten;   -- Mit Duplikaten, falls diese wichtig sind SELECT Name, Stadt FROM Kunden UNION ALL SELECT Name, Stadt FROM Lieferanten;   ","version":"Next","tagName":"h2"},{"title":"INTERSECT​","type":1,"pageTitle":"DQL","url":"/my-documentation/docs/DB/SQL/DQL#intersect","content":" Mit INTERSECT erhältst Du nur die Zeilen, die in beiden Abfragen vorkommen.  Wichtig: Nicht alle Datenbanksysteme unterstützen INTERSECT (z. B. MySQL unterstützt es nicht nativ).  Beispiel: Finde die Personen, die sowohl in der Kunden- als auch in der Lieferanten-Tabelle vorkommen.  SELECT Name, Stadt FROM Kunden INTERSECT SELECT Name, Stadt FROM Lieferanten;   Hinweis: Nur die Datensätze, die in beiden Abfragen identisch sind, werden zurückgegeben.  ","version":"Next","tagName":"h2"},{"title":"EXCEPT​","type":1,"pageTitle":"DQL","url":"/my-documentation/docs/DB/SQL/DQL#except","content":" Mit EXCEPT (in einigen Systemen auch als MINUS bekannt) erhältst Du die Zeilen aus der ersten Abfrage, die nicht in der zweiten vorkommen.  Hinweis: Auch EXCEPT wird nicht in allen Datenbanksystemen unterstützt.  Beispiel: Finde alle Kunden, die keine Lieferanten sind.  SELECT Name, Stadt FROM Kunden EXCEPT SELECT Name, Stadt FROM Lieferanten;   Ergebnis: Es werden alle Zeilen aus Kunden angezeigt, die nicht exakt in Lieferanten vorkommen. ","version":"Next","tagName":"h2"},{"title":"Paradigmen der Programmierung","type":0,"sectionRef":"#","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Paradigmen","content":"","keywords":"","version":"Next"},{"title":"Einteilung​","type":1,"pageTitle":"Paradigmen der Programmierung","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Paradigmen#einteilung","content":" Imperativ\tDeklarativStrukturiert\tFunktional Prozedural\tLogisch OOP\tDatenflussorientiert  ","version":"Next","tagName":"h2"},{"title":"Kombinationen von Paradigmen​","type":1,"pageTitle":"Paradigmen der Programmierung","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Paradigmen#kombinationen-von-paradigmen","content":" Viele moderne Programmiersprachen unterstützen mehrere Paradigmen, sodass Entwickler die Stärken verschiedener Ansätze kombinieren können. Beispielsweise kann Python sowohl prozedural als auch objektorientiert und funktional verwendet werden.  Die Wahl des Paradigmas hängt oft von der Natur des Projekts, den Präferenzen der Entwickler und den spezifischen Anforderungen der Anwendung ab.  ","version":"Next","tagName":"h3"},{"title":"Imperative Programmierung​","type":1,"pageTitle":"Paradigmen der Programmierung","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Paradigmen#imperative-programmierung","content":" &quot;Wie&quot; wird etwas gemacht?  Prinzip: Beschreibt Schritt für Schritt, wie eine Berechnung durchgeführt wird.Merkmal: Zustandsänderungen (Seiteneffekte) sind üblich.Denkweise: Programmieren wie ein Kochrezept – jeder Schritt verändert den Zustand.  Merkmale imperativer Programmierung:  Befehlsfolgen: Ein Programm besteht aus einer Sequenz von Befehlen (Anweisungen), die den Zustand des Programms schrittweise ändern.Veränderung von Variablen: Variablen werden direkt verändert, und diese Veränderungen steuern den Ablauf des Programms.Zustandsverwaltung: Der Zustand des Programms wird explizit verwaltet, oft durch Zuweisung von Werten zu Variablen.  Praktische Auswirkungen von Zustandsänderungen  Fehleranfälligkeit: Zustandsänderungen erhöhen das Risiko von Fehlern, da der Programmierer genau verfolgen muss, wann und wie der Zustand verändert wird. Ein Fehler bei der Zustandsänderung (z. B. durch unabsichtliches Überschreiben von Variablen oder unsachgemäße Modifikation von Objekten) kann dazu führen, dass der Code nicht wie erwartet funktioniert. Nebenläufigkeit (Concurrency): Ein häufiges Problem bei der imperativen Programmierung sind Nebenläufigkeitsfehler. Wenn mehrere Threads oder Prozesse gleichzeitig auf denselben Zustand zugreifen und ihn verändern, kann dies zu Race Conditions oder anderen unvorhersehbaren Fehlern führen.  Beispiel: Summer einer Liste int Sum(int[] zahlen) { int summe = 0; // Initialisierung des Zustands foreach (int zahl in zahlen) { summe += zahl; // Zustand (summe) wird verändert } return summe; // Endergebnis }   Typische Anwendungsgebiete: GUI-Programmierung, Spieleentwicklung.Typische Programmiersprachen: JavaScript, C#, Java (für GUI-Anwendungen).  ","version":"Next","tagName":"h2"},{"title":"Prozedurales Programmieren​","type":1,"pageTitle":"Paradigmen der Programmierung","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Paradigmen#prozedurales-programmieren","content":" Beschreibung: Prozedurales Programmieren ist ein Paradigma, bei dem der Code in Prozeduren oder Funktionen organisiert ist. Diese Funktionen enthalten Anweisungen, die sequentiell ausgeführt werden.  Merkmale:  Verwendung von Funktionen oder Prozeduren.Fokus auf die Ausführung von Befehlen und Kontrollstrukturen wie Schleifen und Verzweigungen.Typische Programmiersprachen: C, Pascal, BASIC  ","version":"Next","tagName":"h3"},{"title":"Objektorientiertes Programmieren (OOP)​","type":1,"pageTitle":"Paradigmen der Programmierung","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Paradigmen#objektorientiertes-programmieren-oop","content":" Beschreibung: Objektorientiertes Programmieren organisiert den Code um Objekte, die Instanzen von Klassen sind. Klassen definieren das Verhalten und die Eigenschaften von Objekten. Primär imperativ - kann aber deklarative Anteile haben.  Merkmale:  Kapselung: Daten und Methoden sind in Klassen gebündelt.Vererbung: Klassen können Eigenschaften und Methoden von anderen Klassen erben.Polymorphismus: Objekte können auf verschiedene Weise auf die gleiche Schnittstelle reagieren.Abstraktion: Komplexität wird durch Abstraktion reduziert.  Typische Programmiersprachen: Java, C++, Python, C#.  ","version":"Next","tagName":"h3"},{"title":"Deklarative Programmierung​","type":1,"pageTitle":"Paradigmen der Programmierung","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Paradigmen#deklarative-programmierung","content":" Beschreibung: Deklaratives Programmieren ist ein Paradigma, bei dem die Logik der Berechnung ohne explizite Kontrollflussanweisungen beschrieben wird. Es sagt, was das Programm tun soll, statt wie es dies tun soll.  Merkmale:  Fokus auf das Was statt auf das Wie.Beschreibungen von gewünschten Ergebnissen und nicht der Prozeduren.Typische Programmiersprachen: SQL, HTML  ","version":"Next","tagName":"h2"},{"title":"Funktionale Programmierung​","type":1,"pageTitle":"Paradigmen der Programmierung","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Paradigmen#funktionale-programmierung","content":" &quot;Was&quot; soll berechnet werden?  Prinzip: Beschreibt was berechnet werden soll, ohne explizite Zustandsänderungen.Merkmal: Keine Seiteneffekte, keine veränderbaren Variablen.Denkweise: Programmieren wie in der Mathematik – eine Funktion hat immer denselben Rückgabewert für die gleichen Eingaben.  Die besonderen Eigenschaften der funktionalen Programmierung ermöglichen es, auf die, in der imperativen Programmierung benötigten, inneren Zustände eines Berechnungsprozesses ebenso zu verzichten, wie auf die zugehörigen Zustandsänderungen, die auch Seiteneffekte genannt werden.  Die funktionale Programmierung ist durch folgende Eigenschaften gekennzeichnet:  Computerprogramme werden als Funktionen verstanden, die für eine Eingabe eine Ausgabe liefern, die nur von dieser abhängig ist.Funktionen werden nicht als Abfolge von Anweisungen dargestellt, sondern als ineinander verschachtelte Funktionsaufrufe.Funktionen sind gegenüber allen anderen Datenobjekten gleichberechtigt. Das bedeutet, dass sie als Parameter in Funktionen eingehen dürfen und ebenso als Berechnungsergebnisse aus Funktionen hervorgehen können. Insbesondere können Funktionen wie andere Datenobjekte zur Laufzeit erstellt werden oder entfallen.  Summenberechnung C# lambda Schreibweise int Sum(int[] zahlen) =&gt; zahlen.Sum();   Warum eine Funktion innerhalb einer Funktion aufrufen die dasselbe Ergebnis liefert? Denn Sum(zahlen) gibt letztlich den gleichen Wert zurück wie zahlen.Sum().  Abstraktion: Versteckt die Details der Implementierung.Lesbarkeit: Macht den Code klarer und verständlicher.Wiederverwendbarkeit: Erleichtert die Nutzung der Funktion an verschiedenen Stellen.Flexibilität: Erlaubt dir, später zusätzliche Logik hinzuzufügen (wie Validierung oder Fehlerbehandlung).Einfacher zu ändern: Falls du später die Summenberechnung anpassen möchtest, kannst du das an einem Ort tun, ohne den gesamten Code ändern zu müssen.  Typische Programmiersprachen: Haskell, Lisp, Erlang, Scala.  ","version":"Next","tagName":"h3"},{"title":"Logisches Programmieren​","type":1,"pageTitle":"Paradigmen der Programmierung","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Paradigmen#logisches-programmieren","content":" Beschreibung: Logisches Programmieren ist ein Paradigma, bei dem Programme als eine Menge von logischen Aussagen und Regeln beschrieben werden. Die Programmausführung erfolgt durch logisches Schließen.  Merkmale:  Verwendung von logischen Klauseln und Prädikaten.Fokus auf Deklarationen und Regeln statt auf Anweisungen.Typische Programmiersprachen: Prolog ","version":"Next","tagName":"h3"},{"title":"Prinzipien","type":0,"sectionRef":"#","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Prinzipien","content":"","keywords":"","version":"Next"},{"title":"DRY​","type":1,"pageTitle":"Prinzipien","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Prinzipien#dry","content":" Das DRY-Prinzip (Don't Repeat Yourself) ist ein fundamentales Konzept der Softwareentwicklung, das besagt, dass Redundanz vermieden werden sollte. Jede Information oder Logik sollte nur einmal existieren, um Wartung, Erweiterbarkeit und Lesbarkeit zu verbessern.  Warum ist DRY wichtig?  Vermeidung von Inkonsistenzen – Mehrere Kopien derselben Logik führen zu Fehlern, wenn nur eine Stelle aktualisiert wird.Erhöhte Wartbarkeit – Änderungen müssen nur an einer Stelle vorgenommen werden.Kürzerer und verständlicher Code – Weniger Wiederholungen bedeuten besseren Überblick.  ","version":"Next","tagName":"h3"},{"title":"KISS​","type":1,"pageTitle":"Prinzipien","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Prinzipien#kiss","content":" Das KISS-Prinzip (Keep It Simple, Stupid) ist ein Designgrundsatz, der besagt, dass Systeme, Code oder Prozesse so einfach wie möglich gehalten werden sollten. Es stammt aus der Softwareentwicklung, wird aber auch in anderen Bereichen wie Ingenieurwesen, Design und Projektmanagement angewendet.  Kernidee​  Komplexität erhöht die Fehleranfälligkeit, Wartungskosten und die Einarbeitungszeit. Eine einfache Lösung ist oft effektiver und langlebiger als eine übermäßig komplizierte.  Anwendung in der Softwareentwicklung​  Lesbarkeit: Einfacher Code ist leichter zu verstehen und zu debuggen. Wartbarkeit: Weniger Abhängigkeiten und verschachtelte Strukturen erleichtern Änderungen. Effizienz: Komplexität kann unnötige Ressourcen beanspruchen. Fehlerminimierung: Je einfacher der Code, desto weniger Fehlerquellen gibt es.  Beispiel​  Schlecht (zu kompliziert) string ReverseString(string input) { char[] array = input.ToCharArray(); Array.Reverse(array); return new string(array); }   Einfacher (KISS) string ReverseString(string input) =&gt; new string(input.Reverse().ToArray());   Das zweite Beispiel ist prägnanter, verständlicher und nutzt eingebaute Funktionen.  ","version":"Next","tagName":"h2"},{"title":"SOLID​","type":1,"pageTitle":"Prinzipien","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Prinzipien#solid","content":" ","version":"Next","tagName":"h2"},{"title":"1. Single Responsibility Principle (SRP)​","type":1,"pageTitle":"Prinzipien","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Prinzipien#1-single-responsibility-principle-srp","content":" -&gt; Eine Klasse, eine Aufgabe  &quot;Eine Klasse sollte nur einen einzigen Grund zur Änderung haben.&quot; Jede Klasse sollte genau eine Verantwortung haben, damit sie leicht verständlich und wartbar bleibt.  Beispiel Schlecht class Report { public void GenerateReport() { /* Report generieren */ } public void SaveToFile() { /* Datei speichern */ } } Besser class Report { public void Generate() { /* Report generieren */ } } class ReportSaver { public void SaveToFile(Report report) { /* Datei speichern */ } } Trennung von Berichtserstellung und Speichern.  ","version":"Next","tagName":"h3"},{"title":"2. Open/Closed Principle (OCP)​","type":1,"pageTitle":"Prinzipien","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Prinzipien#2-openclosed-principle-ocp","content":" -&gt; Offen für Erweiterung, geschlossen für Modifikation  &quot;Software-Entitäten sollten erweiterbar, aber nicht durch Änderungen modifizierbar sein.&quot; Statt Code zu ändern, sollten neue Funktionalitäten durch Erweiterung hinzugefügt werden.  Beispiel Schlecht class PaymentProcessor { public void ProcessPayment(string type) { if (type == &quot;CreditCard&quot;) { /* Kreditkarte */ } else if (type == &quot;PayPal&quot;) { /* PayPal */ } } } Besser interface IPaymentMethod { void Pay(); } class CreditCardPayment : IPaymentMethod { public void Pay() { /* Kreditkarte */ } } class PayPalPayment : IPaymentMethod { public void Pay() { /* PayPal */ } } class PaymentProcessor { public void ProcessPayment(IPaymentMethod payment) { payment.Pay(); } } Leicht erweiterbar ohne bestehende Code-Änderungen.  ","version":"Next","tagName":"h3"},{"title":"3. Liskov Substitution Principle (LSP)​","type":1,"pageTitle":"Prinzipien","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Prinzipien#3-liskov-substitution-principle-lsp","content":" -&gt; Ersetzbarkeit von Unterklassen  &quot;Eine Unterklasse muss sich wie ihre Oberklasse verhalten können.&quot; Eine Unterklasse sollte sich ohne Seiteneffekte anstelle der Oberklasse einsetzen lassen.  Beispiel Schlecht class Bird { public virtual void Fly() { } } class Penguin : Bird { public override void Fly() { throw new NotImplementedException(); // ❌ Pinguine können nicht fliegen! } } Besser abstract class Bird { } interface IFlyable { void Fly(); } class Sparrow : Bird, IFlyable { public void Fly() { /* Fliegen */ } } class Penguin : Bird { /* Kein Fly() notwendig */ } Pinguine müssen nicht fliegen können.  ","version":"Next","tagName":"h3"},{"title":"4. Interface Segregation Principle (ISP)​","type":1,"pageTitle":"Prinzipien","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Prinzipien#4-interface-segregation-principle-isp","content":" -&gt; Spezialisierte Schnittstellen statt einer großen  &quot;Clients sollten nicht von Interfaces abhängig sein, die sie nicht nutzen.&quot; Statt eine riesige Schnittstelle zu haben, sollten mehrere kleine, spezialisierte Interfaces verwendet werden.  Beispiel Schlecht interface IWorker { void Work(); void Eat(); } class Robot : IWorker { public void Work() { /* Arbeiten */ } public void Eat() { throw new NotImplementedException(); } // Roboter essen nicht! } Besser interface IWorkable { void Work(); } interface IEatable { void Eat(); } class Human : IWorkable, IEatable { public void Work() { /* Arbeiten */ } public void Eat() { /* Essen */ } } class Robot : IWorkable { public void Work() { /* Arbeiten */ } } Kein unnötiger Code für Roboter.  ","version":"Next","tagName":"h3"},{"title":"5. Dependency Inversion Principle (DIP)​","type":1,"pageTitle":"Prinzipien","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Prinzipien#5-dependency-inversion-principle-dip","content":" -&gt; Abhängigkeiten von Abstraktionen statt konkreten Implementierungen  &quot;Module höherer Ebenen sollten nicht von Modulen niedriger Ebenen abhängen. Beide sollten von Abstraktionen abhängen.&quot; Statt konkrete Klassen zu verwenden, sollte mit Schnittstellen oder Abstraktionen gearbeitet werden.  Beispiel Schlecht class LightBulb { public void TurnOn() { /* Licht an */ } } class Switch { private LightBulb bulb = new LightBulb(); public void Operate() { bulb.TurnOn(); } } Besser interface ISwitchable { void TurnOn(); } class LightBulb : ISwitchable { public void TurnOn() { /* Licht an */ } } class Switch { private ISwitchable device; public Switch(ISwitchable device) { this.device = device; } public void Operate() { device.TurnOn(); } } Flexibel für andere Geräte, nicht nur Glühbirnen.  ","version":"Next","tagName":"h3"},{"title":"Zusammenfassung​","type":1,"pageTitle":"Prinzipien","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Prinzipien#zusammenfassung","content":" Prinzip\tBedeutung\tVorteilSRP (Single Responsibility)\tEine Klasse, eine Aufgabe\tErhöht Wartbarkeit OCP (Open/Closed)\tOffen für Erweiterung, geschlossen für Modifikation\tBessere Erweiterbarkeit LSP (Liskov Substitution)\tUnterklassen müssen sich wie Oberklassen verhalten\tKeine unerwarteten Fehler ISP (Interface Segregation)\tSpezialisierte Schnittstellen statt riesiger Interfaces\tKeine unnötigen Abhängigkeiten DIP (Dependency Inversion)\tAbhängig von Abstraktionen, nicht von Implementierungen\tFlexibler und testbarer Code ","version":"Next","tagName":"h3"},{"title":"Docusaurus","type":0,"sectionRef":"#","url":"/my-documentation/docs/Grundlagen/Sonstiges/site/docusaurus","content":"","keywords":"","version":"Next"},{"title":"Docs Frontmatter​","type":1,"pageTitle":"Docusaurus","url":"/my-documentation/docs/Grundlagen/Sonstiges/site/docusaurus#docs-frontmatter","content":" Frontmatter  Name\tType\tDefault\tDescriptionid\tstring\tfile path (including folders, without the extension)\tA unique document ID. title\tstring\tMarkdown title or id\tThe text title of your document. Used for the page metadata and as a fallback value in multiple places (sidebar, next/previous buttons...). Automatically added at the top of your doc if it does not contain any Markdown title. pagination_label\tstring\tsidebar_label or title\tThe text used in the document next/previous buttons for this document. sidebar_label\tstring\ttitle\tThe text shown in the document sidebar for this document. sidebar_position\tnumber\tDefault ordering\tControls the position of a doc inside the generated sidebar slice when using autogenerated sidebar items. See also Autogenerated sidebar metadata. sidebar_class_name\tstring\tundefined\tGives the corresponding sidebar label a special class name when using autogenerated sidebars. sidebar_custom_props\tobject\tundefined\tAssign custom props to the sidebar item referencing this doc displayed_sidebar\tstring\tundefined\tForce the display of a given sidebar when browsing the current document. Read the multiple sidebars guide for details. hide_title\tboolean\tfalse\tWhether to hide the title at the top of the doc. It only hides a title declared through the front matter, and have no effect on a Markdown title at the top of your document. hide_table_of_contents\tboolean\tfalse\tWhether to hide the table of contents to the right. toc_min_heading_level\tnumber\t2\tThe minimum heading level shown in the table of contents. Must be between 2 and 6 and lower or equal to the max value. toc_max_heading_level\tnumber\t3\tThe max heading level shown in the table of contents. Must be between 2 and 6. pagination_next\tstring | null\tNext doc in the sidebar\tThe ID of the documentation you want the &quot;Next&quot; pagination to link to. Use null to disable showing &quot;Next&quot; for this page. pagination_prev\tstring | null\tPrevious doc in the sidebar\tThe ID of the documentation you want the &quot;Previous&quot; pagination to link to. Use null to disable showing &quot;Previous&quot; for this page. parse_number_prefixes\tboolean\tnumberPrefixParser plugin option\tWhether number prefix parsing is disabled on this doc. See also Using number prefixes. custom_edit_url\tstring | null\tComputed using the editUrl plugin option\tThe URL for editing this document. Use null to disable showing &quot;Edit this page&quot; for this page. keywords\tstring[]\tundefined\tKeywords meta tag for the document page, for search engines. description\tstring\tThe first line of Markdown content\tThe description of your document, which will become the &lt;meta name=&quot;description&quot; content=&quot;...&quot;/&gt; and &lt;meta property=&quot;og:description&quot; content=&quot;...&quot;/&gt; in &lt;head&gt;, used by search engines. image\tstring\tundefined\tCover or thumbnail image that will be used as the &lt;meta property=&quot;og:image&quot; content=&quot;...&quot;/&gt; in the &lt;head&gt;, enhancing link previews on social media and messaging platforms. slug\tstring\tFile path\tAllows to customize the document URL (/&lt;routeBasePath&gt;/&lt;slug&gt;). Support multiple patterns: slug: my-doc, slug: /my/path/myDoc, slug: /. tags\tTag[]\tundefined\tA list of strings or objects of two string fields label and permalink to tag to your docs. Strings can be a reference to keys of a tags file (usually tags.yml) draft\tboolean\tfalse\tDraft documents will only be available during development. unlisted\tboolean\tfalse\tUnlisted documents will be available in both development and production. They will be &quot;hidden&quot; in production, not indexed, excluded from sitemaps, and can only be accessed by users having a direct link. last_update\tFrontMatterLastUpdate\tundefined\tAllows overriding the last update author/date. Date can be any parsable date string.  ","version":"Next","tagName":"h3"},{"title":"MDX​","type":1,"pageTitle":"Docusaurus","url":"/my-documentation/docs/Grundlagen/Sonstiges/site/docusaurus#mdx","content":" Import image import image_identifier from './img/image.jpeg'; &lt;img src={image_identifier} class=&quot;my-class&quot; alt=&quot;alt text&quot; /&gt;   Tabs &lt;Tabs&gt; &lt;TabItem value=&quot;first&quot; label=&quot;First&quot; default&gt; first &lt;/TabItem&gt; &lt;TabItem value=&quot;second&quot; label=&quot;Second&quot;&gt; second &lt;/TabItem&gt; &lt;TabItem value=&quot;third&quot; label=&quot;Third&quot;&gt; third &lt;/TabItem&gt; &lt;/Tabs&gt;   Collabsible &lt;details&gt; &lt;summary&gt;Name&lt;/summary&gt; Content &lt;/details&gt;   ","version":"Next","tagName":"h3"},{"title":"Infima​","type":1,"pageTitle":"Docusaurus","url":"/my-documentation/docs/Grundlagen/Sonstiges/site/docusaurus#infima","content":" infima Docs  center an image &lt;div class=&quot;text--center&quot;&gt; &lt;img src={img_echteteilmenge} class=&quot;img-400 text--center&quot; alt=&quot;echte teilmenge&quot; /&gt; &lt;/div&gt;   colored text &lt;p class=&quot;text--primary&quot;&gt;Primary Text&lt;/p&gt; &lt;p class=&quot;text--secondary&quot;&gt;Secondary Text&lt;/p&gt; &lt;p class=&quot;text--success&quot;&gt;Success Text&lt;/p&gt; &lt;p class=&quot;text--info&quot;&gt;Info Text&lt;/p&gt; &lt;p class=&quot;text--warning&quot;&gt;Warning Text&lt;/p&gt; &lt;p class=&quot;text--danger&quot;&gt;Danger Text&lt;/p&gt;   badges &lt;span class=&quot;badge badge--primary&quot;&gt;Primary&lt;/span&gt; &lt;span class=&quot;badge badge--secondary&quot;&gt;Secondary&lt;/span&gt; &lt;span class=&quot;badge badge--success&quot;&gt;Success&lt;/span&gt; &lt;span class=&quot;badge badge--info&quot;&gt;Info&lt;/span&gt; &lt;span class=&quot;badge badge--warning&quot;&gt;Warning&lt;/span&gt; &lt;span class=&quot;badge badge--danger&quot;&gt;Danger&lt;/span&gt;   button-like links &lt;div&gt; &lt;a class=&quot;button button--primary&quot; href=&quot;#url&quot;&gt;Primary&lt;/a&gt; &lt;a class=&quot;button button--secondary&quot; href=&quot;#url&quot;&gt;Secondary&lt;/a&gt; &lt;a class=&quot;button button--success&quot; href=&quot;#url&quot;&gt;Success&lt;/a&gt; &lt;a class=&quot;button button--info&quot; href=&quot;#url&quot;&gt;Info&lt;/a&gt; &lt;a class=&quot;button button--warning&quot; href=&quot;#url&quot;&gt;Warning&lt;/a&gt; &lt;a class=&quot;button button--danger&quot; href=&quot;#url&quot;&gt;Danger&lt;/a&gt; &lt;a class=&quot;button button--link&quot; href=&quot;#url&quot;&gt;Link&lt;/a&gt; &lt;/div&gt;   card &lt;div class=&quot;card-demo&quot;&gt; &lt;div class=&quot;card&quot;&gt; &lt;div class=&quot;card__header&quot;&gt; &lt;h3&gt;Lorem Ipsum&lt;/h3&gt; &lt;/div&gt; &lt;div class=&quot;card__body&quot;&gt; &lt;p&gt; Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Quis ipsum suspendisse ultrices gravida. &lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;card__footer&quot;&gt; &lt;button class=&quot;button button--secondary button--block&quot;&gt;See All&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  ","version":"Next","tagName":"h3"},{"title":"Styleguide","type":0,"sectionRef":"#","url":"/my-documentation/docs/Grundlagen/Sonstiges/site/styleguide","content":"","keywords":"","version":"Next"},{"title":"Headings​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Grundlagen/Sonstiges/site/styleguide#headings","content":" H1  ","version":"Next","tagName":"h3"},{"title":"H2​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Grundlagen/Sonstiges/site/styleguide#h2","content":" ","version":"Next","tagName":"h2"},{"title":"H3​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Grundlagen/Sonstiges/site/styleguide#h3","content":" H4​  H5​  H6​  Heading IDs​  // ## Hello World -&gt; generated ID = hello-world [link](#heading-id)   ","version":"Next","tagName":"h3"},{"title":"Emphasis​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Grundlagen/Sonstiges/site/styleguide#emphasis","content":" Bold Text Italic Text Strikethrough This is a codeline  ","version":"Next","tagName":"h3"},{"title":"Paragraph​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Grundlagen/Sonstiges/site/styleguide#paragraph","content":" Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.  ","version":"Next","tagName":"h3"},{"title":"Lists​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Grundlagen/Sonstiges/site/styleguide#lists","content":" number onenumber twonumber three indented 1indented 2 bullet 1bullet 2bullet 3bullet 4  bulletlist subbullet 1subbullet 2 Checklist 1 Checklist 2 Checklist 3  ","version":"Next","tagName":"h3"},{"title":"Codeblocks​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Grundlagen/Sonstiges/site/styleguide#codeblocks","content":" Codeblock with line numbers and Title # This is a codeblock def add(*stuff): sum = 0 stuff = list(stuff) stuff[0] = 0 for i in stuff: sum += i return sum print(add(1,2,3,4,5,6))   ","version":"Next","tagName":"h3"},{"title":"Quote​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Grundlagen/Sonstiges/site/styleguide#quote","content":" people, meetings, projects, sources code snippets, cheat sheets, project doku ideen,  ","version":"Next","tagName":"h3"},{"title":"Tables​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Grundlagen/Sonstiges/site/styleguide#tables","content":" Shortcut Key (General)\tFunctions\tShortcut Key (Editing)\tFunctionsCtrl + S\tEditor: Saves the file\tCtrl + B\tBold Selected Text Ctrl + N\tCreates a new note\tCtrl + I\tItalicize Selected Text Ctrl + P\tOpen command pallete\tCtrl + K\tInsert External Link to Selected Text Ctrl + O\tOpens Quick Switcher\tCtrl + ]\tIndent Ctrl + Shift + F\tSearch in all files\tCtrl + [\tUnindent Ctrl + G\tOpens graph view\tCtrl + D\tDelete current line Ctrl + Alt + ←\tNavigate Back\tCtrl + V\tDuplicate current line Ctrl + Alt + →\tNavigate forth\tCtrl + Click\tOpen Note in Current Panel via Link Ctrl + F\tSearches current file\tCtrl + Shift + Click\tOpen Note in New Panel via Link Ctrl + E\tToggle edit/preview modes\tCtrl + N (Cmd + N on Mac)\tNew Note Ctrl + ,\tOpen Settings\tCtrl + Shift + D (Cmd + Shift + D on Mac)\tCreate a Daily Note Ctrl + Tab\tNext tab\tCtrl + / (Cmd + / on Mac)\tToggle Command Palette Ctrl + Shift + Tab\tPrevious tab\tCtrl + E (Cmd + E on Mac)\tOpen Graph View Alt + Tab\tNext App\tCtrl + Click (Cmd + Click on Mac)\tOpen Link in New Pane Alt + Shift + Tab\tPrevious App Win + Tab\tTask View Win + Shift + Tab\tNext Window   ","version":"Next","tagName":"h3"},{"title":"Callouts​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Grundlagen/Sonstiges/site/styleguide#callouts","content":" Optional Title with some Markdown syntax! Some content with Markdown syntax. Check this api.  tip Some content with Markdown syntax. Check this api.  info Some content with Markdown syntax. Check this api.  warning Some content with Markdown syntax. Check this api.  danger Some content with Markdown syntax. Check this api.  ","version":"Next","tagName":"h3"},{"title":"Nested Callouts​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Grundlagen/Sonstiges/site/styleguide#nested-callouts","content":" Parent Parent content Child Child content Deep Child Deep child content  ","version":"Next","tagName":"h3"},{"title":"Collabsible​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Grundlagen/Sonstiges/site/styleguide#collabsible","content":" Toggle me! This is the detailed content console.log(&quot;Markdown features including the code block are available&quot;); You can use Markdown here including bold and italic text, and inline link Nested toggle! Some surprise inside... 😲😲😲😲😲  ","version":"Next","tagName":"h3"},{"title":"Tabs (mdx)​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Grundlagen/Sonstiges/site/styleguide#tabs-mdx","content":" Tabs Documentation  AppleOrangeBanana This is an apple 🍎  Tabs in Callouts​  Tabs AppleOrangeBanana This is an apple 🍎  Tabs with Codeblocks​  PythonC# # This is a codeblock def add(*stuff): sum = 0 stuff = list(stuff) stuff[0] = 0 for i in stuff: sum += i return sum print(add(1,2,3,4,5,6))   ","version":"Next","tagName":"h3"},{"title":"Inline TOC (mdx)​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Grundlagen/Sonstiges/site/styleguide#inline-toc-mdx","content":" HeadingsH2 H3EmphasisParagraphListsCodeblocksQuoteTablesCalloutsNested CalloutsCollabsibleTabs (mdx)Inline TOC (mdx)Mermaid Diagrams  ","version":"Next","tagName":"h3"},{"title":"Mermaid Diagrams​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Grundlagen/Sonstiges/site/styleguide#mermaid-diagrams","content":" ","version":"Next","tagName":"h3"},{"title":"Security","type":0,"sectionRef":"#","url":"/my-documentation/docs/Linux/Security","content":"","keywords":"","version":"Next"},{"title":"Checking file integrity​","type":1,"pageTitle":"Security","url":"/my-documentation/docs/Linux/Security#checking-file-integrity","content":" The sha256sum command creates a 256-bit checksum number that can be used to verify a file. This command uses a similar syntax to that of the md5sum command:  sha256sum [OPTIONS]... [FILE]...   Use the sha256sum command to create the checksum for the anyfile.txt file:  sha256sum anyfile.txt &gt; anyfile.sha256 cat anyfile.sha256 # anyfile.txt: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 anyfile.txt   The sha256sum and the md5sum command can be used with the -c option to verify the integrity of the file:  sha256sum -c anyfile.sha256 # anyfile.txt: OK  ","version":"Next","tagName":"h2"},{"title":"SSH","type":0,"sectionRef":"#","url":"/my-documentation/docs/Linux/SSH","content":"","keywords":"","version":"Next"},{"title":"SSH einrichten für Github​","type":1,"pageTitle":"SSH","url":"/my-documentation/docs/Linux/SSH#ssh-einrichten-für-github","content":" Check for existing Key  ls -al ~/.ssh # Lists the files in your .ssh directory, if they exist   Generate new Key  ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot; # Start SSH-Agent in Background: eval &quot;$(ssh-agent -s)&quot; # Add Key to ssh-agent: ssh-add ~/.ssh/id_ed25519   Add new Key to Account  $ cat ~/.ssh/id_ed25519.pub # Then select and copy the contents of the id_ed25519.pub file # displayed in the terminal to your clipboard # Github -&gt; Settings -&gt; SSH and GPG keys -&gt; New/Add SSH key   Test Connection  ssh -T git@github.com # Attempts to ssh to GitHub   ","version":"Next","tagName":"h2"},{"title":"SSH Cheat Sheet​","type":1,"pageTitle":"SSH","url":"/my-documentation/docs/Linux/SSH#ssh-cheat-sheet","content":" ","version":"Next","tagName":"h2"},{"title":"Verbindung zu einem Server herstellen​","type":1,"pageTitle":"SSH","url":"/my-documentation/docs/Linux/SSH#verbindung-zu-einem-server-herstellen","content":" ssh user@remote-host # Standardverbindung (Port 22) ssh -p 2222 user@remote-host # Verbindung über einen anderen Port ssh -i ~/.ssh/id_rsa user@remote-host # Verbindung mit einem bestimmten Schlüssel   ","version":"Next","tagName":"h3"},{"title":"SSH mit Passwortloser Anmeldung​","type":1,"pageTitle":"SSH","url":"/my-documentation/docs/Linux/SSH#ssh-mit-passwortloser-anmeldung","content":" (Key-basierte Authentifizierung)  ssh-keygen -t rsa -b 4096 # SSH-Schlüsselpaar erstellen ssh-copy-id user@remote-host # Öffentlichen Schlüssel zum Server kopieren (Linux/macOS)   ","version":"Next","tagName":"h3"},{"title":"SSH-Config für einfachere Verbindungen​","type":1,"pageTitle":"SSH","url":"/my-documentation/docs/Linux/SSH#ssh-config-für-einfachere-verbindungen","content":" (Linux/macOS: ~/.ssh/config)  nano ~/.ssh/config # Beispiel: Host myserver HostName remote-host User user Port 2222 IdentityFile ~/.ssh/id_rsa ssh myserver # Verbindung per Alias   ","version":"Next","tagName":"h3"},{"title":"Dateien mit SCP übertragen​","type":1,"pageTitle":"SSH","url":"/my-documentation/docs/Linux/SSH#dateien-mit-scp-übertragen","content":" (Secure Copy Protocol)  scp file.txt user@remote-host:/home/user/ # Datei hochladen scp -r myfolder user@remote-host:/home/user/ # Ordner hochladen scp user@remote-host:/home/user/file.txt . # Datei vom Server herunterladen   ","version":"Next","tagName":"h3"},{"title":"Dateien mit rsync​","type":1,"pageTitle":"SSH","url":"/my-documentation/docs/Linux/SSH#dateien-mit-rsync","content":" (Effiziente Dateiübertragung)  rsync -avz file.txt user@remote-host:/home/user/ # Datei synchronisieren rsync -avz --progress user@remote-host:/home/user/ . # Datei/Ordner mit Fortschritt herunterladen   ","version":"Next","tagName":"h3"},{"title":"Remote-Befehle über SSH ausführen​","type":1,"pageTitle":"SSH","url":"/my-documentation/docs/Linux/SSH#remote-befehle-über-ssh-ausführen","content":" ssh user@remote-host &quot;ls -lah /var/www&quot; # Dateien auf dem Server auflisten ssh user@remote-host &quot;df -h&quot; # Speicherplatz prüfen   ","version":"Next","tagName":"h3"},{"title":"SSH-Tunnel für Portweiterleitung​","type":1,"pageTitle":"SSH","url":"/my-documentation/docs/Linux/SSH#ssh-tunnel-für-portweiterleitung","content":" (Lokale Weiterleitung)  ssh -L 8080:localhost:80 user@remote-host # Port 8080 lokal auf Port 80 des Remote-Hosts umleiten # Danach im Browser: http://localhost:8080   ","version":"Next","tagName":"h3"},{"title":"SSH Reverse-Tunnel​","type":1,"pageTitle":"SSH","url":"/my-documentation/docs/Linux/SSH#ssh-reverse-tunnel","content":" (Fernzugriff auf lokalen Rechner)  ssh -R 9000:localhost:22 user@remote-host # Remote-Host kann auf lokalen SSH-Port zugreifen # Auf dem Remote-Host dann: ssh -p 9000 user@localhost   ","version":"Next","tagName":"h3"},{"title":"SSH-Multiplexing​","type":1,"pageTitle":"SSH","url":"/my-documentation/docs/Linux/SSH#ssh-multiplexing","content":" (Schnellere Verbindungen)  nano ~/.ssh/config # Beispiel: Host * ControlMaster auto ControlPath ~/.ssh/master-%r@%h:%p ControlPersist 10m   ","version":"Next","tagName":"h3"},{"title":"SSH für Windows​","type":1,"pageTitle":"SSH","url":"/my-documentation/docs/Linux/SSH#ssh-für-windows","content":" (PowerShell &amp; WSL)  ssh user@remote-host # Funktioniert direkt in PowerShell scp file.txt user@remote-host:/home/user/ # Datei kopieren (wie unter Linux) wsl ssh user@remote-host # SSH über Windows Subsystem für Linux (WSL)   ","version":"Next","tagName":"h3"},{"title":"SSH-Debugging & Fehlersuche​","type":1,"pageTitle":"SSH","url":"/my-documentation/docs/Linux/SSH#ssh-debugging--fehlersuche","content":" ssh -v user@remote-host # Verbindung mit Debug-Informationen ssh -vvv user@remote-host # Noch detailliertere Debug-Ausgabe   ","version":"Next","tagName":"h3"},{"title":"SSH-Server auf eigenem Rechner aktivieren​","type":1,"pageTitle":"SSH","url":"/my-documentation/docs/Linux/SSH#ssh-server-auf-eigenem-rechner-aktivieren","content":" sudo systemctl start ssh # SSH-Server starten (Linux) sudo systemctl enable ssh # SSH-Server beim Boot starten sudo systemctl status ssh # Status prüfen sudo ufw allow ssh # Firewall für SSH öffnen (Ubuntu)   ","version":"Next","tagName":"h3"},{"title":"SSH einrichten / nutzen (Linux)​","type":1,"pageTitle":"SSH","url":"/my-documentation/docs/Linux/SSH#ssh-einrichten--nutzen-linux","content":" ","version":"Next","tagName":"h2"},{"title":"Ist SSH installiert?​","type":1,"pageTitle":"SSH","url":"/my-documentation/docs/Linux/SSH#ist-ssh-installiert","content":" rpm -qa | grep ssh # RPM-basierte Systeme (z.B. CentOS, Fedora) dpkg -l | grep ssh # Debian-basierte Systeme (z.B. Ubuntu, Debian)   ","version":"Next","tagName":"h3"},{"title":"Welche Pakete sind installiert?​","type":1,"pageTitle":"SSH","url":"/my-documentation/docs/Linux/SSH#welche-pakete-sind-installiert","content":" rpm -ql openssh-server # RPM-basierte Systeme   ","version":"Next","tagName":"h3"},{"title":"Wie heißt das ausführbare Programm?​","type":1,"pageTitle":"SSH","url":"/my-documentation/docs/Linux/SSH#wie-heißt-das-ausführbare-programm","content":" rpm -ql openssh-server | grep bin # RPM-basierte Systeme dpkg -L openssh-server | grep bin # Debian-basierte Systeme   ","version":"Next","tagName":"h3"},{"title":"Überprüfung laufender Dienste (Port 22)​","type":1,"pageTitle":"SSH","url":"/my-documentation/docs/Linux/SSH#überprüfung-laufender-dienste-port-22","content":" ss -tlnp | grep :22   ","version":"Next","tagName":"h3"},{"title":"SSH-Dienst starten​","type":1,"pageTitle":"SSH","url":"/my-documentation/docs/Linux/SSH#ssh-dienst-starten","content":" systemctl enable [service] # Aktiviert den Dienst beim Systemstart systemctl start [service] # Startet den Dienst jetzt   ","version":"Next","tagName":"h3"},{"title":"Public Key überprüfen​","type":1,"pageTitle":"SSH","url":"/my-documentation/docs/Linux/SSH#public-key-überprüfen","content":" ls -l /etc/ssh/ # Vorhandene Schlüssel auflisten ssh-keygen -l -f [public key] # Fingerabdruck generieren   ","version":"Next","tagName":"h3"},{"title":"Public Key erstellen & übertragen​","type":1,"pageTitle":"SSH","url":"/my-documentation/docs/Linux/SSH#public-key-erstellen--übertragen","content":" ssh-keygen -t rsa -b 4096 # Erstellt einen RSA-Schlüsselpaar mit 4096 Bit ssh-copy-id user@host_IP # Kopiert den öffentlichen Schlüssel auf den Zielhost   ","version":"Next","tagName":"h3"},{"title":"SSH-Agent​","type":1,"pageTitle":"SSH","url":"/my-documentation/docs/Linux/SSH#ssh-agent","content":" ssh-add -l # Hinzugefügte Identitäten überprüfen ssh-add -D # ALLE Identitäten löschen ssh-add # Standardidentität hinzufügen  ","version":"Next","tagName":"h3"},{"title":"Troubleshooting","type":0,"sectionRef":"#","url":"/my-documentation/docs/Linux/Troubleshooting","content":"","keywords":"","version":"Next"},{"title":"Rescue Root​","type":1,"pageTitle":"Troubleshooting","url":"/my-documentation/docs/Linux/Troubleshooting#rescue-root","content":" system boot -&gt; grub -&gt; mit e bootoptionen ändernam Ende der bootzeile (nicht in der initrd zeile!) rw init=/bin/bash  -&gt; rw um das fs als read-writable beim booten zu mounten -&gt; init=/bin/bash bootet in die bash als einzigem process  ctrl-x -&gt; boot in die bash  check filesystem (rw):  dfmount | grep [root-fs-name]passwdtouch /.autorelabel -&gt; forciert relabeling des selinuxreboot/restart ","version":"Next","tagName":"h3"},{"title":"Diagnose & Systeminformation","type":0,"sectionRef":"#","url":"/my-documentation/docs/Linux/Dateisystem/Diagnose & Systeminformation","content":"Diagnose &amp; Systeminformation Kategorie\tBefehl\tBeschreibungPartitionierung\tfdisk -l\tZeigt alle Festplatten &amp; Partitionstabellen parted -l\tDetaillierte Partitionsinformationen cat /proc/partitions\tÜbersicht der vom Kernel erkannten Partitionen lsblk\tBaumstruktur aller Blockgeräte Speicheraufteilung\tdf -h\tAnzeige belegter &amp; freier Speicherplatz in menschenlesbarem Format du -sh &lt;Verzeichnis&gt;\tErmittelt den Speicherverbrauch eines Verzeichnisses lsblk -f\tZeigt Blockgeräte inkl. zugehöriger Dateisystemtypen Dateisysteme\tblkid\tListet Dateisystemtypen und UUIDs mount | column -t\tZeigt aktuell gemountete Dateisysteme findmnt\tAlternative zu mount: Übersicht der Mount-Punkte cat /etc/fstab\tStatische Konfiguration der zu mountenden Dateisysteme Zusatzinfos\tlshw -class disk\tUmfassende Hardwareinfos zu den Festplatten dmesg | grep -i -E &quot;sd|nvme&quot;\tKernelmeldungen zu SATA- bzw. NVMe-Geräten","keywords":"","version":"Next"},{"title":"VIM","type":0,"sectionRef":"#","url":"/my-documentation/docs/Linux/VIM","content":"","keywords":"","version":"Next"},{"title":"Moving the cursor​","type":1,"pageTitle":"VIM","url":"/my-documentation/docs/Linux/VIM#moving-the-cursor","content":" (in Normal Mode)  Key\tFunctionj\tMoves cursor down one line (same as down arrow) k\tMoves cursor up line (same as up arrow) l\tMoves cursor to the right one character (same as right arrow) h\tMoves cursor to the left one character (same as left arrow) w\tMoves cursor to beginning of next word e\tMoves cursor to end of word b\tMoves cursor to beginning of previous word $\tMoves cursor to end of current line (same as End key) 0 (zero)\tMoves cursor beginning of current line (same as Home key) 3G\tJumps to third line (nG jumps to the nth line) 1G\tJumps to first line Shift+G\tJumps to the last line  ","version":"Next","tagName":"h3"},{"title":"Editing​","type":1,"pageTitle":"VIM","url":"/my-documentation/docs/Linux/VIM#editing","content":" Key\tFunctiondw\tDelete word 2dw\tDelete 2 words u\tUndo last Operation 4u\tUndo 4 Operations x\tDelete one Character 5x\tDelete 5 Characters dd\tDelete current line 2dd\tDelete two lines p\tPaste Buffer into line below Shift+D\tDelete from the current position to the end of the line Shift+J\tJoin two lines (the current and the next line) yw\tCopy (yank) the current word ~\tChange letter to lower/uppercase cw\tDelete word up to the cursor position. (especially useful in conjunction with searched matches)  ","version":"Next","tagName":"h3"},{"title":"Change Mode​","type":1,"pageTitle":"VIM","url":"/my-documentation/docs/Linux/VIM#change-mode","content":" Key\tFunctioni\tEnter instert Mode - Cursor before current char a\tInsert Mode (append) - Cursor after current char o\tInsert line below and switch to insert Mode Shift+O\tInsert line above and switch to insert Mode Shift+I\tEnter insert Mode and jump to the beginning of the Line Shift+A\tEnter insert Mode and jump to the end of the Line  ","version":"Next","tagName":"h3"},{"title":"Search​","type":1,"pageTitle":"VIM","url":"/my-documentation/docs/Linux/VIM#search","content":" Key\tFunction%s/pattern\tSearch for a pattern %s/pattern //g\tSearch and delete the pattern noh\tTurn off highlighting until next search /pattern\tSearch. Type / without : Moves the cursor to the matched result ?pattern\tSearch backwards. n\tJump to the next result.  ","version":"Next","tagName":"h3"},{"title":"Save / Quit​","type":1,"pageTitle":"VIM","url":"/my-documentation/docs/Linux/VIM#save--quit","content":" Command\tFunction/Keys:x\tWill save and close the file. :wq\tWill write to file and quit. :wq!\tWill write to a read-only file, if possible, and quit. ZZ\tWill save and close. Notice that no colon : is used in this case. :q!\tExit without saving changes :e!\tDiscard changes and reload file :w!\tWrite to read-only, if possible. ","version":"Next","tagName":"h3"},{"title":"Zeitgesteuerte Jobs","type":0,"sectionRef":"#","url":"/my-documentation/docs/Linux/Zeitgesteuerte-Jobs","content":"Zeitgesteuerte Jobs cron = wiederholtes ausführen von Befehlen at = Einmaliges ausführen eines Befehls Command\tFunctioncrontab -e\tEditieren von cronjobs crontab -l\tListen der cronjobs crontab -r\tLöschen der gesamten (eigenen) crontabelle! at\tEinmaliges ausführen eines Befehls zu gegebener Zeit atq\tQueue anzeigen atrm\tEinen Eintrag löschen","keywords":"","version":"Next"},{"title":"Regex","type":0,"sectionRef":"#","url":"/my-documentation/docs/Linux/Regex","content":"","keywords":"","version":"Next"},{"title":"Regex Quickreference​","type":1,"pageTitle":"Regex","url":"/my-documentation/docs/Linux/Regex#regex-quickreference","content":" ## Grundlagen . - Beliebiges Zeichen außer Zeilenumbruch ^ - Anfang der Zeile $ - Ende der Zeile * - 0 oder mehr Wiederholungen + - 1 oder mehr Wiederholungen ? - 0 oder 1 Wiederholung {n} - Genau n Wiederholungen {n,} - Mindestens n Wiederholungen {n,m} - Zwischen n und m Wiederholungen | - Oder (z.B. `a|b` matcht &quot;a&quot; oder &quot;b&quot;) () - Gruppierung (subpatterns) [] - Zeichenklasse (z.B. `[a-z]` für Kleinbuchstaben) ## Häufig verwendete Zeichenklassen \\d - Ziffern (0-9) \\D - Keine Ziffern \\w - Wortzeichen (a-z, A-Z, 0-9, _) \\W - Kein Wortzeichen \\s - Leerraum (Leerzeichen, Tab, Zeilenumbruch) \\S - Kein Leerraum   ","version":"Next","tagName":"h2"},{"title":"Basic Regex​","type":1,"pageTitle":"Regex","url":"/my-documentation/docs/Linux/Regex#basic-regex","content":" Basic Regex\tOperator\tMeaningPeriod operator\t.\tMatches any one single character. List operator\t[ ][^ ]\tDefines a list or range of literal characters that can match one character. If the first character is the negation ^ operator, it matches any character that is not in the list. Asterisk operator\t*\tMatches zero or more instances of the previous character. Front anchor operator\t^\tIf ^ is the first character in the pattern, then the entire pattern must be present at the beginning of the line to match. If ^ is not the first character, then it is treated as an ordinary literal ^ character. Back anchor operator\t$\tIf $ is the last character in the pattern, then the pattern must be at the end of the line to match, otherwise, it is treated as a literal $ character.  ","version":"Next","tagName":"h2"},{"title":"Extended Regex​","type":1,"pageTitle":"Regex","url":"/my-documentation/docs/Linux/Regex#extended-regex","content":" Extended Regex\tOperators\tMeaningGrouping operator\t( )\tGroups characters together to form a subpattern. Asterisk operator\t*\tPrevious character (or subpattern) is present zero or more times. Plus operator\t+\tPrevious character (or subpattern) is present at least one or more times. Question mark operator\t?\tPrevious character (or subpattern) is present zero or one time (but not more). Curly brace operator\t{,}\tSpecify minimum, maximum, or exact matches of the previous character (or subpattern). Alternation operator\t|\tLogical OR of choices. For example, abc|def|xyz matches abc or def or xyz.  ","version":"Next","tagName":"h2"},{"title":"Subpatterns ()​","type":1,"pageTitle":"Regex","url":"/my-documentation/docs/Linux/Regex#subpatterns-","content":" Pattern\tMeaningxyz+\tMatches the xy string followed by one or more of the z character (xyz)+\tMatches one or more copies of the xyz string xyz?\tMatches the xy string followed by zero or one of the z character x(yz)?\tMatches the x character followed by zero or one of the yz string  ","version":"Next","tagName":"h2"},{"title":"OR |​","type":1,"pageTitle":"Regex","url":"/my-documentation/docs/Linux/Regex#or-","content":" Pattern\tMeaningabc|xyz\tMatches the abc string or the xyz string ab(c|d|e) / ab[cde]\tMatches the ab string followed by a c or d or e character  ","version":"Next","tagName":"h2"},{"title":"Character Classes​","type":1,"pageTitle":"Regex","url":"/my-documentation/docs/Linux/Regex#character-classes","content":" Character\tLegend\tExample\tSample Match[ … ]\tOne of the characters in the brackets\t[AEIOU]\tOne uppercase vowel [ … ]\tOne of the characters in the brackets\tT[ao]p\tTap or Top -\tRange indicator\t[a-z]\tOne lowercase letter [x-y]\tOne of the characters in the range from x to y\t[A-Z]+\tGREAT [ … ]\tOne of the characters in the brackets\t[AB1-5w-z]\tOne of either: A,B,1,2,3,4,5,w,x,y,z [x-y]\tOne of the characters in the range from x to y\t[ -~]+\tCharacters in the printable section of the ASCII table. [^x]\tOne character that is not x\t[^a-z]3\tA1! [^x-y]\tOne of the characters not in the range from x to y\t[^ -~]+\tCharacters that are not in the printable section of the ASCII table. [\\d\\D]\tOne character that is a digit or a non-digit\t[\\d\\D]+\tAny characters, including new lines, which the regular dot doesn't match [\\x41]\tMatches the character at hexadecimal position 41 in the ASCII table, i.e. A\t[\\x41-\\x45]3\tABE  ","version":"Next","tagName":"h2"},{"title":"Characters​","type":1,"pageTitle":"Regex","url":"/my-documentation/docs/Linux/Regex#characters","content":" Character\tLegend\tExample\tSample Match\\d\tMost engines: one digit from 0 to 9\tfile_\\d\\d\tfile_25 \\d\t.NET, Python 3: one Unicode digit in any script\tfile_\\d\\d\tfile_9੩ \\w\tMost engines: &quot;word character&quot;: ASCII letter, digit or underscore\t\\w-\\w\\w\\w\tA-b_1 \\w\t.Python 3: &quot;word character&quot;: Unicode letter, ideogram, digit, or underscore\t\\w-\\w\\w\\w\t字-ま_۳ \\w\t.NET: &quot;word character&quot;: Unicode letter, ideogram, digit, or connector\t\\w-\\w\\w\\w\t字-ま‿۳ \\s\tMost engines: &quot;whitespace character&quot;: space, tab, newline, carriage return, vertical tab\ta\\sb\\sc\ta b c \\s\t.NET, Python 3, JavaScript: &quot;whitespace character&quot;: any Unicode separator\ta\\sb\\sc\ta b c \\D\tOne character that is not a digit as defined by your engine's \\d\t\\D\\D\\D\tABC \\W\tOne character that is not a word character as defined by your engine's \\w\t\\W\\W\\W\\W\\W\t*-+=) \\S\tOne character that is not a whitespace character as defined by your engine's \\s\t\\S\\S\\S\\S\tYoyo  ","version":"Next","tagName":"h2"},{"title":"Quantifiers​","type":1,"pageTitle":"Regex","url":"/my-documentation/docs/Linux/Regex#quantifiers","content":" Quantifier\tLegend\tExample\tSample Match+\tOne or more\tVersion \\w-\\w+\tVersion A-b1_1 {3}\tExactly three times\t\\D{3}\tABC {2,4}\tTwo to four times\t\\d{2,4}\t156 {3,}\tThree or more times\t\\w{3,}\tregex_tutorial *\tZero or more times\tABC*\tAAACC ?\tOnce or none\tplurals?\tplu  ","version":"Next","tagName":"h2"},{"title":"Häufig verwendete Muster​","type":1,"pageTitle":"Regex","url":"/my-documentation/docs/Linux/Regex#häufig-verwendete-muster","content":" ### 1. Email-Adresse `[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}` ✅ `test.email@domain.com` ❌ `test.email@domain,com` ### 2. URL `https?://[^\\s/$.?#].[^\\s]*` ✅ `https://example.com` ✅ `http://sub.domain.net/path?query=1` ### 3. Dateipfad (Windows) `[a-zA-Z]:\\\\(?:[^&lt;&gt;:&quot;/\\\\|?*]+\\\\)*[^&lt;&gt;:&quot;/\\\\|?*]*` ✅ `C:\\Users\\Name\\file.txt` ❌ `C:/Users/Name/file.txt` ### 4. Dateipfad (Linux/Mac) `(/[^/\\0]+)+/?` ✅ `/home/user/file.txt` ❌ `home/user/file.txt` ### 5. IPv4-Adresse `\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b` ✅ `192.168.1.1` ❌ `999.999.999.999` ### 6. Telefonnummer (DE) `(?:\\+49|0)[1-9][0-9]{9,10}` ✅ `+4917612345678` ✅ `017612345678` ### 7. Postleitzahl (DE) `\\b\\d{5}\\b` ✅ `10115` ❌ `1234` ### 8. JSON-Formatierung prüfen `\\{(?:[^{}]|(?R))*\\}` ✅ `{&quot;key&quot;: &quot;value&quot;}` ❌ `{&quot;key&quot;: &quot;value&quot;` (fehlt `}`) ### 9. HTML-Tags entfernen `&lt;[^&gt;]+&gt;` → Ersetzen durch `&quot;&quot;` ✅ `&lt;p&gt;Hello&lt;/p&gt;` → `Hello` ### 10. Leerzeilen entfernen `^\\s*$` → Ersetzen durch `&quot;&quot;`   ","version":"Next","tagName":"h2"},{"title":"Anwendungsbeispiele​","type":1,"pageTitle":"Regex","url":"/my-documentation/docs/Linux/Regex#anwendungsbeispiele","content":" ","version":"Next","tagName":"h2"},{"title":"Email-Adresse prüfen (Python)​","type":1,"pageTitle":"Regex","url":"/my-documentation/docs/Linux/Regex#email-adresse-prüfen-python","content":" import re email = &quot;test.email@domain.com&quot; pattern = r&quot;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$&quot; if re.match(pattern, email): print(&quot;✅ Gültige Email&quot;) else: print(&quot;❌ Ungültige Email&quot;)   ","version":"Next","tagName":"h3"},{"title":"URL aus einem Text extrahieren (Python)​","type":1,"pageTitle":"Regex","url":"/my-documentation/docs/Linux/Regex#url-aus-einem-text-extrahieren-python","content":" import re text = &quot;Besuche meine Seite: https://example.com und http://test.de&quot; pattern = r&quot;https?://[^\\s/$.?#].[^\\s]*&quot; urls = re.findall(pattern, text) print(&quot;Gefundene URLs:&quot;, urls)   ","version":"Next","tagName":"h3"},{"title":"Windows Dateipfad prüfen (Bash)​","type":1,"pageTitle":"Regex","url":"/my-documentation/docs/Linux/Regex#windows-dateipfad-prüfen-bash","content":" echo &quot;C:\\Users\\Name\\file.txt&quot; | grep -E &quot;^[a-zA-Z]:\\\\(?:[^&lt;&gt;:\\&quot;/\\\\|?*]+\\\\)*[^&lt;&gt;:\\&quot;/\\\\|?*]*$&quot;   ","version":"Next","tagName":"h3"},{"title":"Linux Dateipfad prüfen (Bash)​","type":1,"pageTitle":"Regex","url":"/my-documentation/docs/Linux/Regex#linux-dateipfad-prüfen-bash","content":" echo &quot;/home/user/file.txt&quot; | grep -E &quot;^(/[^/\\0]+)+/?$&quot;   ","version":"Next","tagName":"h3"},{"title":"IPv4-Adresse validieren (JavaScript)​","type":1,"pageTitle":"Regex","url":"/my-documentation/docs/Linux/Regex#ipv4-adresse-validieren-javascript","content":" const ipPattern = /\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b/; const ip = &quot;192.168.1.1&quot;; if (ipPattern.test(ip)) { console.log(&quot;✅ Gültige IP&quot;); } else { console.log(&quot;❌ Ungültige IP&quot;); }   ","version":"Next","tagName":"h3"},{"title":"Telefonnummer bereinigen (DE - Python)​","type":1,"pageTitle":"Regex","url":"/my-documentation/docs/Linux/Regex#telefonnummer-bereinigen-de---python","content":" import re number = &quot;Meine Nummer ist +49 176 12345678&quot; pattern = r&quot;(?:\\+49|0)[1-9][0-9]{9,10}&quot; match = re.search(pattern, number) if match: print(&quot;Gefundene Nummer:&quot;, match.group())   ","version":"Next","tagName":"h3"},{"title":"Postleitzahlen filtern (Bash)​","type":1,"pageTitle":"Regex","url":"/my-documentation/docs/Linux/Regex#postleitzahlen-filtern-bash","content":" echo &quot;Berlin 10115&quot; | grep -Eo &quot;\\b\\d{5}\\b&quot;   ","version":"Next","tagName":"h3"},{"title":"JSON-String validieren (Python)​","type":1,"pageTitle":"Regex","url":"/my-documentation/docs/Linux/Regex#json-string-validieren-python","content":" import json data = '{&quot;name&quot;: &quot;Max&quot;, &quot;age&quot;: 25}' try: json.loads(data) print(&quot;✅ Gültiges JSON&quot;) except json.JSONDecodeError: print(&quot;❌ Ungültiges JSON&quot;)   ","version":"Next","tagName":"h3"},{"title":"HTML-Tags entfernen (Python)​","type":1,"pageTitle":"Regex","url":"/my-documentation/docs/Linux/Regex#html-tags-entfernen-python","content":" import re html = &quot;&lt;p&gt;Hello &lt;b&gt;World&lt;/b&gt;&lt;/p&gt;&quot; clean_text = re.sub(r&quot;&lt;[^&gt;]+&gt;&quot;, &quot;&quot;, html) print(clean_text) # Output: Hello World   ","version":"Next","tagName":"h3"},{"title":"Leerzeilen aus Datei entfernen (Bash)​","type":1,"pageTitle":"Regex","url":"/my-documentation/docs/Linux/Regex#leerzeilen-aus-datei-entfernen-bash","content":" sed '/^\\s*$/d' input.txt &gt; output.txt   🔥 Zusätzliche Tipps:  Python: re.search() gibt das erste Vorkommen zurück, re.findall() alle Treffer. JavaScript: .match() gibt Treffer zurück, .replace() kann direkt ersetzen. Bash: grep -E für erweiterte Regex, sed für Ersetzungen. ","version":"Next","tagName":"h3"},{"title":"GIT","type":0,"sectionRef":"#","url":"/my-documentation/docs/Tools/GIT","content":"","keywords":"","version":"Next"},{"title":"THE STAGING AREA​","type":1,"pageTitle":"GIT","url":"/my-documentation/docs/Tools/GIT#the-staging-area","content":" Working Directory: The working directory is where you make edits and create new files. It represents the current state of your project.Staging Area: Once you've made changes in your working directory that you wish to save, you first add these changes to the staging area. This area captures a snapshot of the modifications and prepares them for committing.Repository: When you're ready to finalize your changes, you commit the modifications from the staging area. This action saves a permanent snapshot of the changes in your Git repository, along with metadata such as who made the changes and when.      git add &lt;file&gt; # adds changes in a file to the staging area git add . # adds all changes to the staging area git diff # shows unstaged changes in the working directory git dif --staged # shows changes that are staged for the next commit git commit # commits the staged changes git reset &lt;file&gt; # removes file from the staging area   UNSTAGE (Reverse) A FILE / ALL FILES​  git restore --staged &lt;file-path&gt; # unstage specified file git restore --staged . # unstage all files   DISCARD LOCAL UNCOMMITTED CHANGES​  git restore . # discard all uncommitted changes git restore path/to/file # discard changes to specified file git checkout -- . # revert working directory to last commit   ","version":"Next","tagName":"h3"},{"title":"GIT PULL vs GIT FETCH​","type":1,"pageTitle":"GIT","url":"/my-documentation/docs/Tools/GIT#git-pull-vs-git-fetch","content":" git fetch is used to download updates from a remote repository to your local repository without merging or modifying your local branches. This command allows you to review the changes before integrating them into your local branch.  git fetch &lt;remote&gt;   git pull is a combination of git fetch and git merge. It downloads changes and merges them into the current branch.  git pull &lt;remote&gt; &lt;branch&gt;   ","version":"Next","tagName":"h3"},{"title":"GIT RESET --soft​","type":1,"pageTitle":"GIT","url":"/my-documentation/docs/Tools/GIT#git-reset---soft","content":" When you use git reset --soft, Git moves the HEAD pointer to the specified commit while leaving the staging area and working directory unchanged. This means that all changes from commits after the specified one will remain in the staging area, ready to be recommitted.  git reset --soft HEAD~1   This command moves the HEAD pointer one commit back. Changes made in the latest commit are transferred to the staging area:    ","version":"Next","tagName":"h3"},{"title":"GIT RESET --hard​","type":1,"pageTitle":"GIT","url":"/my-documentation/docs/Tools/GIT#git-reset---hard","content":" The git reset --hard option can be thought of as a nuclear option. It moves the HEAD pointer to the specified commit, updates the staging area to match this commit, and also adjusts the working directory to exactly match the commit. Any changes from commits made after the specified commit will be completely discarded.  Alle lokalen Änderungen verwerfen und die Branch auf den Zustand des Remote-Repositories (z. B. origin/master oder origin/main) zurücksetzen:  git fetch origin git reset --hard origin/master git clean -fd # remove untracked files   ","version":"Next","tagName":"h3"},{"title":"GIT REBASE​","type":1,"pageTitle":"GIT","url":"/my-documentation/docs/Tools/GIT#git-rebase","content":" Rebasing effectively saves the changes in your current branch, temporarily “removes” the commits you’ve made on your branch, applies the new commits from the other branch, and then reapplies your changes one commit at a time on top of these.  It’s important to note that rebasing rewrites commit history by generating new commits for each original commit. This process can result in a cleaner and more understandable project history.    Above Situation:  git checkout feature git rebase main   After the rebase the Feature branch includes the commits from main and keeps the commits that have been commited earlier to the feature branch. The main branch is untouched, but the commitment history has changed.  If a conflict arises, Git will show you which files are conflicting. You’ll have to open these files, resolve the conflicts, and then continue the rebase like so:  # After resolving conflicts git add . git rebase --continue   If you want to abort the rebase for any reason, you can do so with the following command:  git rebase --abort   ","version":"Next","tagName":"h3"},{"title":"GIT MERGE​","type":1,"pageTitle":"GIT","url":"/my-documentation/docs/Tools/GIT#git-merge","content":" Once your feature is ready and tested, you’ll want to merge it back into the main project. First, switch back to the branch you want to merge your changes into. Assuming you want to merge your changes to main branch:  git checkout master   Then, merge your feature branch:  git merge &lt;feature-branch&gt;   After merging your changes locally, push them to the remote repository to make them available to your teammate and update the live version of the website:  git push origin master   ","version":"Next","tagName":"h3"},{"title":"ADDING EMPTY DIRECTORIES TO REPOSITORY​","type":1,"pageTitle":"GIT","url":"/my-documentation/docs/Tools/GIT#adding-empty-directories-to-repository","content":" Create a placeholder file named .gitkeep in the empty directory. The .gitkeep file has no special meaning to Git, but it’s a widely-accepted convention that signals the intention to keep the directory in the repository.  echo &quot;&quot; .gitkeep # create .gitkeep file git add .gitkeep # stage the file git commit -m &quot;add empty directory with .gitkeep&quot; # commit the changes   ","version":"Next","tagName":"h3"},{"title":"REMOVE DIRECTORY FROM REPOSITORY​","type":1,"pageTitle":"GIT","url":"/my-documentation/docs/Tools/GIT#remove-directory-from-repository","content":" git rm -r &lt;directory&gt; # removes a dir from git repository recursively   ","version":"Next","tagName":"h3"},{"title":"CHANGE REMOTE REPOSITORY URL​","type":1,"pageTitle":"GIT","url":"/my-documentation/docs/Tools/GIT#change-remote-repository-url","content":" git remote -v # verify current remote repository git remote set-url origin &lt;new-url&gt; # set new url of origin git remote -v # verify new remote repository url git fetch origin # sync local repository to new remote   ","version":"Next","tagName":"h3"},{"title":".gitignore FILE​","type":1,"pageTitle":"GIT","url":"/my-documentation/docs/Tools/GIT#gitignore-file","content":" Gecached Dateien aus gitignore entfernen:  git rm -r --cached . git add . git commit -m &quot;Remove all files in .gitignore&quot;   Check gitignore Syntax  git check-ignore -v &lt;file&gt;  ","version":"Next","tagName":"h3"},{"title":"REST-Architektur","type":0,"sectionRef":"#","url":"/my-documentation/docs/Web/Rest-Architektur","content":"","keywords":"","version":"Next"},{"title":"Grundprinzipien der REST-Architektur​","type":1,"pageTitle":"REST-Architektur","url":"/my-documentation/docs/Web/Rest-Architektur#grundprinzipien-der-rest-architektur","content":" Ressourcen: In REST wird alles als Ressource betrachtet. Eine Ressource kann ein Dokument, ein Bild, ein Benutzer oder ein Service sein. Ressourcen werden durch URIs (Uniform Resource Identifiers) eindeutig identifiziert. Repräsentationen: Ressourcen können in verschiedenen Formaten dargestellt werden, wie JSON, XML, HTML oder Plain Text. Die Repräsentation einer Ressource wird dem Client zurückgegeben. Statische Adressierung: Jede Ressource muss eine stabile und eindeutige Adresse (URI) haben. Die URI bleibt gleich, unabhängig von der Repräsentation oder dem Zustand der Ressource. HTTP-Verben: REST verwendet die Standard-HTTP-Methoden, um Operationen auf Ressourcen auszuführen. Die wichtigsten HTTP-Verben sind: GET: Abrufen einer Ressource.POST: Erstellen einer neuen Ressource.PUT: Aktualisieren einer bestehenden Ressource.DELETE: Löschen einer Ressource.PATCH: Teilweise Aktualisierung einer Ressource. Zustandslose Interaktionen: Jede Anfrage vom Client an den Server muss alle Informationen enthalten, die notwendig sind, um sie zu verstehen und zu verarbeiten. Der Server speichert keinen Client-Zustand zwischen den Anfragen. Das bedeutet, dass jede Anfrage unabhängig ist und der Server keine Kenntnis von früheren Anfragen hat. Cachebarkeit: Antworten sollten explizit als cacheable oder non-cacheable markiert sein. Caching verbessert die Leistung und Skalierbarkeit von Webanwendungen, indem es redundante Abrufe vermeidet. Schichtenarchitektur: Ein REST-System kann durch mehrere Schichten bestehen, wobei jede Schicht eine spezifische Funktion hat und unabhängig von den anderen Schichten ist. Dies erhöht die Flexibilität und Skalierbarkeit des Systems.  ","version":"Next","tagName":"h3"},{"title":"Beispiel für eine REST-API​","type":1,"pageTitle":"REST-Architektur","url":"/my-documentation/docs/Web/Rest-Architektur#beispiel-für-eine-rest-api","content":" Stellen wir uns eine REST-API für die Verwaltung von Benutzerressourcen vor. Hier sind einige Beispiel-URIs und die zugehörigen HTTP-Methoden:  GET /users: Abrufen aller Benutzer.GET /users/{id}: Abrufen eines bestimmten Benutzers anhand der ID.POST /users: Erstellen eines neuen Benutzers.PUT /users/{id}: Aktualisieren eines bestimmten Benutzers anhand der ID.DELETE /users/{id}: Löschen eines bestimmten Benutzers anhand der ID.  ","version":"Next","tagName":"h3"},{"title":"Beispiel in Python mit Flask​","type":1,"pageTitle":"REST-Architektur","url":"/my-documentation/docs/Web/Rest-Architektur#beispiel-in-python-mit-flask","content":" Hier ist ein einfaches Beispiel für eine REST-API in Python mit dem Flask-Framework:  from flask import Flask, jsonify, request app = Flask(__name__) users = [] @app.route('/users', methods=['GET']) def get_users(): return jsonify(users) @app.route('/users/&lt;int:user_id&gt;', methods=['GET']) def get_user(user_id): user = next((user for user in users if user['id'] == user_id), None) if user is not None: return jsonify(user) return jsonify({'error': 'User not found'}), 404 @app.route('/users', methods=['POST']) def create_user(): new_user = request.get_json() users.append(new_user) return jsonify(new_user), 201 @app.route('/users/&lt;int:user_id&gt;', methods=['PUT']) def update_user(user_id): user = next((user for user in users if user['id'] == user_id), None) if user is not None: update_data = request.get_json() user.update(update_data) return jsonify(user) return jsonify({'error': 'User not found'}), 404 @app.route('/users/&lt;int:user_id&gt;', methods=['DELETE']) def delete_user(user_id): global users users = [user for user in users if user['id'] != user_id] return '', 204 if __name__ == '__main__': app.run(debug=True)  ","version":"Next","tagName":"h3"},{"title":"Grundbegriffe","type":0,"sectionRef":"#","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Grundbegriffe","content":"","keywords":"","version":"Next"},{"title":"Ausdruck​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Grundbegriffe#ausdruck","content":" (eng Expression)  Ein Konstrukt das gemäß einer gegebenen Semantik in Bezug auf einen Kontext ausgewertet werden kann, also einen Wert liefert.  Literale (Konstanten): 𝛑 = 3.14, &quot;Hallo Welt&quot;Variablen: x, betragInEuro, wochtagsNummerFunktionen: random(), date()Operationen: 2+5, 2^8, 2(x - 10)Eine Kombination aus Variablen, Funktionen und Operationen die zu einem einzigen Wert ausgewertet wird.  ","version":"Next","tagName":"h3"},{"title":"Deklaration​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Grundbegriffe#deklaration","content":" Die Einführung eines Bezeichners (zb einer Variablen, Funktion oder Klasse) im Code, ohne zwingend Speicher zu reservieren oder eine Initialisierung vorzunehmen.  Definition von Name und Typ einer Entität (Variable, Funktion, Klasse)Keine SpeicherreservierungErmöglicht spätere Verwendung (Initialisierung)Explizite Deklaration: Typ oder andere Metadaten werden direkt angegeben (int zahl)Implizite Deklaration: Automatische Ermittlung des Typs durch den Compiler/Interpreter (var zahl)  ","version":"Next","tagName":"h3"},{"title":"Initialisierung​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Grundbegriffe#initialisierung","content":" Zuweisung eines Wertes zu einer Variablen. Explizit wenn der Variable direkt ein Wert zugewiesen wird (string name = &quot;Bob&quot;). Manche Sprachen (wie C#) weisen Variablen automatisch Standardwerte zu, wenn sie als Felder einer Klasse definiert sind (Implizite Initialisierung).  lokale Variablen müssen explizit initialisiert werdenlazy Initialization (verzögerte Initialisierung): Variable wird initialisiert, wenn sie das erste mal benutzt wird. Verbessert die Performance in manchen Szenarien.Best Practice: Variablen sollten immer mit sinnvollen Standardwerten initialisiert werden, um unerwartetes Verhalten zu vermeiden.  ","version":"Next","tagName":"h3"},{"title":"Bezeichner​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Grundbegriffe#bezeichner","content":" (eng Identifier)  Eindeutige Benennung von Variablen, Datentypen, Funktionen oder Klassen. Bezeichner müssen innerhalb eines Namensraumes eindeutig sein, es sei denn die Programmiersprache erlaubt das Überladen (siehe auch Polymorphie).  Allgemeine Regeln für Bezeichner:  Können Buchstaben (a-z, A-Z), Ziffern (0-9) und Unterstriche (_) enthalten.Dürfen nicht mit einer Ziffer beginnen.Dürfen keine reservierten Schlüsselwörter (wie if, for, while) sein.  ","version":"Next","tagName":"h3"},{"title":"Literal​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Grundbegriffe#literal","content":" (lat. littera 'Buchstabe') Ein Literal ist ein fester Wert, der direkt im Code geschrieben steht. Literals stellen Werte dar, die nicht verändert werden können.  logische (wahr oder falsch), numerische oder Zeichenliteralein der funktionalen Programmierung können auch Funktionen als Literale geschrieben werden: werden als anonyme Funktionen oder Lambda Funktionen bezeichnetBest Practice: Literale sind okay für einfache, selbsterklärende Werte  Exkurs: Magic Numbers Definition:Ein Magic Number ist eine ungekennzeichnete numerische Konstante, die direkt im Code verwendet wird, ohne Erklärung oder Kontext. Sie macht den Code schwer verständlich und schwer wartbar. Fehlende Bedeutung: double preis = menge * 19.99; Was bedeutet 19.99? Ist es ein Rabatt? Eine Steuer? Ein Fixpreis? Schwer zu ändern: if (punkte &gt;= 100) { ... } Wenn sich die Punktegrenze ändert, muss sie ggfs. an mehreren Stellen ersetzt werden. Ersetze Magic Numbers durch Konstanten mit erklärendem Namen: const double Umsatzsteuer = 19.99; double preis = menge * Umsatzsteuer; Bessere Lesbarkeit und Wartbarkeit: const int MindestpunkteFürBonus = 100; if (punkte &gt;= MindestpunkteFürBonus) { ... } Best Practice: const für fixe Wertegib Konstanten sprechende NamenVermeide Hardcoded-Zahlen in Vergleichen oder Berechnungen  ","version":"Next","tagName":"h3"},{"title":"Konstanten​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Grundbegriffe#konstanten","content":" Eine Konstante (lat constans 'feststehend') ist ein Behälter für eine Wert, der nach der Zuweisung nicht verändert werden kann. Das Gegenstück dazu ist eine Variable.  Exkurs: const vs readonly Was ist readonly? Das Schlüsselwort readonly in C# kennzeichnet Felder, deren Wert nach der Initialisierung nicht mehr geändert werden kann. Im Gegensatz zu const kann ein readonly-Feld zur Laufzeit initialisiert werden, z. B. im Konstruktor. Unterschiede zwischen readonly und const Merkmal\tconst\treadonlyWertänderung\tMuss zur Kompilierzeit feststehen\tKann zur Laufzeit gesetzt werden Gültigkeitsbereich\tNur für primitive Typen &amp; Strings\tFür alle Datentypen nutzbar Wo erlaubt?\tNur in statischen Kontexten\tIn Instanz- und statischen Feldern Verwendung in Konstruktoren\t❌ Nein\t✅ Ja Beispiel\tconst double Pi = 3.14;\treadonly int maxUsers; tip ✅ Nutze readonly, wenn: Der Wert erst zur Laufzeit bekannt ist.Der Wert von einem Konstruktor abhängt.Du komplexe Objekte (z. B. Listen, Klassen) speichern möchtest. ✅ Nutze const, wenn: Der Wert zur Kompilierzeit bekannt ist.Es sich um einfache Zahlen, Strings oder boolesche Werte handelt. Beispiel in statischen Feldern class Config { public static readonly int MaxConnections = 100; static Config() { MaxConnections = 200; // Initialisierung ist in statischem Konstruktor erlaubt } } readonly in anderen Sprachen Sprache\tEntsprechung von readonlyC++\tconst für Felder Java\tfinal für Felder TypeScript\treadonly für Klassenvariablen Python\t@property mit nur einem Getter  ","version":"Next","tagName":"h3"},{"title":"Anweisung​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Grundbegriffe#anweisung","content":" (eng Statement)  Statements sind komplette Einheiten von Code, die eine bestimmte Operation ausführen, wie z.B. eine Variable zuzuweisen oder eine Schleife auszuführen.  Zentrales Element Imperativer Programmiersprachen: Programmierparadigma nach dem ein Programm aus einer Folge von Anweisungen besteht, die vorgeben in welcher Reihenfolge was vom Computer getan werden soll.  Beispiele:  Zuweisung: x = 5Funktionsaufruf: print(&quot;Hallo&quot;)Schleifen: for i in range(10): [...]Bedingungen: if x &gt; 3: [...]  ","version":"Next","tagName":"h3"},{"title":"Prozedur​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Grundbegriffe#prozedur","content":" Variante zum Begriff &quot;Unterprogramm&quot;. Anweisungen einer Prozedur können über aufgerufen und dadurch mehrfach verwendet werden. Im Gegensatz zu Funktionen liefern Prozeduren normalerweise keinen Rückgabewert. Je nach Programmiersprache und Programmierparadigma gibt es jedoch Unterschiede in der Definition des Begriffs Prozedur und der Abgrenzung zur Funktion.  ","version":"Next","tagName":"h3"},{"title":"Funktion​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Grundbegriffe#funktion","content":" Ein Programmkonstrukt (&quot;Unterprogramm&quot;), mit dem Quellcode strukturiert werden kann, sodass Teile der Funktionalität wiederverwendbar sind. Im Gegensatz zu Prozeduren geben Funktionen einen Wert zurück, der direkt verwendet werden kann. Prozeduren, die keinen Rückgabewert haben, können nur indirekt Ergebnisse liefern, indem entweder Referenzparameter oder globale Variablen verändert werden.  ","version":"Next","tagName":"h3"},{"title":"Methode​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Grundbegriffe#methode","content":" Eine Methode ist eine Funktion, die in einer Klasse oder einem Objekt definiert ist. Sie gehört zu einem bestimmten Objekt oder einer Klasse und kann daher auf dessen Eigenschaften (Attribute) und andere Methoden zugreifen.  ","version":"Next","tagName":"h3"},{"title":"Parameter​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Grundbegriffe#parameter","content":" Platzhalter für Werte in der Funktionsdefinition. Sie sind Teil der Funktionsdeklaration. funktion(parameter, parameter){[...]}  ","version":"Next","tagName":"h3"},{"title":"Argument​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Grundbegriffe#argument","content":" Ein Argument ist der tatsächliche Wert oder die Referenz, die an eine Funktion übergeben wird, wenn diese aufgerufen wird. Argumente werden im Funktionsaufruf übergeben und entsprechen den Parametern, die in der Funktionsdefinition deklariert sind. funktion(3435, 23){[...]}  ","version":"Next","tagName":"h3"},{"title":"Klasse​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Grundbegriffe#klasse","content":" Eine Klasse ist ein Bauplan für Objekte. Sie definiert eine Datenstruktur und die Methoden (Funktionen), die darauf arbeiten.  Feld​  Ein Feld ist eine direkte Variable in einer Klasse oder Struktur, die den Zustand eines Objekts speichert.  Wird meistens als privates Datenmitglied (private) definiert, um direkten Zugriff zu vermeiden.Kann direkt gelesen oder geändert werden (sofern public, was oft vermieden wird -&gt; Kapselung / Geheimnisprinziep).Beinhaltet keine Logik (wie Überprüfung oder Validierung).  Attribut​  Der Begriff Attribut ist allgemeiner als &quot;Feld&quot;.In der OOP bezeichnet ein Attribut einfach eine Eigenschaft eines Objekts, unabhängig von der konkreten Implementierung.In Sprachen wie Python oder JavaScript werden Attribute oft als alles betrachtet, was ein Objekt besitzt (Felder, Methoden, Properties).In C# oder Java wird der Begriff &quot;Attribut&quot; weniger für Felder/Properties verwendet, sondern für Metadaten (Annotationen oder Decorators), die zusätzliche Informationen für den Compiler oder Laufzeitumgebungen enthalten.  Property (Eigenschaft, Zugriffsmethode)​  Eine Property ist eine Methode, die wie ein Feld aussieht.  Ermöglicht kontrollierten Zugriff auf Felder mit Getter- und Setter-Methoden.Unterstützt Validierung, Berechnungen oder Schutzmechanismen.Verhindert direkten Zugriff auf interne Felder.  Best Practice in C#: Private Felder + Public Properties!  Beispiel in Python class Person: # Konstruktor (wird aufgerufen wenn ein neues Objekt erstellt wird) def __init__(self, name, age): self.name = name self.age = age # Methode def greet(self): print(f&quot;Hallo, mein Name ist {self.name} und ich bin {self.age} Jahre alt.&quot;)   ","version":"Next","tagName":"h3"},{"title":"Objekt​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Grundbegriffe#objekt","content":" Ein Objekt ist eine Instanz einer Klasse. Es repräsentiert ein spezifisches Exemplar der Klasse und hat Attribute (Daten) und Methoden (Funktionen).  Ein Objekt der Klasse Person (s.o.) person1 = Person(&quot;Alice&quot;, 30) person1.greet()   ","version":"Next","tagName":"h3"},{"title":"Konstruktor​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Grundbegriffe#konstruktor","content":" Ein Konstruktor ist eine spezielle Methode innerhalb einer Klasse, die beim Erstellen eines Objekts automatisch aufgerufen wird.  Initialisiert ein Objekt in einem definierten Anfangszustand (z. B. setzt Standardwerte).Reserviert benötigte Resourcen, sofern diese zum Zeitpunkt der Objekterstellung bereits bekannt sind.  Konstruktoren in C# EinfachMehrere (Überladung)Aufruf mit this using System; class Person { public string Name; public int Age; // Konstruktor public Person(string name, int age) { Name = name; Age = age; } public void Greet() { Console.WriteLine($&quot;Hallo, mein Name ist {Name} und ich bin {Age} Jahre alt.&quot;); } } class Program { static void Main() { Person p = new Person(&quot;Max&quot;, 30); // Konstruktor wird aufgerufen p.Greet(); } }   Konstruktoren in Python EinfachDefault ParameterVererbung mit super() class Person: def __init__(self, name, age): # Konstruktor self.name = name self.age = age def greet(self): print(f&quot;Hallo, mein Name ist {self.name} und ich bin {self.age} Jahre alt.&quot;) # Objekterstellung p = Person(&quot;Max&quot;, 30) # Konstruktor wird automatisch aufgerufen p.greet()   ","version":"Next","tagName":"h3"},{"title":"Iterator​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Grundbegriffe#iterator","content":" Ein Iterator ist ein Objekt, das eine Sequenz von Elementen einen nach dem anderen zurückgibt, ohne alle Elemente gleichzeitig im Speicher zu halten. Iteratoren ermöglichen es, große oder unendliche Datenstrukturen effizient zu durchlaufen.  Erstellung und Nutzung eines Iterators in Python my_list = [1, 2, 3] # Eine Liste (iterierbares Objekt) my_iter = iter(my_list) # Erzeugt einen Iterator für die Liste print(next(my_iter)) # Gibt 1 aus print(next(my_iter)) # Gibt 2 aus   Iteratoren mit C# C# nutzt das yield Schlüsselwort, um Iteratoren einfach zu erstellen, ohne dass man eine eigene Klasse schreiben muss. Implementierung von yield return um ein großes Array zu verarbeiten using System; using System.Collections.Generic; class Program { static void Main() { foreach (var name in GetNames()) { if (name.StartsWith(&quot;A&quot;)) { // Stoppt frühzeitig, wenn genug gefunden wurden Console.WriteLine(name); break; } } } static IEnumerable&lt;string&gt; GetNames() { string[] names = new string[10000]; for (int i = 0; i &lt; names.Length; i++) { names[i] = &quot;Name&quot; + i; // Dummy-Daten } foreach (var name in names) { yield return name; // Gibt Namen einzeln zurück } } }   ","version":"Next","tagName":"h3"},{"title":"Generator​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Grundbegriffe#generator","content":" Ein Generator ist eine spezielle Funktion, die Iteratoren erstellt.  Er gibt Werte Schritt für Schritt zurück, ohne alle Werte auf einmal zu speichern.Wird oft für große Datenmengen oder unendliche Sequenzen verwendet.In C# nutzt man yield return, in Python yield.  Wann Generatoren nutzen? ✅ Große Datenmengen streamen – Falls du nicht alles auf einmal laden willst. ✅ Unendliche Sequenzen – Perfekt für Fibonacci, Zufallszahlen, etc. ✅ Effiziente Speicherverwendung – Erzeugt Werte nur bei Bedarf.  Einfacher Generator Beispielcode PythonC# # Gibt Werte Schritt für Schritt zurück # Die Methode merkt sich den Zustand def count_up_to(max): for i in range(1, max + 1): yield i # Gibt einen Wert zurück und pausiert for num in count_up_to(5): print(num)   ","version":"Next","tagName":"h3"},{"title":"Dekorator​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Grundlagen/Software-Entwicklung/Grundbegriffe#dekorator","content":" Ein Dekorator ist ein Entwurfsmuster (Strukturmuster), mit dem eine Funktion, Methode oder Klasse zur Laufzeit verändert oder erweitert werden kann, ohne ihren eigentlichen Code zu ändern. Das Muster stellt eine flexible Alternative zur Unterklassenbildung dar, um eine Klasse um zusätzliche Funktionalitäten zu erweitern.  In Python gibt es native Dekoratoren (@decorator), um Funktionen zu modifizieren.In C# nutzt man Attribute ([Attribute]) oder Wrapper-Klassen für ähnliche Funktionalität.  Ein Dekorator in Python # my_decorator nimmt eine Funktion (func) als Argument # der wrapper führt zusätzlichen Code vor und nach der Funktion aus # @my_decorator wendet die Modifikation auf say_hello() an def my_decorator(func): def wrapper(): print(&quot;Vor der Funktion&quot;) func() print(&quot;Nach der Funktion&quot;) return wrapper @my_decorator # Das ist der Dekorator def say_hello(): print(&quot;Hallo!&quot;) say_hello()  ","version":"Next","tagName":"h3"},{"title":"Python 3 Dokumentation","type":0,"sectionRef":"#","url":"/my-documentation/docs/Python/Python-Docu","content":"","keywords":"","version":"Next"},{"title":"Python Modules / Packaging​","type":1,"pageTitle":"Python 3 Dokumentation","url":"/my-documentation/docs/Python/Python-Docu#python-modules--packaging","content":" Python Packaging User Guide​  Python Module Index​  Python Package Index​  PIP (Python Package Installer)​  ","version":"Next","tagName":"h2"},{"title":"Python Language Reference​","type":1,"pageTitle":"Python 3 Dokumentation","url":"/my-documentation/docs/Python/Python-Docu#python-language-reference","content":" 1. Introduction​ 1.1. Alternate Implementations1.2. Notation 2. Lexical analysis​ 2.1. Line structure2.2. Other tokens2.3. Identifiers and keywords2.4. Literals2.5. Operators2.6. Delimiters 3. Data model​ 3.1. Objects, values and types3.2. The standard type hierarchy3.3. Special method names3.4. Coroutines 4. Execution model​ 4.1. Structure of a program4.2. Naming and binding4.3. Exceptions 5. The import system​ 5.1. importlib5.2. Packages5.3. Searching5.4. Loading5.5. The Path Based Finder5.6. Replacing the standard import system5.7. Package Relative Imports5.8. Special considerations for main5.9. References 6. Expressions​ 6.1. Arithmetic conversions6.2. Atoms6.3. Primaries6.4. Await expression6.5. The power operator6.6. Unary arithmetic and bitwise operations6.7. Binary arithmetic operations6.8. Shifting operations6.9. Binary bitwise operations6.10. Comparisons6.11. Boolean operations6.12. Assignment expressions6.13. Conditional expressions6.14. Lambdas6.15. Expression lists6.16. Evaluation order6.17. Operator precedence 7. Simple statements​ 7.1. Expression statements7.2. Assignment statements7.3. The assert statement7.4. The pass statement7.5. The del statement7.6. The return statement7.7. The yield statement7.8. The raise statement7.9. The break statement7.10. The continue statement7.11. The import statement7.12. The global statement7.13. The nonlocal statement7.14. The type statement 8. Compound statements​ 8.1. The if statement8.2. The while statement8.3. The for statement8.4. The try statement8.5. The with statement8.6. The match statement8.7. Function definitions8.8. Class definitions8.9. Coroutines8.10. Type parameter lists 9. Top-level components​ 9.1. Complete Python programs9.2. File input9.3. Interactive input9.4. Expression input 10. Full Grammar specification​  ","version":"Next","tagName":"h2"},{"title":"Python Library Reference​","type":1,"pageTitle":"Python 3 Dokumentation","url":"/my-documentation/docs/Python/Python-Docu#python-library-reference","content":" Introduction​ Notes on availability Built-in Functions​ Built-in Constants​ Constants added by the site module Built-in Types​ Truth Value TestingBoolean Operations — and, or, notComparisonsNumeric Types — int, float, complexBoolean Type - boolIterator TypesSequence Types — list, tuple, rangeText Sequence Type — strBinary Sequence Types — bytes, bytearray, memoryviewSet Types — set, frozensetMapping Types — dictContext Manager TypesType Annotation Types — Generic Alias, UnionOther Built-in TypesSpecial AttributesInteger string conversion length limitation Built-in Exceptions​ Exception contextInheriting from built-in exceptionsBase classesConcrete exceptionsWarningsException groupsException hierarchy Text Processing Services​ string — Common string operationsre — Regular expression operationsdifflib — Helpers for computing deltastextwrap — Text wrapping and fillingunicodedata — Unicode Databasestringprep — Internet String Preparationreadline — GNU readline interfacerlcompleter — Completion function for GNU readline Binary Data Services​ struct — Interpret bytes as packed binary datacodecs — Codec registry and base classes Data Types​ datetime — Basic date and time typeszoneinfo — IANA time zone supportcalendar — General calendar-related functionscollections — Container datatypescollections.abc — Abstract Base Classes for Containersheapq — Heap queue algorithmbisect — Array bisection algorithmarray — Efficient arrays of numeric valuesweakref — Weak referencestypes — Dynamic type creation and names for built-in typescopy — Shallow and deep copy operationspprint — Data pretty printerreprlib — Alternate repr() implementationenum — Support for enumerationsgraphlib — Functionality to operate with graph-like structures Numeric and Mathematical Modules​ numbers — Numeric abstract base classesmath — Mathematical functionscmath — Mathematical functions for complex numbersdecimal — Decimal fixed-point and floating-point arithmeticfractions — Rational numbersrandom — Generate pseudo-random numbersstatistics — Mathematical statistics functions Functional Programming Modules​ itertools — Functions creating iterators for efficient loopingfunctools — Higher-order functions and operations on callable objectsoperator — Standard operators as functions File and Directory Access​ pathlib — Object-oriented filesystem pathsos.path — Common pathname manipulationsstat — Interpreting stat() resultsfilecmp — File and Directory Comparisonstempfile — Generate temporary files and directoriesglob — Unix style pathname pattern expansionfnmatch — Unix filename pattern matchinglinecache — Random access to text linesshutil — High-level file operations Data Persistence​ pickle — Python object serializationcopyreg — Register pickle support functionsshelve — Python object persistencemarshal — Internal Python object serializationdbm — Interfaces to Unix “databases”sqlite3 — DB-API 2.0 interface for SQLite databases Data Compression and Archiving​ zlib — Compression compatible with gzipgzip — Support for gzip filesbz2 — Support for bzip2 compressionlzma — Compression using the LZMA algorithmzipfile — Work with ZIP archivestarfile — Read and write tar archive files File Formats​ csv — CSV File Reading and Writingconfigparser — Configuration file parsertomllib — Parse TOML filesnetrc — netrc file processingplistlib — Generate and parse Apple .plist files Cryptographic Services​ hashlib — Secure hashes and message digestshmac — Keyed-Hashing for Message Authenticationsecrets — Generate secure random numbers for managing secrets Generic Operating System Services​ os — Miscellaneous operating system interfacesio — Core tools for working with streamstime — Time access and conversionslogging — Logging facility for Pythonlogging.config — Logging configurationlogging.handlers — Logging handlersplatform — Access to underlying platform’s identifying dataerrno — Standard errno system symbolsctypes — A foreign function library for Python Command Line Interface Libraries​ argparse — Parser for command-line options, arguments and subcommandsoptparse — Parser for command line optionsgetpass — Portable password inputfileinput — Iterate over lines from multiple input streamscurses — Terminal handling for character-cell displayscurses.textpad — Text input widget for curses programscurses.ascii — Utilities for ASCII characterscurses.panel — A panel stack extension for curses Concurrent Execution​ threading — Thread-based parallelismmultiprocessing — Process-based parallelismmultiprocessing.shared_memory — Shared memory for direct access across processesThe concurrent packageconcurrent.futures — Launching parallel taskssubprocess — Subprocess managementsched — Event schedulerqueue — A synchronized queue classcontextvars — Context Variables_thread — Low-level threading API Networking and Interprocess Communication​ asyncio — Asynchronous I/Osocket — Low-level networking interfacessl — TLS/SSL wrapper for socket objectsselect — Waiting for I/O completionselectors — High-level I/O multiplexingsignal — Set handlers for asynchronous eventsmmap — Memory-mapped file support Internet Data Handling​ email — An email and MIME handling packagejson — JSON encoder and decodermailbox — Manipulate mailboxes in various formatsmimetypes — Map filenames to MIME typesbase64 — Base16, Base32, Base64, Base85 Data Encodingsbinascii — Convert between binary and ASCIIquopri — Encode and decode MIME quoted-printable data Structured Markup Processing Tools​ html — HyperText Markup Language supporthtml.parser — Simple HTML and XHTML parserhtml.entities — Definitions of HTML general entitiesXML Processing Modulesxml.etree.ElementTree — The ElementTree XML APIxml.dom — The Document Object Model APIxml.dom.minidom — Minimal DOM implementationxml.dom.pulldom — Support for building partial DOM treesxml.sax — Support for SAX2 parsersxml.sax.handler — Base classes for SAX handlersxml.sax.saxutils — SAX Utilitiesxml.sax.xmlreader — Interface for XML parsersxml.parsers.expat — Fast XML parsing using Expat Internet Protocols and Support​ webbrowser — Convenient web-browser controllerwsgiref — WSGI Utilities and Reference Implementationurllib — URL handling modulesurllib.request — Extensible library for opening URLsurllib.response — Response classes used by urlliburllib.parse — Parse URLs into componentsurllib.error — Exception classes raised by urllib.requesturllib.robotparser — Parser for robots.txthttp — HTTP moduleshttp.client — HTTP protocol clientftplib — FTP protocol clientpoplib — POP3 protocol clientimaplib — IMAP4 protocol clientsmtplib — SMTP protocol clientuuid — UUID objects according to RFC 4122socketserver — A framework for network servershttp.server — HTTP servershttp.cookies — HTTP state managementhttp.cookiejar — Cookie handling for HTTP clientsxmlrpc — XMLRPC server and client modulesxmlrpc.client — XML-RPC client accessxmlrpc.server — Basic XML-RPC serversipaddress — IPv4/IPv6 manipulation library Multimedia Services​ wave — Read and write WAV filescolorsys — Conversions between color systems Internationalization​ gettext — Multilingual internationalization serviceslocale — Internationalization services Program Frameworks​ turtle — Turtle graphicscmd — Support for line-oriented command interpretersshlex — Simple lexical analysis Graphical User Interfaces with Tk​ tkinter — Python interface to Tcl/Tktkinter.colorchooser — Color choosing dialogtkinter.font — Tkinter font wrapperTkinter Dialogstkinter.messagebox — Tkinter message promptstkinter.scrolledtext — Scrolled Text Widgettkinter.dnd — Drag and drop supporttkinter.ttk — Tk themed widgetsIDLE Development Tools​ typing — Support for type hintspydoc — Documentation generator and online help systemPython Development Modedoctest — Test interactive Python examplesunittest — Unit testing frameworkunittest.mock — mock object libraryunittest.mock — getting startedtest — Regression tests package for Pythontest.support — Utilities for the Python test suitetest.support.socket_helper — Utilities for socket teststest.support.script_helper — Utilities for the Python execution teststest.support.bytecode_helper — Support tools for testing correct bytecode generationtest.support.threading_helper — Utilities for threading teststest.support.os_helper — Utilities for os teststest.support.import_helper — Utilities for import teststest.support.warnings_helper — Utilities for warnings tests Debugging and Profiling​ Audit events tablebdb — Debugger frameworkfaulthandler — Dump the Python tracebackpdb — The Python DebuggerThe Python Profilerstimeit — Measure execution time of small code snippetstrace — Trace or track Python statement executiontracemalloc — Trace memory allocations Software Packaging and Distribution​ ensurepip — Bootstrapping the pip installervenv — Creation of virtual environmentszipapp — Manage executable Python zip archives Python Runtime Services​ sys — System-specific parameters and functionssys.monitoring — Execution event monitoringsysconfig — Provide access to Python’s configuration informationbuiltins — Built-in objects__main__ — Top-level code environmentwarnings — Warning controldataclasses — Data Classescontextlib — Utilities for with-statement contextsabc — Abstract Base Classesatexit — Exit handlerstraceback — Print or retrieve a stack traceback__future__ — Future statement definitionsgc — Garbage Collector interfaceinspect — Inspect live objectssite — Site-specific configuration hook Custom Python Interpreters​ code — Interpreter base classescodeop — Compile Python code Importing Modules​ zipimport — Import modules from Zip archivespkgutil — Package extension utilitymodulefinder — Find modules used by a scriptrunpy — Locating and executing Python modulesimportlib — The implementation of importimportlib.resources – Package resource reading, opening and accessimportlib.resources.abc – Abstract base classes for resourcesimportlib.metadata – Accessing package metadataThe initialization of the sys.path module search path Python Language Services​ ast — Abstract Syntax Treessymtable — Access to the compiler’s symbol tablestoken — Constants used with Python parse treeskeyword — Testing for Python keywordstokenize — Tokenizer for Python sourcetabnanny — Detection of ambiguous indentationpyclbr — Python module browser supportpy_compile — Compile Python source filescompileall — Byte-compile Python librariesdis — Disassembler for Python bytecodepickletools — Tools for pickle developers MS Windows Specific Services​ msvcrt — Useful routines from the MS VC++ runtimewinreg — Windows registry accesswinsound — Sound-playing interface for Windows Unix Specific Services​ posix — The most common POSIX system callspwd — The password databasegrp — The group databasetermios — POSIX style tty controltty — Terminal control functionspty — Pseudo-terminal utilitiesfcntl — The fcntl and ioctl system callsresource — Resource usage informationsyslog — Unix syslog library routines Modules command-line interface (CLI)​ Superseded Modules​ getopt — C-style parser for command line options Removed Modules​ Security Considerations​ ","version":"Next","tagName":"h2"},{"title":"Quick-Reference","type":0,"sectionRef":"#","url":"/my-documentation/docs/Python/Python-Quickref","content":"","keywords":"","version":"Next"},{"title":"Python Cheat Sheets​","type":1,"pageTitle":"Quick-Reference","url":"/my-documentation/docs/Python/Python-Quickref#python-cheat-sheets","content":" Comprehensive Python Cheatsheet  ","version":"Next","tagName":"h2"},{"title":"Methods​","type":1,"pageTitle":"Quick-Reference","url":"/my-documentation/docs/Python/Python-Quickref#methods","content":" ","version":"Next","tagName":"h2"},{"title":"String Methods​","type":1,"pageTitle":"Quick-Reference","url":"/my-documentation/docs/Python/Python-Quickref#string-methods","content":" Note: All string methods returns new values. They do not change the original string.  &lt;str&gt; = &lt;str&gt;.strip() # Strips all whitespace characters from both ends. &lt;str&gt; = &lt;str&gt;.strip('&lt;chars&gt;') # Strips passed characters. Also lstrip/rstrip(). &lt;list&gt; = &lt;str&gt;.split() # Splits on one or more whitespace characters. &lt;list&gt; = &lt;str&gt;.split(sep=None, maxsplit=-1) # Splits on 'sep' str at most 'maxsplit' times. &lt;list&gt; = &lt;str&gt;.splitlines(keepends=False) # On [\\n\\r\\f\\v\\x1c-\\x1e\\x85\\u2028\\u2029] and \\r\\n. &lt;str&gt; = &lt;str&gt;.join(&lt;coll_of_strings&gt;) # Joins elements using string as a separator. &lt;bool&gt; = &lt;sub_str&gt; in &lt;str&gt; # Checks if string contains the substring. &lt;bool&gt; = &lt;str&gt;.startswith(&lt;sub_str&gt;) # Pass tuple of strings for multiple options. &lt;int&gt; = &lt;str&gt;.find(&lt;sub_str&gt;) # Returns start index of the first match or -1. &lt;int&gt; = &lt;str&gt;.index(&lt;sub_str&gt;) # Same, but raises ValueError if there's no match. &lt;str&gt; = &lt;str&gt;.lower() # Changes the case. Also upper/capitalize/title(). &lt;str&gt; = &lt;str&gt;.replace(old, new [, count]) # Replaces 'old' with 'new' at most 'count' times. &lt;str&gt; = &lt;str&gt;.translate(&lt;table&gt;) # Use `str.maketrans(&lt;dict&gt;)` to generate table. &lt;str&gt; = chr(&lt;int&gt;) # Converts int to Unicode character. &lt;int&gt; = ord(&lt;str&gt;) # Converts Unicode character to int.   Property Methods​  &lt;bool&gt; = &lt;str&gt;.isdecimal() # Checks for [0-9]. Also [०-९] and [٠-٩]. &lt;bool&gt; = &lt;str&gt;.isdigit() # Checks for [²³¹…] and isdecimal(). &lt;bool&gt; = &lt;str&gt;.isnumeric() # Checks for [¼½¾…], [零〇一…] and isdigit(). &lt;bool&gt; = &lt;str&gt;.isalnum() # Checks for [a-zA-Z…] and isnumeric(). &lt;bool&gt; = &lt;str&gt;.isprintable() # Checks for [ !#$%…] and isalnum(). &lt;bool&gt; = &lt;str&gt;.isspace() # Checks for [ \\t\\n\\r\\f\\v\\x1c-\\x1f\\x85\\xa0…].   Regex​  import re &lt;str&gt; = re.sub(r'&lt;regex&gt;', new, text, count=0) # Substitutes all occurrences with 'new'. &lt;list&gt; = re.findall(r'&lt;regex&gt;', text) # Returns all occurrences as strings. &lt;list&gt; = re.split(r'&lt;regex&gt;', text, maxsplit=0) # Add brackets around regex to keep matches. &lt;Match&gt; = re.search(r'&lt;regex&gt;', text) # First occurrence of the pattern or None. &lt;Match&gt; = re.match(r'&lt;regex&gt;', text) # Searches only at the beginning of the text. &lt;iter&gt; = re.finditer(r'&lt;regex&gt;', text) # Returns all occurrences as Match objects.   Match Object  &lt;str&gt; = &lt;Match&gt;.group() # Returns the whole match. Also group(0). &lt;str&gt; = &lt;Match&gt;.group(1) # Returns part inside the first brackets. &lt;tuple&gt; = &lt;Match&gt;.groups() # Returns all bracketed parts. &lt;int&gt; = &lt;Match&gt;.start() # Returns start index of the match. &lt;int&gt; = &lt;Match&gt;.end() # Returns exclusive end index of the match.   Special Sequences  '\\d' == '[0-9]' # Also [०-९…]. Matches a decimal character. '\\w' == '[a-zA-Z0-9_]' # Also [ª²³…]. Matches an alphanumeric or _. '\\s' == '[ \\t\\n\\r\\f\\v]' # Also [\\x1c-\\x1f…]. Matches a whitespace.   Method\tDescriptioncapitalize()\tConverts the first character to upper case casefold()\tConverts string into lower case center()\tReturns a centered string count()\tReturns the number of times a specified value occurs in a string encode()\tReturns an encoded version of the string endswith()\tReturns true if the string ends with the specified value expandtabs()\tSets the tab size of the string find()\tSearches the string for a specified value and returns the position of where it was found format()\tFormats specified values in a string format_map()\tFormats specified values in a string index()\tSearches the string for a specified value and returns the position of where it was found isalnum()\tReturns True if all characters in the string are alphanumeric isalpha()\tReturns True if all characters in the string are in the alphabet isascii()\tReturns True if all characters in the string are ascii characters isdecimal()\tReturns True if all characters in the string are decimals isdigit()\tReturns True if all characters in the string are digits isidentifier()\tReturns True if the string is an identifier islower()\tReturns True if all characters in the string are lower case isnumeric()\tReturns True if all characters in the string are numeric isprintable()\tReturns True if all characters in the string are printable isspace()\tReturns True if all characters in the string are whitespaces istitle()\tReturns True if the string follows the rules of a title isupper()\tReturns True if all characters in the string are upper case join()\tConverts the elements of an iterable into a string ljust()\tReturns a left justified version of the string lower()\tConverts a string into lower case lstrip()\tReturns a left trim version of the string maketrans()\tReturns a translation table to be used in translations partition()\tReturns a tuple where the string is parted into three parts replace()\tReturns a string where a specified value is replaced with a specified value rfind()\tSearches the string for a specified value and returns the last position of where it was found rindex()\tSearches the string for a specified value and returns the last position of where it was found rjust()\tReturns a right justified version of the string rpartition()\tReturns a tuple where the string is parted into three parts rsplit()\tSplits the string at the specified separator, and returns a list rstrip()\tReturns a right trim version of the string split()\tSplits the string at the specified separator, and returns a list splitlines()\tSplits the string at line breaks and returns a list startswith()\tReturns true if the string starts with the specified value strip()\tReturns a trimmed version of the string swapcase()\tSwaps cases, lower case becomes upper case and vice versa title()\tConverts the first character of each word to upper case translate()\tReturns a translated string upper()\tConverts a string into upper case zfill()\tFills the string with a specified number of 0 values at the beginning  ","version":"Next","tagName":"h3"},{"title":"List Methods​","type":1,"pageTitle":"Quick-Reference","url":"/my-documentation/docs/Python/Python-Quickref#list-methods","content":" Method\tDescriptionappend()\tAdds an element at the end of the list clear()\tRemoves all the elements from the list copy()\tReturns a copy of the list count()\tReturns the number of elements with the specified value extend()\tAdd the elements of a list (or any iterable), to the end of the current list index()\tReturns the index of the first element with the specified value insert()\tAdds an element at the specified position pop()\tRemoves the element at the specified position remove()\tRemoves the first item with the specified value reverse()\tReverses the order of the list sort()\tSorts the list  ","version":"Next","tagName":"h3"},{"title":"Dictionary Methods​","type":1,"pageTitle":"Quick-Reference","url":"/my-documentation/docs/Python/Python-Quickref#dictionary-methods","content":" Method\tDescriptionclear()\tRemoves all the elements from the dictionary copy()\tReturns a copy of the dictionary fromkeys()\tReturns a dictionary with the specified keys and value get()\tReturns the value of the specified key items()\tReturns a list containing a tuple for each key value pair keys()\tReturns a list containing the dictionary's keys pop()\tRemoves the element with the specified key popitem()\tRemoves the last inserted key-value pair setdefault()\tReturns the value of the specified key. If the key does not exist: insert the key, with the specified value update()\tUpdates the dictionary with the specified key-value pairs values()\tReturns a list of all the values in the dictionary  ","version":"Next","tagName":"h3"},{"title":"Tuple Methods​","type":1,"pageTitle":"Quick-Reference","url":"/my-documentation/docs/Python/Python-Quickref#tuple-methods","content":" Method\tDescriptioncount()\tReturns the number of times a specified value occurs in a tuple index()\tSearches the tuple for a specified value and returns the position of where it was found  ","version":"Next","tagName":"h3"},{"title":"Set Methods​","type":1,"pageTitle":"Quick-Reference","url":"/my-documentation/docs/Python/Python-Quickref#set-methods","content":" Method\tShortcut\tDescriptionadd() Adds an element to the set clear() Removes all the elements from the set copy() Returns a copy of the set difference()\t-\tReturns a set containing the difference between two or more sets difference_update()\t-=\tRemoves the items in this set that are also included in another, specified set discard() Remove the specified item intersection()\t&amp;\tReturns a set, that is the intersection of two other sets intersection_update()\t&amp;=\tRemoves the items in this set that are not present in other, specified set(s) isdisjoint() Returns whether two sets have a intersection or not issubset()\t&lt;=\tReturns whether another set contains this set or not issuperset()\t&gt;=\tReturns whether this set contains another set or not pop() Removes an element from the set remove() Removes the specified element symmetric_difference()\t^\tReturns a set with the symmetric differences of two sets symmetric_difference_update()\t^=\tInserts the symmetric differences from this set and another union()\t|\tReturn a set containing the union of sets update()\t|=\tUpdate the set with the union of this set and others  ","version":"Next","tagName":"h3"},{"title":"File Methods​","type":1,"pageTitle":"Quick-Reference","url":"/my-documentation/docs/Python/Python-Quickref#file-methods","content":" Method\tDescriptionclose()\tCloses the file detach()\tReturns the separated raw stream from the buffer fileno()\tReturns a number that represents the stream, from the operating system's perspective flush()\tFlushes the internal buffer isatty()\tReturns whether the file stream is interactive or not read()\tReturns the file content readable()\tReturns whether the file stream can be read or not readline()\tReturns one line from the file readlines()\tReturns a list of lines from the file seek()\tChange the file position seekable()\tReturns whether the file allows us to change the file position tell()\tReturns the current file position truncate()\tResizes the file to a specified size writable()\tReturns whether the file can be written to or not write()\tWrites the specified string to the file writelines()\tWrites a list of strings to the file  ","version":"Next","tagName":"h3"},{"title":"Common Operations​","type":1,"pageTitle":"Quick-Reference","url":"/my-documentation/docs/Python/Python-Quickref#common-operations","content":" ","version":"Next","tagName":"h2"},{"title":"F-Strings​","type":1,"pageTitle":"Quick-Reference","url":"/my-documentation/docs/Python/Python-Quickref#f-strings","content":"   Syntax​  Ein F-String wird mit einem vorangestellten f oder F gekennzeichnet und enthält Ausdrücke in geschweiften Klammern {}, die zur Laufzeit ausgewertet werden.  &lt;str&gt; = f'{&lt;el_1&gt;}, {&lt;el_2&gt;}' # Curly brackets can also contain expressions. &lt;str&gt; = '{}, {}'.format(&lt;el_1&gt;, &lt;el_2&gt;) # Or: '{0}, {a}'.format(&lt;el_1&gt;, a=&lt;el_2&gt;)   format_spec\tfill | align | sign | width | grouping_option | &quot;.&quot;precision | typefill\tany character align\t&quot;&lt;&quot; | &quot;&gt;&quot; | &quot;=&quot; | &quot;^&quot; sign\t&quot;+&quot; | &quot;-&quot; | &quot; &quot; width\tdigit+ grouping_option\t&quot;_&quot; | &quot;,&quot; precision\tdigit+ type\t&quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;E&quot; | &quot;f&quot; | &quot;F&quot; | &quot;g&quot; | &quot;G&quot; | &quot;n&quot; | &quot;o&quot; | &quot;s&quot; | &quot;x&quot; | &quot;X&quot; | &quot;%&quot;  Alignment​  Option\tMeaning'&lt;'\tForces the field to be left-aligned within the available space (this is the default for most objects). '&gt;'\tForces the field to be right-aligned within the available space (this is the default for numbers). '='\tForces the padding to be placed after the sign (if any) but before the digits. This is used for printing fields in the form ‘+000000120’. This alignment option is only valid for numeric types. It becomes the default for numbers when ‘0’ immediately precedes the field width. '^'\tForces the field to be centered within the available space.  Integer Presentation Types​  Type\tMeaning'b'\tBinary format. Outputs the number in base 2. 'c'\tCharacter. Converts the integer to the corresponding unicode character before printing. 'd'\tDecimal Integer. Outputs the number in base 10. 'o'\tOctal format. Outputs the number in base 8. 'x'\tHex format. Outputs the number in base 16, using lower-case letters for the digits above 9. 'X'\tHex format. Outputs the number in base 16, using upper-case letters for the digits above 9. In case '#' is specified, the prefix '0x' will be upper-cased to '0X' as well. 'n'\tNumber. This is the same as 'd', except that it uses the current locale setting to insert the appropriate number separator characters. None\tThe same as 'd'.  Floating Point Presentation Types​  Type\tMeaning'e'\tScientific notation. For a given precision p, formats the number in scientific notation with the letter ‘e’ separating the coefficient from the exponent. The coefficient has one digit before and p digits after the decimal point, for a total of p + 1 significant digits. With no precision given, uses a precision of 6 digits after the decimal point for float, and shows all coefficient digits for Decimal. If no digits follow the decimal point, the decimal point is also removed unless the # option is used. 'E'\tScientific notation. Same as 'e' except it uses an upper case ‘E’ as the separator character. 'f'\tFixed-point notation. For a given precision p, formats the number as a decimal number with exactly p digits following the decimal point. With no precision given, uses a precision of 6 digits after the decimal point for float, and uses a precision large enough to show all coefficient digits for Decimal. If no digits follow the decimal point, the decimal point is also removed unless the # option is 'F'\tFixed-point notation. Same as 'f', but converts nan to NAN and inf to INF. 'g'\tGeneral format. For a given precision p &gt;= 1, this rounds the number to p significant digits and then formats the result in either fixed-point format or in scientific notation, depending on its magnitude. A precision of 0 is treated as equivalent to a precision of 1.The precise rules are as follows: suppose that the result formatted with presentation type 'e' and precision p-1 would have exponent exp. Then, if m &lt;= exp &lt; p, where m is -4 for floats and -6 for Decimals, the number is formatted with presentation type 'f' and precision p-1-exp. Otherwise, the number is formatted with presentation type 'e' and precision p-1. In both cases insignificant trailing zeros are removed from the significand, and the decimal point is also removed if there are no remaining digits following it, unless the '#' option is used.With no precision given, uses a precision of 6 significant digits for float. For Decimal, the coefficient of the result is formed from the coefficient digits of the value; scientific notation is used for values smaller than 1e-6 in absolute value and values where the place value of the least significant digit is larger than 1, and fixed-point notation is used otherwise.Positive and negative infinity, positive and negative zero, and nans, are formatted as inf, -inf, 0, -0 and nan respectively, regardless of the precision. 'G'\tGeneral format. Same as 'g' except switches to 'E' if the number gets too large. The representations of infinity and NaN are uppercased, too. 'n'\tNumber. This is the same as 'g', except that it uses the current locale setting to insert the appropriate number separator characters. '%'\tPercentage. Multiplies the number by 100 and displays in fixed ('f') format, followed by a percent sign. None\tFor float this is the same as 'g', except that when fixed-point notation is used to format the result, it always includes at least one digit past the decimal point. The precision used is as large as needed to represent the given value faithfully.For Decimal, this is the same as either 'g' or 'G' depending on the value of context.capitals for the current decimal context.The overall effect is to match the output of str() as altered by the other format modifiers.  F-String Examples​  &gt;&gt;&gt; Person = collections.namedtuple('Person', 'name height') &gt;&gt;&gt; person = Person('Jean-Luc', 187) &gt;&gt;&gt; f'{person.name} is {person.height / 100} meters tall.' 'Jean-Luc is 1.87 meters tall.' # General Options {&lt;el&gt;:&lt;10} # '&lt;el&gt; ' {&lt;el&gt;:^10} # ' &lt;el&gt; ' {&lt;el&gt;:&gt;10} # ' &lt;el&gt;' {&lt;el&gt;:.&lt;10} # '&lt;el&gt;......' {&lt;el&gt;:0} # '&lt;el&gt;' # Strings {'abcde':10} # 'abcde ' {'abcde':10.3} # 'abc ' {'abcde':.3} # 'abc' {'abcde'!r:10} # &quot;'abcde' &quot; # Numbers {123456:10} # ' 123456' {123456:10,} # ' 123,456' {123456:10_} # ' 123_456' {123456:+10} # ' +123456' {123456:=+10} # '+ 123456' {123456: } # ' 123456' {-123456: } # '-123456' # Floats {1.23456:10.3} # ' 1.23' {1.23456:10.3f} # ' 1.235' {1.23456:10.3e} # ' 1.235e+00' {1.23456:10.3%} # ' 123.456%'   More Examples &gt;&gt;&gt; name = &quot;Fred&quot; &gt;&gt;&gt; f&quot;He said his name is {name!r}.&quot; &quot;He said his name is 'Fred'.&quot; &gt;&gt;&gt; f&quot;He said his name is {repr(name)}.&quot; # repr() is equivalent to !r &quot;He said his name is 'Fred'.&quot; &gt;&gt;&gt; width = 10 &gt;&gt;&gt; precision = 4 &gt;&gt;&gt; value = decimal.Decimal(&quot;12.34567&quot;) &gt;&gt;&gt; f&quot;result: {value:{width}.{precision}}&quot; # nested fields 'result: 12.35' &gt;&gt;&gt; today = datetime(year=2017, month=1, day=27) &gt;&gt;&gt; f&quot;{today:%B %d, %Y}&quot; # using date format specifier 'January 27, 2017' &gt;&gt;&gt; f&quot;{today=:%B %d, %Y}&quot; # using date format specifier and debugging 'today=January 27, 2017' &gt;&gt;&gt; number = 1024 &gt;&gt;&gt; f&quot;{number:#0x}&quot; # using integer format specifier '0x400' &gt;&gt;&gt; foo = &quot;bar&quot; &gt;&gt;&gt; f&quot;{ foo = }&quot; # preserves whitespace &quot; foo = 'bar'&quot; &gt;&gt;&gt; line = &quot;The mill's closed&quot; &gt;&gt;&gt; f&quot;{line = }&quot; 'line = &quot;The mill\\'s closed&quot;' &gt;&gt;&gt; f&quot;{line = :20}&quot; &quot;line = The mill's closed &quot; &gt;&gt;&gt; f&quot;{line = !r:20}&quot; 'line = &quot;The mill\\'s closed&quot; '   ","version":"Next","tagName":"h3"},{"title":"Numeric Type​","type":1,"pageTitle":"Quick-Reference","url":"/my-documentation/docs/Python/Python-Quickref#numeric-type","content":"   All numeric types (except complex) support the following operations (for priorities of the operations, see Operator precedence):  Operation\tResultx + y\tsum of x and y x - y\tdifference of x and y x * y\tproduct of x and y x / y\tquotient of x and y x // y\tfloored quotient of x and y x % y\tremainder of x / y -x\tx negated +x\tx unchanged abs(x)\tabsolute value or magnitude of x int(x)\tx converted to integer float(x)\tx converted to floating point complex(re, im)\ta complex number with real part re, imaginary part im. im defaults to zero. c.conjugate()\tconjugate of the complex number c divmod(x, y)\tthe pair (x // y, x % y) pow(x, y)\tx to the power y x ** y\tx to the power y  Operation\tResultmath.trunc(x)\tx truncated to Integral round(x[, n])\tx rounded to n digits, rounding half to even. If n is omitted, it defaults to 0. math.floor(x)\tthe greatest Integral &lt;= _x_ math.ceil(x)\tthe least Integral &gt;= _x_  # Basic Functions &lt;num&gt; = pow(&lt;num&gt;, &lt;num&gt;) # Or: &lt;number&gt; ** &lt;number&gt; &lt;num&gt; = abs(&lt;num&gt;) # &lt;float&gt; = abs(&lt;complex&gt;) &lt;num&gt; = round(&lt;num&gt; [, ±ndigits]) # `round(126, -1) == 130` # Math from math import e, pi, inf, nan, isinf, isnan # `&lt;el&gt; == nan` is always False. from math import sin, cos, tan, asin, acos, atan # Also: degrees, radians. from math import log, log10, log2 # Log can accept base as second arg. # Statistics from statistics import mean, median, variance # Also: stdev, quantiles, groupby. # Random from random import random, randint, choice # Also: shuffle, gauss, triangular, seed. &lt;float&gt; = random() # A float inside [0, 1). &lt;int&gt; = randint(from_inc, to_inc) # An int inside [from_inc, to_inc]. &lt;el&gt; = choice(&lt;sequence&gt;) # Keeps the sequence intact. # Bin, Hex &lt;int&gt; = ±0b&lt;bin&gt; # Or: ±0x&lt;hex&gt; &lt;int&gt; = int('±&lt;bin&gt;', 2) # Or: int('±&lt;hex&gt;', 16) &lt;int&gt; = int('±0b&lt;bin&gt;', 0) # Or: int('±0x&lt;hex&gt;', 0) &lt;str&gt; = bin(&lt;int&gt;) # Returns '[-]0b&lt;bin&gt;'. Also hex().   ","version":"Next","tagName":"h3"},{"title":"Bitwise Operations​","type":1,"pageTitle":"Quick-Reference","url":"/my-documentation/docs/Python/Python-Quickref#bitwise-operations","content":"   Operation\tResultx | y\tbitwise or of x and y x ^ y\tbitwise exclusive or of x and y x &amp; y\tbitwise and of x and y x &lt;&lt; n\tx shifted left by n bits x &gt;&gt; n\tx shifted right by n bits ~x\tthe bits of x inverted  ","version":"Next","tagName":"h3"},{"title":"Sequence (list, tuple, range)​","type":1,"pageTitle":"Quick-Reference","url":"/my-documentation/docs/Python/Python-Quickref#sequence-list-tuple-range","content":"   Operation\tResultx in s\tTrue if an item of s is equal to x, else False x not in s\tFalse if an item of s is equal to x, else True s + t\tthe concatenation of s and t s * n or n * s\tequivalent to adding s to itself n times s[i]\t_i_th item of s, origin 0 s[i:j]\tslice of s from i to j s[i:j:k]\tslice of s from i to j with step k len(s)\tlength of s min(s)\tsmallest item of s max(s)\tlargest item of s s.index(x[, i[, j]])\tindex of the first occurrence of x in s (at or after index i and before index j) s.count(x)\ttotal number of occurrences of x in s  ","version":"Next","tagName":"h3"},{"title":"Mutable Sequence (list)​","type":1,"pageTitle":"Quick-Reference","url":"/my-documentation/docs/Python/Python-Quickref#mutable-sequence-list","content":"   Operation\tResults[i] = x\titem i of s is replaced by x s[i:j] = t\tslice of s from i to j is replaced by the contents of the iterable t del s[i:j]\tsame as s[i:j] = [] s[i:j:k] = t\tthe elements of s[i:j:k] are replaced by those of t del s[i:j:k]\tremoves the elements of s[i:j:k] from the list s.append(x)\tappends x to the end of the sequence (same as s[len(s):len(s)] = [x]) s.clear()\tremoves all items from s (same as del s[:]) s.copy()\tcreates a shallow copy of s (same as s[:]) s.extend(t) or s += t\textends s with the contents of t (for the most part the same as s[len(s):len(s)] = t) s *= n\tupdates s with its contents repeated n times s.insert(i, x)\tinserts x into s at the index given by i (same as s[i:i] = [x]) s.pop() or s.pop(i)\tretrieves the item at i and also removes it from s s.remove(x)\tremove the first item from s where s[i] is equal to x s.reverse()\treverses the items of s in place  ","version":"Next","tagName":"h3"},{"title":"Built-In Functions​","type":1,"pageTitle":"Quick-Reference","url":"/my-documentation/docs/Python/Python-Quickref#built-in-functions","content":" Function\tDescriptionabs()\tReturns the absolute value of a number all()\tReturns True if all items in an iterable object are true any()\tReturns True if any item in an iterable object is true ascii()\tReturns a readable version of an object. Replaces none-ascii characters with escape character bin()\tReturns the binary version of a number bool()\tReturns the boolean value of the specified object bytearray()\tReturns an array of bytes bytes()\tReturns a bytes object callable()\tReturns True if the specified object is callable, otherwise False chr()\tReturns a character from the specified Unicode code. classmethod()\tConverts a method into a class method compile()\tReturns the specified source as an object, ready to be executed complex()\tReturns a complex number delattr()\tDeletes the specified attribute (property or method) from the specified object dict()\tReturns a dictionary (Array) dir()\tReturns a list of the specified object's properties and methods divmod()\tReturns the quotient and the remainder when argument1 is divided by argument2 enumerate()\tTakes a collection (e.g. a tuple) and returns it as an enumerate object eval()\tEvaluates and executes an expression exec()\tExecutes the specified code (or object) filter()\tUse a filter function to exclude items in an iterable object float()\tReturns a floating point number format()\tFormats a specified value frozenset()\tReturns a frozenset object getattr()\tReturns the value of the specified attribute (property or method) globals()\tReturns the current global symbol table as a dictionary hasattr()\tReturns True if the specified object has the specified attribute (property/method) hash()\tReturns the hash value of a specified object help()\tExecutes the built-in help system hex()\tConverts a number into a hexadecimal value id()\tReturns the id of an object input()\tAllowing user input int()\tReturns an integer number isinstance()\tReturns True if a specified object is an instance of a specified object issubclass()\tReturns True if a specified class is a subclass of a specified object iter()\tReturns an iterator object len()\tReturns the length of an object list()\tReturns a list locals()\tReturns an updated dictionary of the current local symbol table map()\tReturns the specified iterator with the specified function applied to each item max()\tReturns the largest item in an iterable memoryview()\tReturns a memory view object min()\tReturns the smallest item in an iterable next()\tReturns the next item in an iterable object()\tReturns a new object oct()\tConverts a number into an octal open()\tOpens a file and returns a file object ord()\tConvert an integer representing the Unicode of the specified character pow()\tReturns the value of x to the power of y print()\tPrints to the standard output device property()\tGets, sets, deletes a property range()\tReturns a sequence of numbers, starting from 0 and increments by 1 (by default) repr()\tReturns a readable version of an object reversed()\tReturns a reversed iterator round()\tRounds a numbers set()\tReturns a new set object setattr()\tSets an attribute (property/method) of an object slice()\tReturns a slice object sorted()\tReturns a sorted list staticmethod()\tConverts a method into a static method str()\tReturns a string object sum()\tSums the items of an iterator super()\tReturns an object that represents the parent class tuple()\tReturns a tuple type()\tReturns the type of an object vars()\tReturns the dict property of an object zip()\tReturns an iterator, from two or more iterators  ","version":"Next","tagName":"h2"},{"title":"Keywords​","type":1,"pageTitle":"Quick-Reference","url":"/my-documentation/docs/Python/Python-Quickref#keywords","content":" Python has a set of keywords that are reserved words that cannot be used as variable names, function names, or any other identifiers:  Keyword\tDescriptionand\tA logical operator as\tTo create an alias assert\tFor debugging break\tTo break out of a loop class\tTo define a class continue\tTo continue to the next iteration of a loop def\tTo define a function del\tTo delete an object elif\tUsed in conditional statements, same as else if else\tUsed in conditional statements except\tUsed with exceptions, what to do when an exception occurs False\tBoolean value, result of comparison operations finally\tUsed with exceptions, a block of code that will be executed no matter if there is an exception or not for\tTo create a for loop from\tTo import specific parts of a module global\tTo declare a global variable if\tTo make a conditional statement import\tTo import a module in\tTo check if a value is present in a list, tuple, etc. is\tTo test if two variables are equal lambda\tTo create an anonymous function None\tRepresents a null value nonlocal\tTo declare a non-local variable not\tA logical operator or\tA logical operator pass\tA null statement, a statement that will do nothing raise\tTo raise an exception return\tTo exit a function and return a value True\tBoolean value, result of comparison operations try\tTo make a try...except statement while\tTo create a while loop with\tUsed to simplify exception handling yield\tTo return a list of values from a generator  ","version":"Next","tagName":"h2"},{"title":"Exceptions​","type":1,"pageTitle":"Quick-Reference","url":"/my-documentation/docs/Python/Python-Quickref#exceptions","content":" Exception\tDescriptionArithmeticError\tRaised when an error occurs in numeric calculations AssertionError\tRaised when an assert statement fails AttributeError\tRaised when attribute reference or assignment fails Exception\tBase class for all exceptions EOFError\tRaised when the input() method hits an &quot;end of file&quot; condition (EOF) FloatingPointError\tRaised when a floating point calculation fails GeneratorExit\tRaised when a generator is closed (with the close() method) ImportError\tRaised when an imported module does not exist IndentationError\tRaised when indentation is not correct IndexError\tRaised when an index of a sequence does not exist KeyError\tRaised when a key does not exist in a dictionary KeyboardInterrupt\tRaised when the user presses Ctrl+c, Ctrl+z or Delete LookupError\tRaised when errors raised cant be found MemoryError\tRaised when a program runs out of memory NameError\tRaised when a variable does not exist NotImplementedError\tRaised when an abstract method requires an inherited class to override the method OSError\tRaised when a system related operation causes an error OverflowError\tRaised when the result of a numeric calculation is too large ReferenceError\tRaised when a weak reference object does not exist RuntimeError\tRaised when an error occurs that do not belong to any specific exceptions StopIteration\tRaised when the next() method of an iterator has no further values SyntaxError\tRaised when a syntax error occurs TabError\tRaised when indentation consists of tabs or spaces SystemError\tRaised when a system error occurs SystemExit\tRaised when the sys.exit() function is called TypeError\tRaised when two different types are combined UnboundLocalError\tRaised when a local variable is referenced before assignment UnicodeError\tRaised when a unicode problem occurs UnicodeEncodeError\tRaised when a unicode encoding problem occurs UnicodeDecodeError\tRaised when a unicode decoding problem occurs UnicodeTranslateError\tRaised when a unicode translation problem occurs ValueError\tRaised when there is a wrong value in a specified data type ZeroDivisionError\tRaised when the second operator in a division is zero  ","version":"Next","tagName":"h2"},{"title":"Naming Conventions​","type":1,"pageTitle":"Quick-Reference","url":"/my-documentation/docs/Python/Python-Quickref#naming-conventions","content":" PEP 8 - Style Guide for Python Code  Was\tWie\tBeispielModule\tsnake_case\tmein_modul.py Pakete\tlowercase (ohne Underscores)\tmeinpaket Klassen\tPascalCase\tMeineKlasse Exception\tPascalCase (enden mit Error)\tDateiError Funktionen\tsnake_case\tmeine_funktion Methoden\tsnake_case\tmeine_methode Variablen\tsnake_case\tmein_wert Konstanten\tSCREAMING_SNAKE_CASE\tMAX_WERT Private (geschützte) Namen\tvorangestellter Unterstrich\t_interne_Variable Magic Methods\tzwei Unterstriche am Anfang und Ende\t__init__ Name Mangling*\tzwei Unterstriche am Anfang (class Attributes)\t__foobar  *zur Vermeidung von Namenskonflikten in Unterklassen  Code writing conventions  Indentions: 4 spacesLine length: 80 charactersComments: 72 characters maxAvoid inline comments.If inline comments are used keep them at the same vertical line.Documentation strings aka 'docstrings' should be written for every function, class, method or public module.Operators like &lt; or += should have one empty space in front and behind (eg. 1 &gt;= 2 and not 1&gt;=2).  ","version":"Next","tagName":"h2"},{"title":"Glossary​","type":1,"pageTitle":"Quick-Reference","url":"/my-documentation/docs/Python/Python-Quickref#glossary","content":" Feature\tDescription**kwargs\tTo deal with an unknown number of keyword arguments in a function, use the * symbol before the parameter name *args\tTo deal with an unknown number of arguments in a function, use the * symbol before the parameter name Access Arrays\tHow to access array items Access Dictionary Items\tHow to access items in a dictionary Access List Items\tHow to access items in a list Access Set Items\tHow to access items in a set Access Tuple Items\tHow to access items in a tuple Add Array Element\tHow to add elements from an array Add Class Methods\tHow to add a method to a class Add Class Properties\tHow to add a property to a class Add Dictionary Item\tHow to add an item to a dictionary Add List Items\tHow to add items to a list Add Set Items\tHow to add items to a set Arithmetic Operators\tArithmetic operator are used to perform common mathematical operations Array\tLists can be used as Arrays Array Length\tHow to get the length of an array Array Methods\tPython has a set of Array/Lists methods Assign Values to Multiple Variables\tHow to assign values to multiple variables Assigning a String to a Variable\tHow to assign a string value to a variable Assignment Operators\tAssignment operators are use to assign values to variables Bitwise Operators\tBitwise operators are used to compare (binary) numbers Boolean Values\tTrue or False Built-In Data Types\tPython has a set of built-in data types Built-in Modules\tHow to import built-in modules Call a Function\tHow to call a function in Python Change Dictionary Item\tHow to change the value of a dictionary item Change List Item\tHow to change the value of a list item Change Tuple Item\tHow to change the value of a tuple item Check if Dictionary Item Exists\tHow to check if a specified item is present in a dictionary Check if List Item Exists\tHow to check if a specified item is present in a list Check if Set Item Exists\tHow to check if a item exists Check if Tuple Item Exists\tHow to check if a specified item is present in a tuple Check In String\tHow to check if a string contains a specified phrase Class\tA class is like an object constructor Class pass Statement\tUse the pass statement in empty classes Comments\tComments are code lines that will not be executed Comparison Operators\tComparison operators are used to compare two values Complex\tThe complex number type Convert into JSON\tHow to convert a Python object in to JSON Copy a List\tHow to copy a list Copy Dictionary\tHow to copy a dictionary Create a Date Object\tHow to create a date object Create a Module\tHow to create a module Create an Iterator\tHow to create an iterator Create Child Class\tHow to create a child class Create Class\tHow to create a class Create Parent Class\tHow to create a parent class Create the init() Function\tHow to create the init() function Creating Variables\tVariables are containers for storing data values Date Format Codes\tThe datetime module has a set of legal format codes Date Output\tHow to output a date Datetime Module\tHow to work with dates in Python Default Parameter Value\tHow to use a default parameter value Delete Object\tHow to delete an object Delete Object Properties\tHow to modify properties of an object Dictionary\tA dictionary is an unordered, and changeable, collection Dictionary Length\tHow to determine the length of a dictionary Elif\telif is the same as &quot;else if&quot; in other programming languages Else\tHow to write an if...else statement Error Handling\tHow to handle errors in Python Escape Characters\tHow to use escape characters Evaluate Booleans\tEvaluate a value or statement and return either True or False Float\tThe floating number type For\tHow to write a for loop For Break\tHow to break a for loop For Continue\tHow to stop the current iteration and continue wit the next For Else\tHow to use an else statement in a for loop For pass\tUse the pass keyword inside empty for loops Format JSON\tHow to format JSON output with indentations and line breaks Format String\tHow to combine two strings Function\tHow to create a function in Python Function Arguments\tHow to use arguments in a function Function Recursion\tFunctions that can call itself is called recursive functions Function Return Value\tHow to return a value from a function Getting Data Type\tHow to get the data type of an object Global Keyword\tThe global keyword makes the variable global Global Scope\tWhen does a variable belong to the global scope? Global Variables\tGlobal variables are variables that belongs to the global scope Handle Many Exceptions\tHow to handle more than one exception Identity Operators\tIdentity operators are used to see if two objects are in fact the same object If AND\tUse the and keyword to combine if statements If Indentation\tIf statements in Python relies on indentation (whitespace at the beginning of a line) If NOT\tUse the not keyword to reverse the condition If OR\tUse the or keyword to combine if statements If Statement\tHow to write an if statement Import From Module\tHow to import only parts from a module Indentation\tIndentation refers to the spaces at the beginning of a code line Install PIP\tHow to install PIP Int\tThe integer number type Iterator vs Iterable\tWhat is the difference between an iterator and an iterable Iterators\tAn iterator is an object that contains a countable number of values Join Two Lists\tHow to join two lists Join Two Sets\tHow to join two sets Join Two Tuples\tHow to join two tuples JSON\tHow to work with JSON in Python Keyword Arguments\tHow to use keyword arguments in a function Lambda Function\tHow to create anonymous functions in Python List Comprehension\tHow use a list comprehensive List Length\tHow to determine the length of a list Lists\tA list is an ordered, and changeable, collection Logical Operators\tLogical operators are used to combine conditional statements Loop Dictionary Items\tHow to loop through the items in a tuple Loop List Items\tHow to loop through the items in a tuple Loop Set Items\tHow to loop through the items in a set Loop Through a String\tHow to loop through a string Loop Through an Iterator\tHow to loop through the elements of an iterator Loop Through List Items\tHow to loop through the items in a list Looping Array Elements\tHow to loop through array elements Looping Through a range\tHow to loop through a range of values Membership Operators\tMembership operators are used to test is a sequence is present in an object Metacharacters in RegEx\tMetacharacters are characters with a special meaning Modify Object Properties\tHow to modify properties of an object Multiline Comments\tHow to insert comments on multiple lines Multiline Strings\tHow to create a multiline string Negative Indexing on a String\tHow to use negative indexing when accessing a string Nested Dictionaries\tA dictionary within a dictionary Nested If\tHow to write an if statement inside an if statement Nested Loops\tHow to write a loop inside a loop Numbers\tThere are three numeric types in Python Object Methods\tMethods in objects are functions that belongs to the object Operators\tUse operator to perform operations in Python Output Variables\tUse the print statement to output variables Parse JSON\tHow to parse JSON code in Python Passing a List as an Argument\tHow to pass a list as an argument PIP Packages\tHow to download and install a package with PIP PIP Remove Package\tHow to remove a package with PIP raise\tHow to raise an exception in Python Random Number\tHow to create a random number RegEx Functions\tThe re module has a set of functions RegEx Match Object\tThe Match Object is an object containing information about the search and the result RegEx Module\tHow to import the regex module RegEx Sets\tA set is a set of characters inside a pair of square brackets with a special meaning RegEx Special Sequences\tA backslash followed by a a character has a special meaning Remove Array Element\tHow to remove elements from an array Remove Dictionary Items\tHow to remove dictionary items Remove List Items\tHow to remove list items Remove Set Items\tHow to remove set items Remove Tuple Items\tHow to remove tuple items Renaming a Module\tHow to rename a module Return Boolean Value\tFunctions that return a Boolean value self\tThe self parameter refers to the current instance of the class Set\tA set is an unordered, and unchangeable, collection Set Length\tHow to determine the length of a set Setting Data Type\tHow to set the data type of an object Shorthand If\tHow to write an if statement in one line Shorthand If Else\tHow to write an if...else statement in one line Slicing a String\tHow to slice a string Sort JSON\tHow to sort JSON Specify a Variable Type\tHow to specify a certain data type for a variable StopIteration\tHow to stop an iterator String Concatenation\tHow to combine strings String Length\tHow to get the length of a string String Literals\tHow to create string literals Strings are Arrays\tStrings in Python are arrays of bytes representing Unicode characters super Function\tThe super() function make the child class inherit the parent class The Class init() Function\tThe init() function is executed when the class is initiated The pass Keyword in If\tUse the pass keyword inside empty if statements The pass Statement in Functions\tUse the pass statement in empty functions The strftime Method\tHow to format a date object into a readable string Try Else\tHow to use the else keyword in a try statement Try Finally\tHow to use the finally keyword in a try statement Tuple\tA tuple is an ordered, and unchangeable, collection Tuple Length\tHow to determine the length of a tuple Tuple With One Item\tHow to create a tuple with only one item Type Conversion\tHow to convert from one number type to another Using the dir() Function\tList all variable names and function names in a module Variable Names\tHow to name your variables Variables in Modules\tHow to use variables in a module What is an Array\tArrays are variables that can hold more than one value While\tHow to write a while loop While Break\tHow to break a while loop While Continue\tHow to stop the current iteration and continue wit the next While Else\tHow to use an else statement in a while loop Why Use Lambda Functions\tLearn when to use a lambda function or not ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}