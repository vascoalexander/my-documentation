{"searchDocs":[{"title":"dummy","type":0,"sectionRef":"#","url":"/my-documentation/docs/devops/docker/dummy","content":"dummy","keywords":"","version":"Next"},{"title":"dummy","type":0,"sectionRef":"#","url":"/my-documentation/docs/devops/git/dummy","content":"dummy","keywords":"","version":"Next"},{"title":"dummy","type":0,"sectionRef":"#","url":"/my-documentation/docs/frameworks/dotnet/dummy","content":"dummy","keywords":"","version":"Next"},{"title":"dummy","type":0,"sectionRef":"#","url":"/my-documentation/docs/frameworks/nodejs/dummy","content":"dummy","keywords":"","version":"Next"},{"title":"dummy","type":0,"sectionRef":"#","url":"/my-documentation/docs/devops/scripting/dummy","content":"dummy","keywords":"","version":"Next"},{"title":"dummy","type":0,"sectionRef":"#","url":"/my-documentation/docs/frameworks/react/dummy","content":"dummy","keywords":"","version":"Next"},{"title":"dummy","type":0,"sectionRef":"#","url":"/my-documentation/docs/grundlagen/datenstrukturen/dummy","content":"dummy","keywords":"","version":"Next"},{"title":"dummy","type":0,"sectionRef":"#","url":"/my-documentation/docs/grundlagen/algorithmen/dummy","content":"dummy","keywords":"","version":"Next"},{"title":"dummy","type":0,"sectionRef":"#","url":"/my-documentation/docs/infrastruktur/netzwerke/dummy","content":"dummy","keywords":"","version":"Next"},{"title":"Aussagenlogik","type":0,"sectionRef":"#","url":"/my-documentation/docs/grundlagen/konzepte/aussagenlogik","content":"Aussagenlogik","keywords":"","version":"Next"},{"title":"dummy","type":0,"sectionRef":"#","url":"/my-documentation/docs/resourcen/cheatsheets/dummy","content":"dummy","keywords":"","version":"Next"},{"title":"dummy","type":0,"sectionRef":"#","url":"/my-documentation/docs/infrastruktur/linux/dummy","content":"dummy","keywords":"","version":"Next"},{"title":"dummy","type":0,"sectionRef":"#","url":"/my-documentation/docs/sprachen/csharp/dummy","content":"dummy","keywords":"","version":"Next"},{"title":"dummy","type":0,"sectionRef":"#","url":"/my-documentation/docs/grundlagen/projektplanung/dummy","content":"dummy","keywords":"","version":"Next"},{"title":"dummy","type":0,"sectionRef":"#","url":"/my-documentation/docs/infrastruktur/datenbanken/dummy","content":"dummy","keywords":"","version":"Next"},{"title":"Schaltalgebra","type":0,"sectionRef":"#","url":"/my-documentation/docs/grundlagen/konzepte/schaltalgebra","content":"Schaltalgebra","keywords":"","version":"Next"},{"title":"dummy","type":0,"sectionRef":"#","url":"/my-documentation/docs/sprachen/python/dummy","content":"dummy","keywords":"","version":"Next"},{"title":"dummy","type":0,"sectionRef":"#","url":"/my-documentation/docs/sprachen/javascript/dummy","content":"dummy","keywords":"","version":"Next"},{"title":"Paradigmen der Programmierung","type":0,"sectionRef":"#","url":"/my-documentation/docs/grundlagen/konzepte/paradigmen","content":"","keywords":"","version":"Next"},{"title":"Imperative Programmierung​","type":1,"pageTitle":"Paradigmen der Programmierung","url":"/my-documentation/docs/grundlagen/konzepte/paradigmen#imperative-programmierung","content":" &quot;Wie&quot; wird etwas gemacht?  Prinzip: Beschreibt Schritt für Schritt, wie eine Berechnung durchgeführt wird.Merkmal: Zustandsänderungen (Seiteneffekte) sind üblich.Denkweise: Programmieren wie ein Kochrezept – jeder Schritt verändert den Zustand.  Merkmale imperativer Programmierung:  Befehlsfolgen: Ein Programm besteht aus einer Sequenz von Befehlen (Anweisungen), die den Zustand des Programms schrittweise ändern.Veränderung von Variablen: Variablen werden direkt verändert, und diese Veränderungen steuern den Ablauf des Programms.Zustandsverwaltung: Der Zustand des Programms wird explizit verwaltet, oft durch Zuweisung von Werten zu Variablen.  Praktische Auswirkungen von Zustandsänderungen  Fehleranfälligkeit: Zustandsänderungen erhöhen das Risiko von Fehlern, da der Programmierer genau verfolgen muss, wann und wie der Zustand verändert wird. Ein Fehler bei der Zustandsänderung (z. B. durch unabsichtliches Überschreiben von Variablen oder unsachgemäße Modifikation von Objekten) kann dazu führen, dass der Code nicht wie erwartet funktioniert. Nebenläufigkeit (Concurrency): Ein häufiges Problem bei der imperativen Programmierung sind Nebenläufigkeitsfehler. Wenn mehrere Threads oder Prozesse gleichzeitig auf denselben Zustand zugreifen und ihn verändern, kann dies zu Race Conditions oder anderen unvorhersehbaren Fehlern führen.  Beispiel: Summer einer Liste int Sum(int[] zahlen) { int summe = 0; // Initialisierung des Zustands foreach (int zahl in zahlen) { summe += zahl; // Zustand (summe) wird verändert } return summe; // Endergebnis }   Typische Anwendungsgebiete: GUI-Programmierung, Spieleentwicklung.Typische Programmiersprachen: JavaScript, C#, Java (für GUI-Anwendungen).  ","version":"Next","tagName":"h3"},{"title":"Funktionale Programmierung​","type":1,"pageTitle":"Paradigmen der Programmierung","url":"/my-documentation/docs/grundlagen/konzepte/paradigmen#funktionale-programmierung","content":" &quot;Was&quot; soll berechnet werden?  Prinzip: Beschreibt was berechnet werden soll, ohne explizite Zustandsänderungen.Merkmal: Keine Seiteneffekte, keine veränderbaren Variablen.Denkweise: Programmieren wie in der Mathematik – eine Funktion hat immer denselben Rückgabewert für die gleichen Eingaben.  Die besonderen Eigenschaften der funktionalen Programmierung ermöglichen es, auf die, in der imperativen Programmierung benötigten, inneren Zustände eines Berechnungsprozesses ebenso zu verzichten, wie auf die zugehörigen Zustandsänderungen, die auch Seiteneffekte genannt werden.  Die funktionale Programmierung ist durch folgende Eigenschaften gekennzeichnet:  Computerprogramme werden als Funktionen verstanden, die für eine Eingabe eine Ausgabe liefern, die nur von dieser abhängig ist.Funktionen werden nicht als Abfolge von Anweisungen dargestellt, sondern als ineinander verschachtelte Funktionsaufrufe.Funktionen sind gegenüber allen anderen Datenobjekten gleichberechtigt. Das bedeutet, dass sie als Parameter in Funktionen eingehen dürfen und ebenso als Berechnungsergebnisse aus Funktionen hervorgehen können. Insbesondere können Funktionen wie andere Datenobjekte zur Laufzeit erstellt werden oder entfallen.  Summenberechnung C# lambda Schreibweise int Sum(int[] zahlen) =&gt; zahlen.Sum();   Warum eine Funktion innerhalb einer Funktion aufrufen die dasselbe Ergebnis liefert? Denn Sum(zahlen) gibt letztlich den gleichen Wert zurück wie zahlen.Sum().  Abstraktion: Versteckt die Details der Implementierung.Lesbarkeit: Macht den Code klarer und verständlicher.Wiederverwendbarkeit: Erleichtert die Nutzung der Funktion an verschiedenen Stellen.Flexibilität: Erlaubt dir, später zusätzliche Logik hinzuzufügen (wie Validierung oder Fehlerbehandlung).Einfacher zu ändern: Falls du später die Summenberechnung anpassen möchtest, kannst du das an einem Ort tun, ohne den gesamten Code ändern zu müssen.  Typische Programmiersprachen: Haskell, Lisp, Erlang, Scala. ","version":"Next","tagName":"h3"},{"title":"Styleguide","type":0,"sectionRef":"#","url":"/my-documentation/docs/resourcen/Styleguide","content":"","keywords":"","version":"Next"},{"title":"Headings​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/resourcen/Styleguide#headings","content":" H1  ","version":"Next","tagName":"h3"},{"title":"H2​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/resourcen/Styleguide#h2","content":" ","version":"Next","tagName":"h2"},{"title":"H3​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/resourcen/Styleguide#h3","content":" H4​  H5​  H6​  Heading IDs​  // ## Hello World -&gt; generated ID = hello-world [link](#heading-id)   ","version":"Next","tagName":"h3"},{"title":"Emphasis​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/resourcen/Styleguide#emphasis","content":" Bold Text Italic Text Strikethrough This is a codeline  ","version":"Next","tagName":"h3"},{"title":"Paragraph​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/resourcen/Styleguide#paragraph","content":" Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.  ","version":"Next","tagName":"h3"},{"title":"Lists​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/resourcen/Styleguide#lists","content":" number onenumber twonumber three indented 1indented 2 bullet 1bullet 2bullet 3bullet 4  bulletlist subbullet 1subbullet 2 Checklist 1 Checklist 2 Checklist 3  ","version":"Next","tagName":"h3"},{"title":"Codeblocks​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/resourcen/Styleguide#codeblocks","content":" Codeblock with line numbers and Title # This is a codeblock def add(*stuff): sum = 0 stuff = list(stuff) stuff[0] = 0 for i in stuff: sum += i return sum print(add(1,2,3,4,5,6))   ","version":"Next","tagName":"h3"},{"title":"Quote​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/resourcen/Styleguide#quote","content":" people, meetings, projects, sources code snippets, cheat sheets, project doku ideen,  ","version":"Next","tagName":"h3"},{"title":"Tables​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/resourcen/Styleguide#tables","content":" Shortcut Key (General)\tFunctions\tShortcut Key (Editing)\tFunctionsCtrl + S\tEditor: Saves the file\tCtrl + B\tBold Selected Text Ctrl + N\tCreates a new note\tCtrl + I\tItalicize Selected Text Ctrl + P\tOpen command pallete\tCtrl + K\tInsert External Link to Selected Text Ctrl + O\tOpens Quick Switcher\tCtrl + ]\tIndent Ctrl + Shift + F\tSearch in all files\tCtrl + [\tUnindent Ctrl + G\tOpens graph view\tCtrl + D\tDelete current line Ctrl + Alt + ←\tNavigate Back\tCtrl + V\tDuplicate current line Ctrl + Alt + →\tNavigate forth\tCtrl + Click\tOpen Note in Current Panel via Link Ctrl + F\tSearches current file\tCtrl + Shift + Click\tOpen Note in New Panel via Link Ctrl + E\tToggle edit/preview modes\tCtrl + N (Cmd + N on Mac)\tNew Note Ctrl + ,\tOpen Settings\tCtrl + Shift + D (Cmd + Shift + D on Mac)\tCreate a Daily Note Ctrl + Tab\tNext tab\tCtrl + / (Cmd + / on Mac)\tToggle Command Palette Ctrl + Shift + Tab\tPrevious tab\tCtrl + E (Cmd + E on Mac)\tOpen Graph View Alt + Tab\tNext App\tCtrl + Click (Cmd + Click on Mac)\tOpen Link in New Pane Alt + Shift + Tab\tPrevious App Win + Tab\tTask View Win + Shift + Tab\tNext Window   ","version":"Next","tagName":"h3"},{"title":"Callouts​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/resourcen/Styleguide#callouts","content":" Optional Title with some Markdown syntax! Some content with Markdown syntax. Check this api.  tip Some content with Markdown syntax. Check this api.  info Some content with Markdown syntax. Check this api.  warning Some content with Markdown syntax. Check this api.  danger Some content with Markdown syntax. Check this api.  ","version":"Next","tagName":"h3"},{"title":"Nested Callouts​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/resourcen/Styleguide#nested-callouts","content":" Parent Parent content Child Child content Deep Child Deep child content  ","version":"Next","tagName":"h3"},{"title":"Collabsible​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/resourcen/Styleguide#collabsible","content":" Toggle me! This is the detailed content console.log(&quot;Markdown features including the code block are available&quot;); You can use Markdown here including bold and italic text, and inline link Nested toggle! Some surprise inside... 😲😲😲😲😲  ","version":"Next","tagName":"h3"},{"title":"Tabs (mdx)​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/resourcen/Styleguide#tabs-mdx","content":" Tabs Documentation  AppleOrangeBanana This is an apple 🍎  Tabs in Callouts​  Tabs AppleOrangeBanana This is an apple 🍎  Tabs with Codeblocks​  PythonC# # This is a codeblock def add(*stuff): sum = 0 stuff = list(stuff) stuff[0] = 0 for i in stuff: sum += i return sum print(add(1,2,3,4,5,6))   ","version":"Next","tagName":"h3"},{"title":"Inline TOC (mdx)​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/resourcen/Styleguide#inline-toc-mdx","content":" HeadingsH2 H3EmphasisParagraphListsCodeblocksQuoteTablesCalloutsNested CalloutsCollabsibleTabs (mdx)Inline TOC (mdx)Mermaid Diagrams  ","version":"Next","tagName":"h3"},{"title":"Mermaid Diagrams​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/resourcen/Styleguide#mermaid-diagrams","content":" ","version":"Next","tagName":"h3"},{"title":"Grundbegriffe","type":0,"sectionRef":"#","url":"/my-documentation/docs/grundlagen/konzepte/grundbegriffe","content":"","keywords":"","version":"Next"},{"title":"Ausdruck​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/grundlagen/konzepte/grundbegriffe#ausdruck","content":" (eng Expression)  Ein Konstrukt das gemäß einer gegebenen Semantik in Bezug auf einen Kontext ausgewertet werden kann, also einen Wert liefert.  Literale (Konstanten): 𝛑 = 3.14, &quot;Hallo Welt&quot;Variablen: x, betragInEuro, wochtagsNummerFunktionen: random(), date()Operationen: 2+5, 2^8, 2(x - 10)Eine Kombination aus Variablen, Funktionen und Operationen die zu einem einzigen Wert ausgewertet wird.  ","version":"Next","tagName":"h3"},{"title":"Deklaration​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/grundlagen/konzepte/grundbegriffe#deklaration","content":" Die Einführung eines Bezeichners (zb einer Variablen, Funktion oder Klasse) im Code, ohne zwingend Speicher zu reservieren oder eine Initialisierung vorzunehmen.  Definition von Name und Typ einer Entität (Variable, Funktion, Klasse)Keine SpeicherreservierungErmöglicht spätere Verwendung (Initialisierung)Explizite Deklaration: Typ oder andere Metadaten werden direkt angegeben (int zahl)Implizite Deklaration: Automatische Ermittlung des Typs durch den Compiler/Interpreter (var zahl)  ","version":"Next","tagName":"h3"},{"title":"Initialisierung​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/grundlagen/konzepte/grundbegriffe#initialisierung","content":" Zuweisung eines Wertes zu einer Variablen. Explizit wenn der Variable direkt ein Wert zugewiesen wird (string name = &quot;Bob&quot;). Manche Sprachen (wie C#) weisen Variablen automatisch Standardwerte zu, wenn sie als Felder einer Klasse definiert sind (Implizite Initialisierung).  lokale Variablen müssen explizit initialisiert werdenlazy Initialization (verzögerte Initialisierung): Variable wird initialisiert, wenn sie das erste mal benutzt wird. Verbessert die Performance in manchen Szenarien.Best Practice: Variablen sollten immer mit sinnvollen Standardwerten initialisiert werden, um unerwartetes Verhalten zu vermeiden.  ","version":"Next","tagName":"h3"},{"title":"Bezeichner​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/grundlagen/konzepte/grundbegriffe#bezeichner","content":" (eng Identifier)  Eindeutige Benennung von Variablen, Datentypen, Funktionen oder Klassen. Bezeichner müssen innerhalb eines Namensraumes eindeutig sein, es sei denn die Programmiersprache erlaubt das Überladen (siehe auch Polymorphie).  Allgemeine Regeln für Bezeichner:  Können Buchstaben (a-z, A-Z), Ziffern (0-9) und Unterstriche (_) enthalten.Dürfen nicht mit einer Ziffer beginnen.Dürfen keine reservierten Schlüsselwörter (wie if, for, while) sein.  ","version":"Next","tagName":"h3"},{"title":"Literal​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/grundlagen/konzepte/grundbegriffe#literal","content":" (lat. littera 'Buchstabe') Ein Literal ist ein fester Wert, der direkt im Code geschrieben steht. Literals stellen Werte dar, die nicht verändert werden können.  logische (wahr oder falsch), numerische oder Zeichenliteralein der funktionalen Programmierung können auch Funktionen als Literale geschrieben werden: werden als anonyme Funktionen oder Lambda Funktionen bezeichnetBest Practice: Literale sind okay für einfache, selbsterklärende Werte  Exkurs: Magic Numbers Definition:Ein Magic Number ist eine ungekennzeichnete numerische Konstante, die direkt im Code verwendet wird, ohne Erklärung oder Kontext. Sie macht den Code schwer verständlich und schwer wartbar. Fehlende Bedeutung: double preis = menge * 19.99; Was bedeutet 19.99? Ist es ein Rabatt? Eine Steuer? Ein Fixpreis? Schwer zu ändern: if (punkte &gt;= 100) { ... } Wenn sich die Punktegrenze ändert, muss sie ggfs. an mehreren Stellen ersetzt werden. Ersetze Magic Numbers durch Konstanten mit erklärendem Namen: const double Umsatzsteuer = 19.99; double preis = menge * Umsatzsteuer; Bessere Lesbarkeit und Wartbarkeit: const int MindestpunkteFürBonus = 100; if (punkte &gt;= MindestpunkteFürBonus) { ... } Best Practice: const für fixe Wertegib Konstanten sprechende NamenVermeide Hardcoded-Zahlen in Vergleichen oder Berechnungen  ","version":"Next","tagName":"h3"},{"title":"Konstanten​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/grundlagen/konzepte/grundbegriffe#konstanten","content":" Eine Konstante (lat constans 'feststehend') ist ein Behälter für eine Wert, der nach der Zuweisung nicht verändert werden kann. Das Gegenstück dazu ist eine Variable.  Exkurs: const vs readonly Was ist readonly? Das Schlüsselwort readonly in C# kennzeichnet Felder, deren Wert nach der Initialisierung nicht mehr geändert werden kann. Im Gegensatz zu const kann ein readonly-Feld zur Laufzeit initialisiert werden, z. B. im Konstruktor. Unterschiede zwischen readonly und const Merkmal\tconst\treadonlyWertänderung\tMuss zur Kompilierzeit feststehen\tKann zur Laufzeit gesetzt werden Gültigkeitsbereich\tNur für primitive Typen &amp; Strings\tFür alle Datentypen nutzbar Wo erlaubt?\tNur in statischen Kontexten\tIn Instanz- und statischen Feldern Verwendung in Konstruktoren\t❌ Nein\t✅ Ja Beispiel\tconst double Pi = 3.14;\treadonly int maxUsers; tip ✅ Nutze readonly, wenn: Der Wert erst zur Laufzeit bekannt ist.Der Wert von einem Konstruktor abhängt.Du komplexe Objekte (z. B. Listen, Klassen) speichern möchtest. ✅ Nutze const, wenn: Der Wert zur Kompilierzeit bekannt ist.Es sich um einfache Zahlen, Strings oder boolesche Werte handelt. Beispiel in statischen Feldern class Config { public static readonly int MaxConnections = 100; static Config() { MaxConnections = 200; // Initialisierung ist in statischem Konstruktor erlaubt } } readonly in anderen Sprachen Sprache\tEntsprechung von readonlyC++\tconst für Felder Java\tfinal für Felder TypeScript\treadonly für Klassenvariablen Python\t@property mit nur einem Getter  ","version":"Next","tagName":"h3"},{"title":"Anweisung​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/grundlagen/konzepte/grundbegriffe#anweisung","content":" (eng Statement)  Statements sind komplette Einheiten von Code, die eine bestimmte Operation ausführen, wie z.B. eine Variable zuzuweisen oder eine Schleife auszuführen.  Zentrales Element Imperativer Programmiersprachen: Programmierparadigma nach dem ein Programm aus einer Folge von Anweisungen besteht, die vorgeben in welcher Reihenfolge was vom Computer getan werden soll.  Beispiele:  Zuweisung: x = 5Funktionsaufruf: print(&quot;Hallo&quot;)Schleifen: for i in range(10): [...]Bedingungen: if x &gt; 3: [...]  ","version":"Next","tagName":"h3"},{"title":"Prozedur​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/grundlagen/konzepte/grundbegriffe#prozedur","content":" Variante zum Begriff &quot;Unterprogramm&quot;. Anweisungen einer Prozedur können über aufgerufen und dadurch mehrfach verwendet werden. Im Gegensatz zu Funktionen liefern Prozeduren normalerweise keinen Rückgabewert. Je nach Programmiersprache und Programmierparadigma gibt es jedoch Unterschiede in der Definition des Begriffs Prozedur und der Abgrenzung zur Funktion.  ","version":"Next","tagName":"h3"},{"title":"Funktion​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/grundlagen/konzepte/grundbegriffe#funktion","content":" Ein Programmkonstrukt (&quot;Unterprogramm&quot;), mit dem Quellcode strukturiert werden kann, sodass Teile der Funktionalität wiederverwendbar sind. Im Gegensatz zu Prozeduren geben Funktionen einen Wert zurück, der direkt verwendet werden kann. Prozeduren, die keinen Rückgabewert haben, können nur indirekt Ergebnisse liefern, indem entweder Referenzparameter oder globale Variablen verändert werden.  ","version":"Next","tagName":"h3"},{"title":"Methode​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/grundlagen/konzepte/grundbegriffe#methode","content":" Eine Methode ist eine Funktion, die in einer Klasse oder einem Objekt definiert ist. Sie gehört zu einem bestimmten Objekt oder einer Klasse und kann daher auf dessen Eigenschaften (Attribute) und andere Methoden zugreifen.  ","version":"Next","tagName":"h3"},{"title":"Parameter​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/grundlagen/konzepte/grundbegriffe#parameter","content":" Platzhalter für Werte in der Funktionsdefinition. Sie sind Teil der Funktionsdeklaration. funktion(parameter, parameter){[...]}  ","version":"Next","tagName":"h3"},{"title":"Argument​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/grundlagen/konzepte/grundbegriffe#argument","content":" Ein Argument ist der tatsächliche Wert oder die Referenz, die an eine Funktion übergeben wird, wenn diese aufgerufen wird. Argumente werden im Funktionsaufruf übergeben und entsprechen den Parametern, die in der Funktionsdefinition deklariert sind. funktion(3435, 23){[...]}  ","version":"Next","tagName":"h3"},{"title":"Klasse​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/grundlagen/konzepte/grundbegriffe#klasse","content":" Eine Klasse ist ein Bauplan für Objekte. Sie definiert eine Datenstruktur und die Methoden (Funktionen), die darauf arbeiten.Wichtige Keywords für das Arbeiten mit Klassen  Feld​  Ein Feld ist eine direkte Variable in einer Klasse oder Struktur, die den Zustand eines Objekts speichert.  Wird meistens als privates Datenmitglied (private) definiert, um direkten Zugriff zu vermeiden.Kann direkt gelesen oder geändert werden (sofern public, was oft vermieden wird -&gt; Kapselung / Geheimnisprinziep).Beinhaltet keine Logik (wie Überprüfung oder Validierung).  Attribut​  Der Begriff Attribut ist allgemeiner als &quot;Feld&quot;.In der OOP bezeichnet ein Attribut einfach eine Eigenschaft eines Objekts, unabhängig von der konkreten Implementierung.In Sprachen wie Python oder JavaScript werden Attribute oft als alles betrachtet, was ein Objekt besitzt (Felder, Methoden, Properties).In C# oder Java wird der Begriff &quot;Attribut&quot; weniger für Felder/Properties verwendet, sondern für Metadaten (Annotationen oder Decorators), die zusätzliche Informationen für den Compiler oder Laufzeitumgebungen enthalten.  Property (Eigenschaft, Zugriffsmethode)​  Eine Property ist eine Methode, die wie ein Feld aussieht.  Ermöglicht kontrollierten Zugriff auf Felder mit Getter- und Setter-Methoden.Unterstützt Validierung, Berechnungen oder Schutzmechanismen.Verhindert direkten Zugriff auf interne Felder.  Best Practice in C#: Private Felder + Public Properties!  Beispiel in Python class Person: # Konstruktor (wird aufgerufen wenn ein neues Objekt erstellt wird) def __init__(self, name, age): self.name = name self.age = age # Methode def greet(self): print(f&quot;Hallo, mein Name ist {self.name} und ich bin {self.age} Jahre alt.&quot;)   ","version":"Next","tagName":"h3"},{"title":"Objekt​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/grundlagen/konzepte/grundbegriffe#objekt","content":" Ein Objekt ist eine Instanz einer Klasse. Es repräsentiert ein spezifisches Exemplar der Klasse und hat Attribute (Daten) und Methoden (Funktionen).  Ein Objekt der Klasse Person (s.o.) person1 = Person(&quot;Alice&quot;, 30) person1.greet()   ","version":"Next","tagName":"h3"},{"title":"Iterator​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/grundlagen/konzepte/grundbegriffe#iterator","content":" Ein Iterator ist ein Objekt, das eine Sequenz von Elementen einen nach dem anderen zurückgibt, ohne alle Elemente gleichzeitig im Speicher zu halten. Iteratoren ermöglichen es, große oder unendliche Datenstrukturen effizient zu durchlaufen.  Erstellung und Nutzung eines Iterators in Python my_list = [1, 2, 3] # Eine Liste (iterierbares Objekt) my_iter = iter(my_list) # Erzeugt einen Iterator für die Liste print(next(my_iter)) # Gibt 1 aus print(next(my_iter)) # Gibt 2 aus   Iteratoren mit C# C# nutzt das yield Schlüsselwort, um Iteratoren einfach zu erstellen, ohne dass man eine eigene Klasse schreiben muss. Implementierung von yield return um ein großes Array zu verarbeiten using System; using System.Collections.Generic; class Program { static void Main() { foreach (var name in GetNames()) { if (name.StartsWith(&quot;A&quot;)) { // Stoppt frühzeitig, wenn genug gefunden wurden Console.WriteLine(name); break; } } } static IEnumerable&lt;string&gt; GetNames() { string[] names = new string[10000]; for (int i = 0; i &lt; names.Length; i++) { names[i] = &quot;Name&quot; + i; // Dummy-Daten } foreach (var name in names) { yield return name; // Gibt Namen einzeln zurück } } }   ","version":"Next","tagName":"h3"},{"title":"Generator​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/grundlagen/konzepte/grundbegriffe#generator","content":" Ein Generator ist eine spezielle Funktion, die Iteratoren erstellt.  Er gibt Werte Schritt für Schritt zurück, ohne alle Werte auf einmal zu speichern.Wird oft für große Datenmengen oder unendliche Sequenzen verwendet.In C# nutzt man yield return, in Python yield.  Wann Generatoren nutzen? ✅ Große Datenmengen streamen – Falls du nicht alles auf einmal laden willst. ✅ Unendliche Sequenzen – Perfekt für Fibonacci, Zufallszahlen, etc. ✅ Effiziente Speicherverwendung – Erzeugt Werte nur bei Bedarf.  Einfacher Generator Beispielcode PythonC# # Gibt Werte Schritt für Schritt zurück # Die Methode merkt sich den Zustand def count_up_to(max): for i in range(1, max + 1): yield i # Gibt einen Wert zurück und pausiert for num in count_up_to(5): print(num)   ","version":"Next","tagName":"h3"},{"title":"Dekorator​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/grundlagen/konzepte/grundbegriffe#dekorator","content":" Ein Dekorator ist ein Entwurfsmuster (Strukturmuster), mit dem eine Funktion, Methode oder Klasse zur Laufzeit verändert oder erweitert werden kann, ohne ihren eigentlichen Code zu ändern. Das Muster stellt eine flexible Alternative zur Unterklassenbildung dar, um eine Klasse um zusätzliche Funktionalitäten zu erweitern.  ","version":"Next","tagName":"h3"},{"title":"Konstruktor​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/grundlagen/konzepte/grundbegriffe#konstruktor","content":" ","version":"Next","tagName":"h3"},{"title":"Keywords (C#)​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/grundlagen/konzepte/grundbegriffe#keywords-c","content":" Grundlegende Keywords für das Arbeiten mit Klassen in C#.  Schlüsselwort\tBeschreibungpublic\tÖffentlich sichtbar private\tNur innerhalb der Klasse sichtbar protected\tSichtbar für Unterklassen internal\tNur innerhalb des gleichen Projekts sichtbar static\tGehört zur Klasse, nicht zum Objekt void\tGibt keinen Wert zurück this\tVerweist auf das aktuelle Objekt new\tErstellt ein neues Objekt readonly\tFeld kann nur im Konstruktor gesetzt werden const\tKonstante, die sich nie ändert override\tÜberschreibt eine Methode der Basisklasse abstract\tAbstrakte Klasse oder Methode interface\tDefiniert eine Schnittstelle sealed\tVerhindert Vererbung using\tImportiert Namespaces oder verwaltet Ressourcen  Microsoft Keyword Referenz ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}