{"searchDocs":[{"title":"Grundlagen","type":0,"sectionRef":"#","url":"/my-documentation/docs/Frameworks/Frontend/react/Grundlagen","content":"Grundlagen","keywords":"","version":"Next"},{"title":"Aussagenlogik","type":0,"sectionRef":"#","url":"/my-documentation/docs/Grundlagen/Mathematik-Logik/Aussagenlogik","content":"Aussagenlogik","keywords":"","version":"Next"},{"title":"Schaltalgebra","type":0,"sectionRef":"#","url":"/my-documentation/docs/Grundlagen/Mathematik-Logik/Schaltalgebra","content":"Schaltalgebra","keywords":"","version":"Next"},{"title":"Binäre Suche","type":0,"sectionRef":"#","url":"/my-documentation/docs/Entwicklung/Datenstrukturen-Algorithmen/Suchen/BinarySearch","content":"Binäre Suche Funktioniert nur mit einem vorsortierten ArrayLaufzeitkomplexität: O(log n) Pseudocode Funktion BinarySearch(Array, ziel) links := 0 rechts := Länge(array) - 1 WHILE links &lt;= rechts mitte := (links + rechts) / 2 IF array[mitte] = ziel return mitte ELSE IF array[mitte] &lt; ziel links := mitte + 1 ELSE rechts := mitte - 1 PythonC# def binary_search(array, ziel): links = 0 rechts = len(array) - 1 while links &lt;= rechts: mitte = (links + rechts) // 2 if array[mitte] == ziel: return mitte elif array[mitte] &lt; ziel: links = mitte + 1 else: rechts = mitte - 1 return -1 # ziel kein element von array Links GfG: Binary Search Algorithm BroCode [YT]: Binary Search","keywords":"","version":"Next"},{"title":"Insertion-Sort","type":0,"sectionRef":"#","url":"/my-documentation/docs/Entwicklung/Datenstrukturen-Algorithmen/Sortieren/Insertion-Sort","content":"Insertion-Sort einfach, stabileffizient bei kleinen oder vorsortierten Datenmengenvgl. Spielkarten sortierenLaufzeitkomplexität: Best: O(n)Average: O(n²)Worst: O(n²) Pseudocode Funktion InsertionSort(array) FOR i := 1 bis Länge(array) temp := array[i] j := i - 1 WHILE j &gt;= 0 und array[j] &gt; temp array[j + 1] := array[j] j := j - 1 array[j+1] = temp RETURN array PythonC# def insertion_sort(array) for i in range(1,len(array)): temp = array[i] j = i - 1 while (j &gt;= 0 and array[j] &gt; temp): array[j + 1] = array[j] j -= 1 array[j+1] = temp return array Links GfG: Insertion Sort Algorithm BroCode [YT]: Insertion-Sort visualgo - sorting","keywords":"","version":"Next"},{"title":"Relationale Datenbanken","type":0,"sectionRef":"#","url":"/my-documentation/docs/Infrastruktur/Datenbanken/Grundlagen/Relationale_Datenbanken","content":"","keywords":"","version":"Next"},{"title":"Drei-Schema-Architektur​","type":1,"pageTitle":"Relationale Datenbanken","url":"/my-documentation/docs/Infrastruktur/Datenbanken/Grundlagen/Relationale_Datenbanken#drei-schema-architektur","content":" Logisches Schema beschreibt Daten in der Sprache eines konkreten DBMSleitet sich von einem konzeptionellem Schema abm:n Beziehungen müssen aufgelöst werden Internes / Physikalisches Schema beschreibt Daten aus technischer Sicht des Systemsabgeleitet aus logischem SchemaSpeichermethoden, Hilfskonstrukte zur Effizienzsteigerung Externes Schema beschreibt Daten aus der Sicht des AnwendersEinschränkung der Sichtbarkeit, Zugriffsrechtemehrere externe Schemata für eine Datenbank möglich ","version":"Next","tagName":"h3"},{"title":"Bubblesort","type":0,"sectionRef":"#","url":"/my-documentation/docs/Entwicklung/Datenstrukturen-Algorithmen/Sortieren/Bubblesort","content":"Bubblesort in-Place Verfahren: für die Sortierung wird kein weiterer Speicher benötigtdas Maximum steigt wie eine Luftblase nach obenstabiler Sortieralgorithmuswenig effizient, daher eher von akademischem InteresseLaufzeitkomplexität: Best: O(n)Average: O(n²)Worst: O(n²) Pseudocode Funktion BubbleSort(array) FOR i := 1 bis Länge[array] FOR j := 0 bis Länge[array] - 1 IF array[j] &gt; array[j + 1] vertausche array[j] &lt;-&gt; array[j + 1] RETURN array PythonC# def bubblesort(array): for i in range(1,len(array)): for j in range(0,len(array)-1): if array[j] &gt; array[j+1]: temp = array[j] array[j] = array[j+1] array[j+1] = temp return array Links GfG: Bubble Sort Algorithm BroCode [YT]: Bubblesort visualgo - sorting","keywords":"","version":"Next"},{"title":"Datenbankmodelle","type":0,"sectionRef":"#","url":"/my-documentation/docs/Infrastruktur/Datenbanken/Grundlagen/Datenbankmodelle","content":"","keywords":"","version":"Next"},{"title":"Was ist eine Datenbank?​","type":1,"pageTitle":"Datenbankmodelle","url":"/my-documentation/docs/Infrastruktur/Datenbanken/Grundlagen/Datenbankmodelle#was-ist-eine-datenbank","content":" Datenbasis (DB) = die eigentlichen Daten Datenbankmanagementsystem (DBMS) = Software zur Verwaltung der Daten  ","version":"Next","tagName":"h3"},{"title":"Klassische Datenbankmodelle​","type":1,"pageTitle":"Datenbankmodelle","url":"/my-documentation/docs/Infrastruktur/Datenbanken/Grundlagen/Datenbankmodelle#klassische-datenbankmodelle","content":" ","version":"Next","tagName":"h2"},{"title":"Hierarchisches Datenbankmodell:​","type":1,"pageTitle":"Datenbankmodelle","url":"/my-documentation/docs/Infrastruktur/Datenbanken/Grundlagen/Datenbankmodelle#hierarchisches-datenbankmodell","content":" Speicherung in hierarchischer BaumstrukturJeder Knoten hat maximal einen Vorgänger, aber beliebig viele Nachfolgerschnell aber unflexibelZugriff nur über die Wurzel    ","version":"Next","tagName":"h3"},{"title":"Netzwerkdatenbankmodell:​","type":1,"pageTitle":"Datenbankmodelle","url":"/my-documentation/docs/Infrastruktur/Datenbanken/Grundlagen/Datenbankmodelle#netzwerkdatenbankmodell","content":" Weiterentwicklung des hierarchischen ModellsAuch Querverbindungen und mehrere übergeordnete Knoten    ","version":"Next","tagName":"h3"},{"title":"Relationales Datenbankmodell​","type":1,"pageTitle":"Datenbankmodelle","url":"/my-documentation/docs/Infrastruktur/Datenbanken/Grundlagen/Datenbankmodelle#relationales-datenbankmodell","content":" einfache Handhabung, weite VerbreitungManipulation und Abfrage der Daten mittels SQLAufteilung der Daten auf Tabellen durch Normalisierung (Vermeidung von Redundanzen)  ","version":"Next","tagName":"h3"},{"title":"Objektorientiertes Datenbankmodell​","type":1,"pageTitle":"Datenbankmodelle","url":"/my-documentation/docs/Infrastruktur/Datenbanken/Grundlagen/Datenbankmodelle#objektorientiertes-datenbankmodell","content":" Speicherung in Form von ObjektenBeziehungen zwischen Objekten bleiben erhaltenkomplexer Aufbau und Wartung ","version":"Next","tagName":"h3"},{"title":"Paradigmen der Programmierung","type":0,"sectionRef":"#","url":"/my-documentation/docs/Entwicklung/Grundlagen/Paradigmen","content":"","keywords":"","version":"Next"},{"title":"Imperative Programmierung​","type":1,"pageTitle":"Paradigmen der Programmierung","url":"/my-documentation/docs/Entwicklung/Grundlagen/Paradigmen#imperative-programmierung","content":" &quot;Wie&quot; wird etwas gemacht?  Prinzip: Beschreibt Schritt für Schritt, wie eine Berechnung durchgeführt wird.Merkmal: Zustandsänderungen (Seiteneffekte) sind üblich.Denkweise: Programmieren wie ein Kochrezept – jeder Schritt verändert den Zustand.  Merkmale imperativer Programmierung:  Befehlsfolgen: Ein Programm besteht aus einer Sequenz von Befehlen (Anweisungen), die den Zustand des Programms schrittweise ändern.Veränderung von Variablen: Variablen werden direkt verändert, und diese Veränderungen steuern den Ablauf des Programms.Zustandsverwaltung: Der Zustand des Programms wird explizit verwaltet, oft durch Zuweisung von Werten zu Variablen.  Praktische Auswirkungen von Zustandsänderungen  Fehleranfälligkeit: Zustandsänderungen erhöhen das Risiko von Fehlern, da der Programmierer genau verfolgen muss, wann und wie der Zustand verändert wird. Ein Fehler bei der Zustandsänderung (z. B. durch unabsichtliches Überschreiben von Variablen oder unsachgemäße Modifikation von Objekten) kann dazu führen, dass der Code nicht wie erwartet funktioniert. Nebenläufigkeit (Concurrency): Ein häufiges Problem bei der imperativen Programmierung sind Nebenläufigkeitsfehler. Wenn mehrere Threads oder Prozesse gleichzeitig auf denselben Zustand zugreifen und ihn verändern, kann dies zu Race Conditions oder anderen unvorhersehbaren Fehlern führen.  Beispiel: Summer einer Liste int Sum(int[] zahlen) { int summe = 0; // Initialisierung des Zustands foreach (int zahl in zahlen) { summe += zahl; // Zustand (summe) wird verändert } return summe; // Endergebnis }   Typische Anwendungsgebiete: GUI-Programmierung, Spieleentwicklung.Typische Programmiersprachen: JavaScript, C#, Java (für GUI-Anwendungen).  ","version":"Next","tagName":"h3"},{"title":"Funktionale Programmierung​","type":1,"pageTitle":"Paradigmen der Programmierung","url":"/my-documentation/docs/Entwicklung/Grundlagen/Paradigmen#funktionale-programmierung","content":" &quot;Was&quot; soll berechnet werden?  Prinzip: Beschreibt was berechnet werden soll, ohne explizite Zustandsänderungen.Merkmal: Keine Seiteneffekte, keine veränderbaren Variablen.Denkweise: Programmieren wie in der Mathematik – eine Funktion hat immer denselben Rückgabewert für die gleichen Eingaben.  Die besonderen Eigenschaften der funktionalen Programmierung ermöglichen es, auf die, in der imperativen Programmierung benötigten, inneren Zustände eines Berechnungsprozesses ebenso zu verzichten, wie auf die zugehörigen Zustandsänderungen, die auch Seiteneffekte genannt werden.  Die funktionale Programmierung ist durch folgende Eigenschaften gekennzeichnet:  Computerprogramme werden als Funktionen verstanden, die für eine Eingabe eine Ausgabe liefern, die nur von dieser abhängig ist.Funktionen werden nicht als Abfolge von Anweisungen dargestellt, sondern als ineinander verschachtelte Funktionsaufrufe.Funktionen sind gegenüber allen anderen Datenobjekten gleichberechtigt. Das bedeutet, dass sie als Parameter in Funktionen eingehen dürfen und ebenso als Berechnungsergebnisse aus Funktionen hervorgehen können. Insbesondere können Funktionen wie andere Datenobjekte zur Laufzeit erstellt werden oder entfallen.  Summenberechnung C# lambda Schreibweise int Sum(int[] zahlen) =&gt; zahlen.Sum();   Warum eine Funktion innerhalb einer Funktion aufrufen die dasselbe Ergebnis liefert? Denn Sum(zahlen) gibt letztlich den gleichen Wert zurück wie zahlen.Sum().  Abstraktion: Versteckt die Details der Implementierung.Lesbarkeit: Macht den Code klarer und verständlicher.Wiederverwendbarkeit: Erleichtert die Nutzung der Funktion an verschiedenen Stellen.Flexibilität: Erlaubt dir, später zusätzliche Logik hinzuzufügen (wie Validierung oder Fehlerbehandlung).Einfacher zu ändern: Falls du später die Summenberechnung anpassen möchtest, kannst du das an einem Ort tun, ohne den gesamten Code ändern zu müssen.  Typische Programmiersprachen: Haskell, Lisp, Erlang, Scala. ","version":"Next","tagName":"h3"},{"title":"Mengenlehre","type":0,"sectionRef":"#","url":"/my-documentation/docs/Grundlagen/Mathematik-Logik/Mengenlehre","content":"","keywords":"","version":"Next"},{"title":"Mengen:​","type":1,"pageTitle":"Mengenlehre","url":"/my-documentation/docs/Grundlagen/Mathematik-Logik/Mengenlehre#mengen","content":" enthalten keine Duplikatewerden als ganzes betrachtet    ","version":"Next","tagName":"h3"},{"title":"Vereiningungsmenge​","type":1,"pageTitle":"Mengenlehre","url":"/my-documentation/docs/Grundlagen/Mathematik-Logik/Mengenlehre#vereiningungsmenge","content":" Die Vereinigung A∪B ist die Menge, die alle Elemente aus A und B enthält, ohne Duplikate.A ∪ B (Equivalent zum logischen oder: In A oder in B)A ∪ B = Summe der Elemente beider Mengen    Exkurs: SQL UNION Every SELECT statement within UNION must have the same number of columnsThe columns must also have similar data typesThe columns in every SELECT statement must also be in the same order The UNION operator selects only distinct values by default. To allow duplicate values, use UNION ALL SELECT column_name(s) FROM table1 UNION SELECT column_name(s) FROM table2;   ","version":"Next","tagName":"h3"},{"title":"Schnittmenge​","type":1,"pageTitle":"Mengenlehre","url":"/my-documentation/docs/Grundlagen/Mathematik-Logik/Mengenlehre#schnittmenge","content":" Die Schnittmenge A∩B ist die Menge, die alle Elemente enthält, die sowohl in A als auch in B vorkommen. A ∩ B (Equivalent zum logischen und: Sowohl in A als auch in B)A ∩ B = Elemente die in beiden Mengen vorkommen    Exkurs: SQL INTERSECT Returns only the common rows between two result sets.Ensures uniqueness by automatically removing duplicate rows.Requires that both SELECT statements have the same number of columns.The data types of corresponding columns in both queries must be compatible. SELECT CustomerID FROM Customers INTERSECT SELECT CustomerID FROM Orders;   ","version":"Next","tagName":"h3"},{"title":"Differenzmenge​","type":1,"pageTitle":"Mengenlehre","url":"/my-documentation/docs/Grundlagen/Mathematik-Logik/Mengenlehre#differenzmenge","content":" Die Differenzmenge A / B enthält alle Elemente, die in A sind, aber nicht in B.entspricht A ohne B oder A - BA / B = Elemente die nur in A vorkommen    Exkurs: SQL EXCEPT EXCEPT in SQL, MINUS in anderen SQL Dialekten (Oracle, IBM DB2)Ensures uniqueness by automatically removing duplicate rows (distinct).Requires that both SELECT statements have the same number of columns.The data types of corresponding columns in both queries must be compatible. -- alle Mitarbeiter aus employees_germany, die nicht in employees_france sind SELECT id, name FROM employees_germany EXCEPT SELECT id, name FROM employees_france;   ","version":"Next","tagName":"h3"},{"title":"Teilmenge​","type":1,"pageTitle":"Mengenlehre","url":"/my-documentation/docs/Grundlagen/Mathematik-Logik/Mengenlehre#teilmenge","content":" C ist Teilmenge von B (C ⊆ B), wenn jedes Element von C auch ein Element von B istC darf = B sein!    ","version":"Next","tagName":"h3"},{"title":"Echte Teilmenge​","type":1,"pageTitle":"Mengenlehre","url":"/my-documentation/docs/Grundlagen/Mathematik-Logik/Mengenlehre#echte-teilmenge","content":" A ist eine echte Teilmenge von B (A ⊂ B), wenn jedes Element von A auch ein Element von B ist, B aber nicht = A ist.A ⊂ B gilt, wenn alle Elemente von A auch in B sind und B mind. eine weiteres Element enthält.   ","version":"Next","tagName":"h3"},{"title":"Entity Relationship Model","type":0,"sectionRef":"#","url":"/my-documentation/docs/Infrastruktur/Datenbanken/Grundlagen/ERM","content":"","keywords":"","version":"Next"},{"title":"Entität​","type":1,"pageTitle":"Entity Relationship Model","url":"/my-documentation/docs/Infrastruktur/Datenbanken/Grundlagen/ERM#entität","content":" Eine Entität repräsentiert ein reales Objekt oder Konzept, das in der Datenbank modelliert werden soll.Beispiel: Ein Kunde, ein Produkt, ein Kurs.Entitätstyp: Eine Klasse oder Kategorie von Entitäten (z. B. „Kunde“ oder „Produkt“).Zwischen zwei Entitätstypen kann es auch mehr als eine Beziehung gebenRekursive Beziehungen sind ebenso möglich (Entitätstyp hat Beziehung mit sich selbst)Entitätsinstanz: Ein konkretes Objekt innerhalb eines Entitätstyps (z. B. „Kunde 123“).  ","version":"Next","tagName":"h3"},{"title":"Attribut​","type":1,"pageTitle":"Entity Relationship Model","url":"/my-documentation/docs/Infrastruktur/Datenbanken/Grundlagen/ERM#attribut","content":" Ein Attribut beschreibt eine Eigenschaft oder ein Merkmal einer Entität.Beispiel: Ein „Kunde“ hat die Attribute „Name“, „Adresse“, „Telefonnummer“.Schlüsselattribut: Eindeutiges Attribut, das jede Entität unterscheidet (zb Kundennummer)Attribute können auch an den Beziehungstypen hängen (häufig bei N:M Beziehungen)  ","version":"Next","tagName":"h3"},{"title":"Relation​","type":1,"pageTitle":"Entity Relationship Model","url":"/my-documentation/docs/Infrastruktur/Datenbanken/Grundlagen/ERM#relation","content":" Eine Beziehung verbindet zwei oder mehr Entitäten miteinander&quot;Hat&quot; funktioniert für die meisten Beziehungen als Beziehungstyp  ","version":"Next","tagName":"h3"},{"title":"Kardinalität​","type":1,"pageTitle":"Entity Relationship Model","url":"/my-documentation/docs/Infrastruktur/Datenbanken/Grundlagen/ERM#kardinalität","content":" Kardinalitäten beschreiben, wie viele Entitäten eines Entitätstypen mit wie vielen Entitäten eines anderen Entitätstypen in einer Beziehung miteinander verbunden sein können.  1:1 (Eins zu Eins)1:N (Eins zu Viele)M:N (Viele zu Viele)  Modifizierte Chen Notation:  1: genau 1c: 0 oder 1m: mindestens 1mc: beliebig viele  ","version":"Next","tagName":"h3"},{"title":"Martin-/Crow's-Foot-Notation​","type":1,"pageTitle":"Entity Relationship Model","url":"/my-documentation/docs/Infrastruktur/Datenbanken/Grundlagen/ERM#martin-crows-foot-notation","content":"   ","version":"Next","tagName":"h3"},{"title":"ER-Diagramme​","type":1,"pageTitle":"Entity Relationship Model","url":"/my-documentation/docs/Infrastruktur/Datenbanken/Grundlagen/ERM#er-diagramme","content":" Rechtecke: EntitätenEllipsen: AttributeRauten: BeziehungenLinien: Verknüpfen Entitäten und Beziehungen    ","version":"Next","tagName":"h3"},{"title":"Links​","type":1,"pageTitle":"Entity Relationship Model","url":"/my-documentation/docs/Infrastruktur/Datenbanken/Grundlagen/ERM#links","content":" Wikipedia - Entity-relationsship model ","version":"Next","tagName":"h3"},{"title":"GIT Commands","type":0,"sectionRef":"#","url":"/my-documentation/docs/Resourcen/Quick-References/GIT-quickref","content":"GIT Commands GitHub Documentation GitHub Skills Git Visualization Generate gitignore file online Command\tShort Descriptiongit init\tInitialize repository git clone [repo_url]\tClone repository git status\tView repository status git add [file]\tStage changes of [file] git add .\tStage all changes git reset [file]\tUnstage a file while retaining other changes git rm [file]\tDelete file and stage the removal git commit -m &quot;message&quot;\tCommit Changes git branch\tList branches git branch [branch]\tCreate branch git checkout [branch]\tSwitch to branch git checkout -b [new branchname]\tCreate a branch and switch to it git merge [branch]\tMerge branch git remote -v\tView remotes git remote set-url origin [NEW_GIT_URL_HERE]\tSet origin url for remote repo git pull origin [branch]\tPull changes git push origin [branch]\tPush changes git log\tView commit history git log --oneline\tView short commit history git log --oneline --decorate --graph --all\tView commit history with graphical layout (q to quit) git revert [commit]\tRevert commit git reset [commit]\tReset to commit git reset --hard [commit]\tClear staging area, rewrite working tree from [commit] git diff\tDiff of what is changed but not staged git diff --staged\tdiff of what is staged but not committed git tag\tList tags git config --global user.name &quot;name&quot;\tSet global username git config --global user.email &quot;email&quot;\tSet global email github repository URL's SSH: git@github.com:username/my-repository.git HTTPS: https://github.com/username/my-repository.git ","keywords":"","version":"Next"},{"title":"Tools","type":0,"sectionRef":"#","url":"/my-documentation/docs/Resourcen/Link-Collections/Tools","content":"","keywords":"","version":"Next"},{"title":"Mermaid.js​","type":1,"pageTitle":"Tools","url":"/my-documentation/docs/Resourcen/Link-Collections/Tools#mermaidjs","content":" Mermaid Documentation Mermaid Live Editor  ","version":"Next","tagName":"h2"},{"title":"Docusaurus​","type":1,"pageTitle":"Tools","url":"/my-documentation/docs/Resourcen/Link-Collections/Tools#docusaurus","content":" Static Site Generator Docs Frontmatter ","version":"Next","tagName":"h2"},{"title":"Shortcuts","type":0,"sectionRef":"#","url":"/my-documentation/docs/Resourcen/Quick-References/Shortcuts","content":"","keywords":"","version":"Next"},{"title":"General​","type":1,"pageTitle":"Shortcuts","url":"/my-documentation/docs/Resourcen/Quick-References/Shortcuts#general","content":" Action\tShortcut\tAction\tShortcutA very long shortcut description\tCtrl+Alt+Shift+F\tAnother very long shortcut description\tCtrl+Alt+Shift+F   ","version":"Next","tagName":"h3"},{"title":"DevNotes","type":0,"sectionRef":"#","url":"/my-documentation/docs/Resourcen/Site/DevNotes","content":"DevNotes IT-Grundlagen IT-MatheLogikProjektplanungBWLHardwareIT-SecurityDatenschutz Programmierung GrundlagenAlgorithmenDatenstrukturenWeb-DevelopmentPythonC# Infrastruktur DatenbankenNetzwerkeDevOpsCloudVirtualisierungLinux Frameworks &amp; Libraries FrameworksLibraries Tools &amp; Resources ToolsIDECheatSheetsQuick-RefDokumentationenLinksammlung","keywords":"","version":"Next"},{"title":"Visual Studio Code​","type":1,"pageTitle":"Shortcuts","url":"/my-documentation/docs/Resourcen/Quick-References/Shortcuts#visual-studio-code","content":" Action\tShortcut\tAction\tShortcut   ","version":"Next","tagName":"h3"},{"title":"JetBrains IDEs​","type":1,"pageTitle":"Shortcuts","url":"/my-documentation/docs/Resourcen/Quick-References/Shortcuts#jetbrains-ides","content":" Action\tShortcut\tAction\tShortcut   ","version":"Next","tagName":"h3"},{"title":"Linux​","type":1,"pageTitle":"Shortcuts","url":"/my-documentation/docs/Resourcen/Quick-References/Shortcuts#linux","content":" Action\tShortcut\tAction\tShortcut   ","version":"Next","tagName":"h3"},{"title":"VIM​","type":1,"pageTitle":"Shortcuts","url":"/my-documentation/docs/Resourcen/Quick-References/Shortcuts#vim","content":" Action\tShortcut\tAction\tShortcut   ","version":"Next","tagName":"h3"},{"title":"Windows​","type":1,"pageTitle":"Shortcuts","url":"/my-documentation/docs/Resourcen/Quick-References/Shortcuts#windows","content":" Action\tShortcut\tAction\tShortcut  ","version":"Next","tagName":"h3"},{"title":"dummy","type":0,"sectionRef":"#","url":"/my-documentation/docs/Web/Grundlagen/dummy","content":"dummy","keywords":"","version":"Next"},{"title":"Keywords","type":0,"sectionRef":"#","url":"/my-documentation/docs/Sprachen/Csharp/Keywords","content":"Keywords Grundlegende Keywords für das Arbeiten mit Klassen in C#. Schlüsselwort\tBeschreibungpublic\tÖffentlich sichtbar private\tNur innerhalb der Klasse sichtbar protected\tSichtbar für Unterklassen internal\tNur innerhalb des gleichen Projekts sichtbar static\tGehört zur Klasse, nicht zum Objekt void\tGibt keinen Wert zurück this\tVerweist auf das aktuelle Objekt new\tErstellt ein neues Objekt readonly\tFeld kann nur im Konstruktor gesetzt werden const\tKonstante, die sich nie ändert override\tÜberschreibt eine Methode der Basisklasse abstract\tAbstrakte Klasse oder Methode interface\tDefiniert eine Schnittstelle sealed\tVerhindert Vererbung using\tImportiert Namespaces oder verwaltet Ressourcen Microsoft Keyword Referenz","keywords":"","version":"Next"},{"title":"dummy","type":0,"sectionRef":"#","url":"/my-documentation/docs/Sprachen/HTML/dummy","content":"dummy","keywords":"","version":"Next"},{"title":"Naming Conventions","type":0,"sectionRef":"#","url":"/my-documentation/docs/Resourcen/Quick-References/Naming-Conventions","content":"","keywords":"","version":"Next"},{"title":"Schreibweisen​","type":1,"pageTitle":"Naming Conventions","url":"/my-documentation/docs/Resourcen/Quick-References/Naming-Conventions#schreibweisen","content":" Bezeichnung\tBeispiel\tAlternative BezeichnungcamelCase\tfirstName, myVariableName\tlowerCamelCase, mixedCase snake_case\tfirst_name, my_variable_name\tlower_case_with_underscores PascalCase\tFirstName, MyVariableName\tUpperCamelCase, CapWords kebab-case\tfirst-name, my-variable-name CONSTANT_CASE\tMAX_VALUE, API_KEY\tSCREAMING_SNAKE_CASE train-case\tFirst-Name, My-Variable-Name\t  ","version":"Next","tagName":"h3"},{"title":"Python​","type":1,"pageTitle":"Naming Conventions","url":"/my-documentation/docs/Resourcen/Quick-References/Naming-Conventions#python","content":" PEP 8 - Style Guide for Python Code  Was\tWie\tBeispielModule\tsnake_case\tmein_modul.py Pakete\tlowercase (ohne Underscores)\tmeinpaket Klassen\tPascalCase\tMeineKlasse Exception\tPascalCase (enden mit Error)\tDateiError Funktionen\tsnake_case\tmeine_funktion Methoden\tsnake_case\tmeine_methode Variablen\tsnake_case\tmein_wert Konstanten\tSCREAMING_SNAKE_CASE\tMAX_WERT Private (geschützte) Namen\tvorangestellter Unterstrich\t_interne_Variable Magic Methods\tzwei Unterstriche am Anfang und Ende\t__init__ Name Mangling*\tzwei Unterstriche am Anfang (class Attributes)\t__foobar  *zur Vermeidung von Namenskonflikten in Unterklassen  ","version":"Next","tagName":"h3"},{"title":"C#​","type":1,"pageTitle":"Naming Conventions","url":"/my-documentation/docs/Resourcen/Quick-References/Naming-Conventions#c","content":" Microsoft-Learn - C# Identifier Names  Was\tWie\tBeispielKlasse\tPascalCase\tMeineKlasse Struktur\tPascalCase\tMeineStruktur Schnittstelle (Interface)\tPascalCase mit &quot;I&quot;-Präfix\tIMeineSchnittstelle Methode\tPascalCase\tBerechneWert Eigenschaft (Property)\tPascalCase\tMeinWert Ereignis (Event)\tPascalCase\tWertGeaendert Feld (privat)\t_camelCase\t_meinFeld Parameter\tcamelCase\tparameterName Lokale Variable\tcamelCase\tlokaleVariable Konstante\tPascalCase\tMaxWert Enumeration\tPascalCase\tWochentag Enum-Mitglied\tPascalCase\tMontag Namespace\tPascalCase\tMeinProjekt Delegat\tPascalCase\tMeinDelegate ","version":"Next","tagName":"h3"},{"title":"Windows","type":0,"sectionRef":"#","url":"/my-documentation/docs/Resourcen/Verschiedenes/Windows","content":"","keywords":"","version":"Next"},{"title":"Executing Scripts​","type":1,"pageTitle":"Windows","url":"/my-documentation/docs/Resourcen/Verschiedenes/Windows#executing-scripts","content":" Show actual Policies Get-ExecutionPolicy -list  Set Policy for -Scope to RemoteSigned  Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine   -ExecutionPolicy​  Specifies the execution policy. If there are no Group Policies and each scope's execution policy is set to Undefined, then Restricted becomes the effective policy for all users.  The acceptable execution policy values are as follows:  AllSigned. Requires that all scripts and configuration files are signed by a trusted publisher, including scripts written on the local computer.Bypass. Nothing is blocked and there are no warnings or prompts.Default. Sets the default execution policy. Restricted for Windows clients or RemoteSigned for Windows servers.RemoteSigned. Requires that all scripts and configuration files downloaded from the Internet are signed by a trusted publisher. The default execution policy for Windows server computers.Restricted. Doesn't load configuration files or run scripts. The default execution policy for Windows client computers.Undefined. No execution policy is set for the scope. Removes an assigned execution policy from a scope that is not set by a Group Policy. If the execution policy in all scopes is Undefined, the effective execution policy is Restricted.Unrestricted. Beginning in PowerShell 6.0, this is the default execution policy for non-Windows computers and can't be changed. Loads all configuration files and runs all scripts. If you run an unsigned script that was downloaded from the internet, you're prompted for permission before it runs.  -Scope​  Specifies the scope that is affected by an execution policy. The default scope is LocalMachine.  The effective execution policy is determined by the order of precedence as follows:  MachinePolicy - Set by a Group Policy for all users of the computerUserPolicy - Set by a Group Policy for the current user of the computerProcess - Affects only the current PowerShell sessionLocalMachine - Default scope that affects all users of the computerCurrentUser - Affects only the current user  ","version":"Next","tagName":"h2"},{"title":"Set Alias​","type":1,"pageTitle":"Windows","url":"/my-documentation/docs/Resourcen/Verschiedenes/Windows#set-alias","content":" Creates a Windows Powershell Profile for the local User in %USERPROFILE%\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1   New-Item -path $profile -type file -force   Set an alias to execute a specific file:  # in der zuvor erstellten Datei set-alias my_alias c:\\path\\to\\my\\powershell\\script.ps1   ","version":"Next","tagName":"h3"},{"title":"Prüfsummen​","type":1,"pageTitle":"Windows","url":"/my-documentation/docs/Resourcen/Verschiedenes/Windows#prüfsummen","content":" ","version":"Next","tagName":"h2"},{"title":"get-filehash​","type":1,"pageTitle":"Windows","url":"/my-documentation/docs/Resourcen/Verschiedenes/Windows#get-filehash","content":" Beispiel (Formaierte Ausgabe) PS C:\\WINDOWS\\system32&gt; get-filehash C:\\Users\\path\\to\\file.iso -Algorithm SHA384 | Format-List Algorithm : SHA384 Hash : 555073E147487CDC5428EED6FF18CEB3973F7322C461FF9AF0629A37ECF7CDF98912F931641C2C46C10F7F9E3E29B50A Path : C:\\Users\\lem0th\\Desktop\\Windows.iso   using the -path parameter PS C:\\WINDOWS\\system32&gt; get-filehash -path C:\\Users\\lem0th\\Desktop\\Tuts.7z -Algorithm SHA256 Algorithm Hash Path --------- ---- ---- SHA256 38F3B3F4800A6E59C5DFCBC222ADB6ED6987087E9A90E25D39E1C0CCD3EAEA97   -PathGibt den Pfad zu einer oder mehreren Dateien als Array an. Platzhalterzeichen sind zulässig.  ","version":"Next","tagName":"h3"},{"title":"compare hashes​","type":1,"pageTitle":"Windows","url":"/my-documentation/docs/Resourcen/Verschiedenes/Windows#compare-hashes","content":" Get-FileHash -Path C:\\DateiName -Algorithm SHA256| Compare-Object -ReferenceObject &quot;2F9296722Cd04054566D98F97649B09E&quot; -DifferenceObject {$_.Hash}   -ReferenceObjectDie Referenz Prüfsumme mit der das zu prüfende Objekt verglichen wird ","version":"Next","tagName":"h3"},{"title":"Grundlagen","type":0,"sectionRef":"#","url":"/my-documentation/docs/Infrastruktur/Devops/Git/Grundlagen","content":"","keywords":"","version":"Next"},{"title":"THE STAGING AREA​","type":1,"pageTitle":"Grundlagen","url":"/my-documentation/docs/Infrastruktur/Devops/Git/Grundlagen#the-staging-area","content":" Working Directory: The working directory is where you make edits and create new files. It represents the current state of your project.Staging Area: Once you've made changes in your working directory that you wish to save, you first add these changes to the staging area. This area captures a snapshot of the modifications and prepares them for committing.Repository: When you're ready to finalize your changes, you commit the modifications from the staging area. This action saves a permanent snapshot of the changes in your Git repository, along with metadata such as who made the changes and when.      git add &lt;file&gt; # adds changes in a file to the staging area git add . # adds all changes to the staging area git diff # shows unstaged changes in the working directory git dif --staged # shows changes that are staged for the next commit git commit # commits the staged changes git reset &lt;file&gt; # removes file from the staging area   UNSTAGE (Reverse) A FILE / ALL FILES​  git restore --staged &lt;file-path&gt; # unstage specified file git restore --staged . # unstage all files   DISCARD LOCAL UNCOMMITTED CHANGES​  git restore . # discard all uncommitted changes git restore path/to/file # discard changes to specified file git checkout -- . # revert working directory to last commit   ","version":"Next","tagName":"h3"},{"title":"GIT PULL vs GIT FETCH​","type":1,"pageTitle":"Grundlagen","url":"/my-documentation/docs/Infrastruktur/Devops/Git/Grundlagen#git-pull-vs-git-fetch","content":" git fetch is used to download updates from a remote repository to your local repository without merging or modifying your local branches. This command allows you to review the changes before integrating them into your local branch.  git fetch &lt;remote&gt;   git pull is a combination of git fetch and git merge. It downloads changes and merges them into the current branch.  git pull &lt;remote&gt; &lt;branch&gt;   ","version":"Next","tagName":"h3"},{"title":"GIT RESET --soft​","type":1,"pageTitle":"Grundlagen","url":"/my-documentation/docs/Infrastruktur/Devops/Git/Grundlagen#git-reset---soft","content":" When you use git reset --soft, Git moves the HEAD pointer to the specified commit while leaving the staging area and working directory unchanged. This means that all changes from commits after the specified one will remain in the staging area, ready to be recommitted.  git reset --soft HEAD~1   This command moves the HEAD pointer one commit back. Changes made in the latest commit are transferred to the staging area:    ","version":"Next","tagName":"h3"},{"title":"GIT RESET --hard​","type":1,"pageTitle":"Grundlagen","url":"/my-documentation/docs/Infrastruktur/Devops/Git/Grundlagen#git-reset---hard","content":" The git reset --hard option can be thought of as a nuclear option. It moves the HEAD pointer to the specified commit, updates the staging area to match this commit, and also adjusts the working directory to exactly match the commit. Any changes from commits made after the specified commit will be completely discarded.  ","version":"Next","tagName":"h3"},{"title":"GIT REBASE​","type":1,"pageTitle":"Grundlagen","url":"/my-documentation/docs/Infrastruktur/Devops/Git/Grundlagen#git-rebase","content":" Rebasing effectively saves the changes in your current branch, temporarily “removes” the commits you’ve made on your branch, applies the new commits from the other branch, and then reapplies your changes one commit at a time on top of these.  It’s important to note that rebasing rewrites commit history by generating new commits for each original commit. This process can result in a cleaner and more understandable project history.    Above Situation:  git checkout feature git rebase main   After the rebase the Feature branch includes the commits from main and keeps the commits that have been commited earlier to the feature branch. The main branch is untouched, but the commitment history has changed.  If a conflict arises, Git will show you which files are conflicting. You’ll have to open these files, resolve the conflicts, and then continue the rebase like so:  # After resolving conflicts git add . git rebase --continue   If you want to abort the rebase for any reason, you can do so with the following command:  git rebase --abort   ","version":"Next","tagName":"h3"},{"title":"GIT MERGE​","type":1,"pageTitle":"Grundlagen","url":"/my-documentation/docs/Infrastruktur/Devops/Git/Grundlagen#git-merge","content":" Once your feature is ready and tested, you’ll want to merge it back into the main project. First, switch back to the branch you want to merge your changes into. Assuming you want to merge your changes to main branch:  git checkout master   Then, merge your feature branch:  git merge &lt;feature-branch&gt;   After merging your changes locally, push them to the remote repository to make them available to your teammate and update the live version of the website:  git push origin master   ","version":"Next","tagName":"h3"},{"title":"ADDING EMPTY DIRECTORIES TO REPOSITORY​","type":1,"pageTitle":"Grundlagen","url":"/my-documentation/docs/Infrastruktur/Devops/Git/Grundlagen#adding-empty-directories-to-repository","content":" Create a placeholder file named .gitkeep in the empty directory. The .gitkeep file has no special meaning to Git, but it’s a widely-accepted convention that signals the intention to keep the directory in the repository.  echo &quot;&quot; .gitkeep # create .gitkeep file git add .gitkeep # stage the file git commit -m &quot;add empty directory with .gitkeep&quot; # commit the changes   ","version":"Next","tagName":"h3"},{"title":"REMOVE DIRECTORY FROM REPOSITORY​","type":1,"pageTitle":"Grundlagen","url":"/my-documentation/docs/Infrastruktur/Devops/Git/Grundlagen#remove-directory-from-repository","content":" git rm -r &lt;directory&gt; # removes a dir from git repository recursively   ","version":"Next","tagName":"h3"},{"title":"CHANGE REMOTE REPOSITORY URL​","type":1,"pageTitle":"Grundlagen","url":"/my-documentation/docs/Infrastruktur/Devops/Git/Grundlagen#change-remote-repository-url","content":" git remote -v # verify current remote repository git remote set-url origin &lt;new-url&gt; # set new url of origin git remote -v # verify new remote repository url git fetch origin # sync local repository to new remote  ","version":"Next","tagName":"h3"},{"title":"Prinzipien","type":0,"sectionRef":"#","url":"/my-documentation/docs/Entwicklung/Grundlagen/Prinzipien","content":"","keywords":"","version":"Next"},{"title":"DRY​","type":1,"pageTitle":"Prinzipien","url":"/my-documentation/docs/Entwicklung/Grundlagen/Prinzipien#dry","content":" Das DRY-Prinzip (Don't Repeat Yourself) ist ein fundamentales Konzept der Softwareentwicklung, das besagt, dass Redundanz vermieden werden sollte. Jede Information oder Logik sollte nur einmal existieren, um Wartung, Erweiterbarkeit und Lesbarkeit zu verbessern.  Warum ist DRY wichtig?  Vermeidung von Inkonsistenzen – Mehrere Kopien derselben Logik führen zu Fehlern, wenn nur eine Stelle aktualisiert wird.Erhöhte Wartbarkeit – Änderungen müssen nur an einer Stelle vorgenommen werden.Kürzerer und verständlicher Code – Weniger Wiederholungen bedeuten besseren Überblick.  ","version":"Next","tagName":"h3"},{"title":"KISS​","type":1,"pageTitle":"Prinzipien","url":"/my-documentation/docs/Entwicklung/Grundlagen/Prinzipien#kiss","content":" Das KISS-Prinzip (Keep It Simple, Stupid) ist ein Designgrundsatz, der besagt, dass Systeme, Code oder Prozesse so einfach wie möglich gehalten werden sollten. Es stammt aus der Softwareentwicklung, wird aber auch in anderen Bereichen wie Ingenieurwesen, Design und Projektmanagement angewendet.  Kernidee​  Komplexität erhöht die Fehleranfälligkeit, Wartungskosten und die Einarbeitungszeit. Eine einfache Lösung ist oft effektiver und langlebiger als eine übermäßig komplizierte.  Anwendung in der Softwareentwicklung​  Lesbarkeit: Einfacher Code ist leichter zu verstehen und zu debuggen. Wartbarkeit: Weniger Abhängigkeiten und verschachtelte Strukturen erleichtern Änderungen. Effizienz: Komplexität kann unnötige Ressourcen beanspruchen. Fehlerminimierung: Je einfacher der Code, desto weniger Fehlerquellen gibt es.  Beispiel​  Schlecht (zu kompliziert) string ReverseString(string input) { char[] array = input.ToCharArray(); Array.Reverse(array); return new string(array); }   Einfacher (KISS) string ReverseString(string input) =&gt; new string(input.Reverse().ToArray());   Das zweite Beispiel ist prägnanter, verständlicher und nutzt eingebaute Funktionen.  ","version":"Next","tagName":"h2"},{"title":"SOLID​","type":1,"pageTitle":"Prinzipien","url":"/my-documentation/docs/Entwicklung/Grundlagen/Prinzipien#solid","content":" ","version":"Next","tagName":"h2"},{"title":"1. Single Responsibility Principle (SRP)​","type":1,"pageTitle":"Prinzipien","url":"/my-documentation/docs/Entwicklung/Grundlagen/Prinzipien#1-single-responsibility-principle-srp","content":" -&gt; Eine Klasse, eine Aufgabe  &quot;Eine Klasse sollte nur einen einzigen Grund zur Änderung haben.&quot; Jede Klasse sollte genau eine Verantwortung haben, damit sie leicht verständlich und wartbar bleibt.  Beispiel Schlecht class Report { public void GenerateReport() { /* Report generieren */ } public void SaveToFile() { /* Datei speichern */ } } Besser class Report { public void Generate() { /* Report generieren */ } } class ReportSaver { public void SaveToFile(Report report) { /* Datei speichern */ } } Trennung von Berichtserstellung und Speichern.  ","version":"Next","tagName":"h3"},{"title":"2. Open/Closed Principle (OCP)​","type":1,"pageTitle":"Prinzipien","url":"/my-documentation/docs/Entwicklung/Grundlagen/Prinzipien#2-openclosed-principle-ocp","content":" -&gt; Offen für Erweiterung, geschlossen für Modifikation  &quot;Software-Entitäten sollten erweiterbar, aber nicht durch Änderungen modifizierbar sein.&quot; Statt Code zu ändern, sollten neue Funktionalitäten durch Erweiterung hinzugefügt werden.  Beispiel Schlecht class PaymentProcessor { public void ProcessPayment(string type) { if (type == &quot;CreditCard&quot;) { /* Kreditkarte */ } else if (type == &quot;PayPal&quot;) { /* PayPal */ } } } Besser interface IPaymentMethod { void Pay(); } class CreditCardPayment : IPaymentMethod { public void Pay() { /* Kreditkarte */ } } class PayPalPayment : IPaymentMethod { public void Pay() { /* PayPal */ } } class PaymentProcessor { public void ProcessPayment(IPaymentMethod payment) { payment.Pay(); } } Leicht erweiterbar ohne bestehende Code-Änderungen.  ","version":"Next","tagName":"h3"},{"title":"3. Liskov Substitution Principle (LSP)​","type":1,"pageTitle":"Prinzipien","url":"/my-documentation/docs/Entwicklung/Grundlagen/Prinzipien#3-liskov-substitution-principle-lsp","content":" -&gt; Ersetzbarkeit von Unterklassen  &quot;Eine Unterklasse muss sich wie ihre Oberklasse verhalten können.&quot; Eine Unterklasse sollte sich ohne Seiteneffekte anstelle der Oberklasse einsetzen lassen.  Beispiel Schlecht class Bird { public virtual void Fly() { } } class Penguin : Bird { public override void Fly() { throw new NotImplementedException(); // ❌ Pinguine können nicht fliegen! } } Besser abstract class Bird { } interface IFlyable { void Fly(); } class Sparrow : Bird, IFlyable { public void Fly() { /* Fliegen */ } } class Penguin : Bird { /* Kein Fly() notwendig */ } Pinguine müssen nicht fliegen können.  ","version":"Next","tagName":"h3"},{"title":"4. Interface Segregation Principle (ISP)​","type":1,"pageTitle":"Prinzipien","url":"/my-documentation/docs/Entwicklung/Grundlagen/Prinzipien#4-interface-segregation-principle-isp","content":" -&gt; Spezialisierte Schnittstellen statt einer großen  &quot;Clients sollten nicht von Interfaces abhängig sein, die sie nicht nutzen.&quot; Statt eine riesige Schnittstelle zu haben, sollten mehrere kleine, spezialisierte Interfaces verwendet werden.  Beispiel Schlecht interface IWorker { void Work(); void Eat(); } class Robot : IWorker { public void Work() { /* Arbeiten */ } public void Eat() { throw new NotImplementedException(); } // Roboter essen nicht! } Besser interface IWorkable { void Work(); } interface IEatable { void Eat(); } class Human : IWorkable, IEatable { public void Work() { /* Arbeiten */ } public void Eat() { /* Essen */ } } class Robot : IWorkable { public void Work() { /* Arbeiten */ } } Kein unnötiger Code für Roboter.  ","version":"Next","tagName":"h3"},{"title":"5. Dependency Inversion Principle (DIP)​","type":1,"pageTitle":"Prinzipien","url":"/my-documentation/docs/Entwicklung/Grundlagen/Prinzipien#5-dependency-inversion-principle-dip","content":" -&gt; Abhängigkeiten von Abstraktionen statt konkreten Implementierungen  &quot;Module höherer Ebenen sollten nicht von Modulen niedriger Ebenen abhängen. Beide sollten von Abstraktionen abhängen.&quot; Statt konkrete Klassen zu verwenden, sollte mit Schnittstellen oder Abstraktionen gearbeitet werden.  Beispiel Schlecht class LightBulb { public void TurnOn() { /* Licht an */ } } class Switch { private LightBulb bulb = new LightBulb(); public void Operate() { bulb.TurnOn(); } } Besser interface ISwitchable { void TurnOn(); } class LightBulb : ISwitchable { public void TurnOn() { /* Licht an */ } } class Switch { private ISwitchable device; public Switch(ISwitchable device) { this.device = device; } public void Operate() { device.TurnOn(); } } Flexibel für andere Geräte, nicht nur Glühbirnen.  ","version":"Next","tagName":"h3"},{"title":"Zusammenfassung​","type":1,"pageTitle":"Prinzipien","url":"/my-documentation/docs/Entwicklung/Grundlagen/Prinzipien#zusammenfassung","content":" Prinzip\tBedeutung\tVorteilSRP (Single Responsibility)\tEine Klasse, eine Aufgabe\tErhöht Wartbarkeit OCP (Open/Closed)\tOffen für Erweiterung, geschlossen für Modifikation\tBessere Erweiterbarkeit LSP (Liskov Substitution)\tUnterklassen müssen sich wie Oberklassen verhalten\tKeine unerwarteten Fehler ISP (Interface Segregation)\tSpezialisierte Schnittstellen statt riesiger Interfaces\tKeine unnötigen Abhängigkeiten DIP (Dependency Inversion)\tAbhängig von Abstraktionen, nicht von Implementierungen\tFlexibler und testbarer Code ","version":"Next","tagName":"h3"},{"title":"Docusaurus","type":0,"sectionRef":"#","url":"/my-documentation/docs/Resourcen/Site/Docusaurus","content":"","keywords":"","version":"Next"},{"title":"Docs Frontmatter​","type":1,"pageTitle":"Docusaurus","url":"/my-documentation/docs/Resourcen/Site/Docusaurus#docs-frontmatter","content":" Frontmatter  Name\tType\tDefault\tDescriptionid\tstring\tfile path (including folders, without the extension)\tA unique document ID. title\tstring\tMarkdown title or id\tThe text title of your document. Used for the page metadata and as a fallback value in multiple places (sidebar, next/previous buttons...). Automatically added at the top of your doc if it does not contain any Markdown title. pagination_label\tstring\tsidebar_label or title\tThe text used in the document next/previous buttons for this document. sidebar_label\tstring\ttitle\tThe text shown in the document sidebar for this document. sidebar_position\tnumber\tDefault ordering\tControls the position of a doc inside the generated sidebar slice when using autogenerated sidebar items. See also Autogenerated sidebar metadata. sidebar_class_name\tstring\tundefined\tGives the corresponding sidebar label a special class name when using autogenerated sidebars. sidebar_custom_props\tobject\tundefined\tAssign custom props to the sidebar item referencing this doc displayed_sidebar\tstring\tundefined\tForce the display of a given sidebar when browsing the current document. Read the multiple sidebars guide for details. hide_title\tboolean\tfalse\tWhether to hide the title at the top of the doc. It only hides a title declared through the front matter, and have no effect on a Markdown title at the top of your document. hide_table_of_contents\tboolean\tfalse\tWhether to hide the table of contents to the right. toc_min_heading_level\tnumber\t2\tThe minimum heading level shown in the table of contents. Must be between 2 and 6 and lower or equal to the max value. toc_max_heading_level\tnumber\t3\tThe max heading level shown in the table of contents. Must be between 2 and 6. pagination_next\tstring | null\tNext doc in the sidebar\tThe ID of the documentation you want the &quot;Next&quot; pagination to link to. Use null to disable showing &quot;Next&quot; for this page. pagination_prev\tstring | null\tPrevious doc in the sidebar\tThe ID of the documentation you want the &quot;Previous&quot; pagination to link to. Use null to disable showing &quot;Previous&quot; for this page. parse_number_prefixes\tboolean\tnumberPrefixParser plugin option\tWhether number prefix parsing is disabled on this doc. See also Using number prefixes. custom_edit_url\tstring | null\tComputed using the editUrl plugin option\tThe URL for editing this document. Use null to disable showing &quot;Edit this page&quot; for this page. keywords\tstring[]\tundefined\tKeywords meta tag for the document page, for search engines. description\tstring\tThe first line of Markdown content\tThe description of your document, which will become the &lt;meta name=&quot;description&quot; content=&quot;...&quot;/&gt; and &lt;meta property=&quot;og:description&quot; content=&quot;...&quot;/&gt; in &lt;head&gt;, used by search engines. image\tstring\tundefined\tCover or thumbnail image that will be used as the &lt;meta property=&quot;og:image&quot; content=&quot;...&quot;/&gt; in the &lt;head&gt;, enhancing link previews on social media and messaging platforms. slug\tstring\tFile path\tAllows to customize the document URL (/&lt;routeBasePath&gt;/&lt;slug&gt;). Support multiple patterns: slug: my-doc, slug: /my/path/myDoc, slug: /. tags\tTag[]\tundefined\tA list of strings or objects of two string fields label and permalink to tag to your docs. Strings can be a reference to keys of a tags file (usually tags.yml) draft\tboolean\tfalse\tDraft documents will only be available during development. unlisted\tboolean\tfalse\tUnlisted documents will be available in both development and production. They will be &quot;hidden&quot; in production, not indexed, excluded from sitemaps, and can only be accessed by users having a direct link. last_update\tFrontMatterLastUpdate\tundefined\tAllows overriding the last update author/date. Date can be any parsable date string.  ","version":"Next","tagName":"h3"},{"title":"MDX​","type":1,"pageTitle":"Docusaurus","url":"/my-documentation/docs/Resourcen/Site/Docusaurus#mdx","content":" Import image import image_identifier from './img/image.jpeg'; &lt;img src={image_identifier} class=&quot;my-class&quot; alt=&quot;alt text&quot; /&gt;   Tabs &lt;Tabs&gt; &lt;TabItem value=&quot;first&quot; label=&quot;First&quot; default&gt; first &lt;/TabItem&gt; &lt;TabItem value=&quot;second&quot; label=&quot;Second&quot;&gt; second &lt;/TabItem&gt; &lt;TabItem value=&quot;third&quot; label=&quot;Third&quot;&gt; third &lt;/TabItem&gt; &lt;/Tabs&gt;   Collabsible &lt;details&gt; &lt;summary&gt;Name&lt;/summary&gt; Content &lt;/details&gt;   ","version":"Next","tagName":"h3"},{"title":"Infima​","type":1,"pageTitle":"Docusaurus","url":"/my-documentation/docs/Resourcen/Site/Docusaurus#infima","content":" infima Docs  center an image &lt;div class=&quot;text--center&quot;&gt; &lt;img src={img_echteteilmenge} class=&quot;img-400 text--center&quot; alt=&quot;echte teilmenge&quot; /&gt; &lt;/div&gt;   colored text &lt;p class=&quot;text--primary&quot;&gt;Primary Text&lt;/p&gt; &lt;p class=&quot;text--secondary&quot;&gt;Secondary Text&lt;/p&gt; &lt;p class=&quot;text--success&quot;&gt;Success Text&lt;/p&gt; &lt;p class=&quot;text--info&quot;&gt;Info Text&lt;/p&gt; &lt;p class=&quot;text--warning&quot;&gt;Warning Text&lt;/p&gt; &lt;p class=&quot;text--danger&quot;&gt;Danger Text&lt;/p&gt;   badges &lt;span class=&quot;badge badge--primary&quot;&gt;Primary&lt;/span&gt; &lt;span class=&quot;badge badge--secondary&quot;&gt;Secondary&lt;/span&gt; &lt;span class=&quot;badge badge--success&quot;&gt;Success&lt;/span&gt; &lt;span class=&quot;badge badge--info&quot;&gt;Info&lt;/span&gt; &lt;span class=&quot;badge badge--warning&quot;&gt;Warning&lt;/span&gt; &lt;span class=&quot;badge badge--danger&quot;&gt;Danger&lt;/span&gt;   button-like links &lt;div&gt; &lt;a class=&quot;button button--primary&quot; href=&quot;#url&quot;&gt;Primary&lt;/a&gt; &lt;a class=&quot;button button--secondary&quot; href=&quot;#url&quot;&gt;Secondary&lt;/a&gt; &lt;a class=&quot;button button--success&quot; href=&quot;#url&quot;&gt;Success&lt;/a&gt; &lt;a class=&quot;button button--info&quot; href=&quot;#url&quot;&gt;Info&lt;/a&gt; &lt;a class=&quot;button button--warning&quot; href=&quot;#url&quot;&gt;Warning&lt;/a&gt; &lt;a class=&quot;button button--danger&quot; href=&quot;#url&quot;&gt;Danger&lt;/a&gt; &lt;a class=&quot;button button--link&quot; href=&quot;#url&quot;&gt;Link&lt;/a&gt; &lt;/div&gt;   card &lt;div class=&quot;card-demo&quot;&gt; &lt;div class=&quot;card&quot;&gt; &lt;div class=&quot;card__header&quot;&gt; &lt;h3&gt;Lorem Ipsum&lt;/h3&gt; &lt;/div&gt; &lt;div class=&quot;card__body&quot;&gt; &lt;p&gt; Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Quis ipsum suspendisse ultrices gravida. &lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;card__footer&quot;&gt; &lt;button class=&quot;button button--secondary button--block&quot;&gt;See All&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  ","version":"Next","tagName":"h3"},{"title":"Styleguide","type":0,"sectionRef":"#","url":"/my-documentation/docs/Resourcen/Site/Styleguide","content":"","keywords":"","version":"Next"},{"title":"Headings​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Resourcen/Site/Styleguide#headings","content":" H1  ","version":"Next","tagName":"h3"},{"title":"H2​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Resourcen/Site/Styleguide#h2","content":" ","version":"Next","tagName":"h2"},{"title":"H3​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Resourcen/Site/Styleguide#h3","content":" H4​  H5​  H6​  Heading IDs​  // ## Hello World -&gt; generated ID = hello-world [link](#heading-id)   ","version":"Next","tagName":"h3"},{"title":"Emphasis​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Resourcen/Site/Styleguide#emphasis","content":" Bold Text Italic Text Strikethrough This is a codeline  ","version":"Next","tagName":"h3"},{"title":"Paragraph​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Resourcen/Site/Styleguide#paragraph","content":" Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.  ","version":"Next","tagName":"h3"},{"title":"Lists​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Resourcen/Site/Styleguide#lists","content":" number onenumber twonumber three indented 1indented 2 bullet 1bullet 2bullet 3bullet 4  bulletlist subbullet 1subbullet 2 Checklist 1 Checklist 2 Checklist 3  ","version":"Next","tagName":"h3"},{"title":"Codeblocks​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Resourcen/Site/Styleguide#codeblocks","content":" Codeblock with line numbers and Title # This is a codeblock def add(*stuff): sum = 0 stuff = list(stuff) stuff[0] = 0 for i in stuff: sum += i return sum print(add(1,2,3,4,5,6))   ","version":"Next","tagName":"h3"},{"title":"Quote​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Resourcen/Site/Styleguide#quote","content":" people, meetings, projects, sources code snippets, cheat sheets, project doku ideen,  ","version":"Next","tagName":"h3"},{"title":"Tables​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Resourcen/Site/Styleguide#tables","content":" Shortcut Key (General)\tFunctions\tShortcut Key (Editing)\tFunctionsCtrl + S\tEditor: Saves the file\tCtrl + B\tBold Selected Text Ctrl + N\tCreates a new note\tCtrl + I\tItalicize Selected Text Ctrl + P\tOpen command pallete\tCtrl + K\tInsert External Link to Selected Text Ctrl + O\tOpens Quick Switcher\tCtrl + ]\tIndent Ctrl + Shift + F\tSearch in all files\tCtrl + [\tUnindent Ctrl + G\tOpens graph view\tCtrl + D\tDelete current line Ctrl + Alt + ←\tNavigate Back\tCtrl + V\tDuplicate current line Ctrl + Alt + →\tNavigate forth\tCtrl + Click\tOpen Note in Current Panel via Link Ctrl + F\tSearches current file\tCtrl + Shift + Click\tOpen Note in New Panel via Link Ctrl + E\tToggle edit/preview modes\tCtrl + N (Cmd + N on Mac)\tNew Note Ctrl + ,\tOpen Settings\tCtrl + Shift + D (Cmd + Shift + D on Mac)\tCreate a Daily Note Ctrl + Tab\tNext tab\tCtrl + / (Cmd + / on Mac)\tToggle Command Palette Ctrl + Shift + Tab\tPrevious tab\tCtrl + E (Cmd + E on Mac)\tOpen Graph View Alt + Tab\tNext App\tCtrl + Click (Cmd + Click on Mac)\tOpen Link in New Pane Alt + Shift + Tab\tPrevious App Win + Tab\tTask View Win + Shift + Tab\tNext Window   ","version":"Next","tagName":"h3"},{"title":"Callouts​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Resourcen/Site/Styleguide#callouts","content":" Optional Title with some Markdown syntax! Some content with Markdown syntax. Check this api.  tip Some content with Markdown syntax. Check this api.  info Some content with Markdown syntax. Check this api.  warning Some content with Markdown syntax. Check this api.  danger Some content with Markdown syntax. Check this api.  ","version":"Next","tagName":"h3"},{"title":"Nested Callouts​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Resourcen/Site/Styleguide#nested-callouts","content":" Parent Parent content Child Child content Deep Child Deep child content  ","version":"Next","tagName":"h3"},{"title":"Collabsible​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Resourcen/Site/Styleguide#collabsible","content":" Toggle me! This is the detailed content console.log(&quot;Markdown features including the code block are available&quot;); You can use Markdown here including bold and italic text, and inline link Nested toggle! Some surprise inside... 😲😲😲😲😲  ","version":"Next","tagName":"h3"},{"title":"Tabs (mdx)​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Resourcen/Site/Styleguide#tabs-mdx","content":" Tabs Documentation  AppleOrangeBanana This is an apple 🍎  Tabs in Callouts​  Tabs AppleOrangeBanana This is an apple 🍎  Tabs with Codeblocks​  PythonC# # This is a codeblock def add(*stuff): sum = 0 stuff = list(stuff) stuff[0] = 0 for i in stuff: sum += i return sum print(add(1,2,3,4,5,6))   ","version":"Next","tagName":"h3"},{"title":"Inline TOC (mdx)​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Resourcen/Site/Styleguide#inline-toc-mdx","content":" HeadingsH2 H3EmphasisParagraphListsCodeblocksQuoteTablesCalloutsNested CalloutsCollabsibleTabs (mdx)Inline TOC (mdx)Mermaid Diagrams  ","version":"Next","tagName":"h3"},{"title":"Mermaid Diagrams​","type":1,"pageTitle":"Styleguide","url":"/my-documentation/docs/Resourcen/Site/Styleguide#mermaid-diagrams","content":" ","version":"Next","tagName":"h3"},{"title":"Python 3 Dokumentation","type":0,"sectionRef":"#","url":"/my-documentation/docs/Resourcen/Dokumentationen/Python-docu","content":"","keywords":"","version":"Next"},{"title":"Python Modules / Packaging​","type":1,"pageTitle":"Python 3 Dokumentation","url":"/my-documentation/docs/Resourcen/Dokumentationen/Python-docu#python-modules--packaging","content":" Python Packaging User Guide​  Python Module Index​  Python Package Index​  PIP (Python Package Installer)​  ","version":"Next","tagName":"h2"},{"title":"Python Language Reference​","type":1,"pageTitle":"Python 3 Dokumentation","url":"/my-documentation/docs/Resourcen/Dokumentationen/Python-docu#python-language-reference","content":" 1. Introduction​ 1.1. Alternate Implementations1.2. Notation 2. Lexical analysis​ 2.1. Line structure2.2. Other tokens2.3. Identifiers and keywords2.4. Literals2.5. Operators2.6. Delimiters 3. Data model​ 3.1. Objects, values and types3.2. The standard type hierarchy3.3. Special method names3.4. Coroutines 4. Execution model​ 4.1. Structure of a program4.2. Naming and binding4.3. Exceptions 5. The import system​ 5.1. importlib5.2. Packages5.3. Searching5.4. Loading5.5. The Path Based Finder5.6. Replacing the standard import system5.7. Package Relative Imports5.8. Special considerations for main5.9. References 6. Expressions​ 6.1. Arithmetic conversions6.2. Atoms6.3. Primaries6.4. Await expression6.5. The power operator6.6. Unary arithmetic and bitwise operations6.7. Binary arithmetic operations6.8. Shifting operations6.9. Binary bitwise operations6.10. Comparisons6.11. Boolean operations6.12. Assignment expressions6.13. Conditional expressions6.14. Lambdas6.15. Expression lists6.16. Evaluation order6.17. Operator precedence 7. Simple statements​ 7.1. Expression statements7.2. Assignment statements7.3. The assert statement7.4. The pass statement7.5. The del statement7.6. The return statement7.7. The yield statement7.8. The raise statement7.9. The break statement7.10. The continue statement7.11. The import statement7.12. The global statement7.13. The nonlocal statement7.14. The type statement 8. Compound statements​ 8.1. The if statement8.2. The while statement8.3. The for statement8.4. The try statement8.5. The with statement8.6. The match statement8.7. Function definitions8.8. Class definitions8.9. Coroutines8.10. Type parameter lists 9. Top-level components​ 9.1. Complete Python programs9.2. File input9.3. Interactive input9.4. Expression input 10. Full Grammar specification​  ","version":"Next","tagName":"h2"},{"title":"Python Library Reference​","type":1,"pageTitle":"Python 3 Dokumentation","url":"/my-documentation/docs/Resourcen/Dokumentationen/Python-docu#python-library-reference","content":" Introduction​ Notes on availability Built-in Functions​ Built-in Constants​ Constants added by the site module Built-in Types​ Truth Value TestingBoolean Operations — and, or, notComparisonsNumeric Types — int, float, complexBoolean Type - boolIterator TypesSequence Types — list, tuple, rangeText Sequence Type — strBinary Sequence Types — bytes, bytearray, memoryviewSet Types — set, frozensetMapping Types — dictContext Manager TypesType Annotation Types — Generic Alias, UnionOther Built-in TypesSpecial AttributesInteger string conversion length limitation Built-in Exceptions​ Exception contextInheriting from built-in exceptionsBase classesConcrete exceptionsWarningsException groupsException hierarchy Text Processing Services​ string — Common string operationsre — Regular expression operationsdifflib — Helpers for computing deltastextwrap — Text wrapping and fillingunicodedata — Unicode Databasestringprep — Internet String Preparationreadline — GNU readline interfacerlcompleter — Completion function for GNU readline Binary Data Services​ struct — Interpret bytes as packed binary datacodecs — Codec registry and base classes Data Types​ datetime — Basic date and time typeszoneinfo — IANA time zone supportcalendar — General calendar-related functionscollections — Container datatypescollections.abc — Abstract Base Classes for Containersheapq — Heap queue algorithmbisect — Array bisection algorithmarray — Efficient arrays of numeric valuesweakref — Weak referencestypes — Dynamic type creation and names for built-in typescopy — Shallow and deep copy operationspprint — Data pretty printerreprlib — Alternate repr() implementationenum — Support for enumerationsgraphlib — Functionality to operate with graph-like structures Numeric and Mathematical Modules​ numbers — Numeric abstract base classesmath — Mathematical functionscmath — Mathematical functions for complex numbersdecimal — Decimal fixed-point and floating-point arithmeticfractions — Rational numbersrandom — Generate pseudo-random numbersstatistics — Mathematical statistics functions Functional Programming Modules​ itertools — Functions creating iterators for efficient loopingfunctools — Higher-order functions and operations on callable objectsoperator — Standard operators as functions File and Directory Access​ pathlib — Object-oriented filesystem pathsos.path — Common pathname manipulationsstat — Interpreting stat() resultsfilecmp — File and Directory Comparisonstempfile — Generate temporary files and directoriesglob — Unix style pathname pattern expansionfnmatch — Unix filename pattern matchinglinecache — Random access to text linesshutil — High-level file operations Data Persistence​ pickle — Python object serializationcopyreg — Register pickle support functionsshelve — Python object persistencemarshal — Internal Python object serializationdbm — Interfaces to Unix “databases”sqlite3 — DB-API 2.0 interface for SQLite databases Data Compression and Archiving​ zlib — Compression compatible with gzipgzip — Support for gzip filesbz2 — Support for bzip2 compressionlzma — Compression using the LZMA algorithmzipfile — Work with ZIP archivestarfile — Read and write tar archive files File Formats​ csv — CSV File Reading and Writingconfigparser — Configuration file parsertomllib — Parse TOML filesnetrc — netrc file processingplistlib — Generate and parse Apple .plist files Cryptographic Services​ hashlib — Secure hashes and message digestshmac — Keyed-Hashing for Message Authenticationsecrets — Generate secure random numbers for managing secrets Generic Operating System Services​ os — Miscellaneous operating system interfacesio — Core tools for working with streamstime — Time access and conversionslogging — Logging facility for Pythonlogging.config — Logging configurationlogging.handlers — Logging handlersplatform — Access to underlying platform’s identifying dataerrno — Standard errno system symbolsctypes — A foreign function library for Python Command Line Interface Libraries​ argparse — Parser for command-line options, arguments and subcommandsoptparse — Parser for command line optionsgetpass — Portable password inputfileinput — Iterate over lines from multiple input streamscurses — Terminal handling for character-cell displayscurses.textpad — Text input widget for curses programscurses.ascii — Utilities for ASCII characterscurses.panel — A panel stack extension for curses Concurrent Execution​ threading — Thread-based parallelismmultiprocessing — Process-based parallelismmultiprocessing.shared_memory — Shared memory for direct access across processesThe concurrent packageconcurrent.futures — Launching parallel taskssubprocess — Subprocess managementsched — Event schedulerqueue — A synchronized queue classcontextvars — Context Variables_thread — Low-level threading API Networking and Interprocess Communication​ asyncio — Asynchronous I/Osocket — Low-level networking interfacessl — TLS/SSL wrapper for socket objectsselect — Waiting for I/O completionselectors — High-level I/O multiplexingsignal — Set handlers for asynchronous eventsmmap — Memory-mapped file support Internet Data Handling​ email — An email and MIME handling packagejson — JSON encoder and decodermailbox — Manipulate mailboxes in various formatsmimetypes — Map filenames to MIME typesbase64 — Base16, Base32, Base64, Base85 Data Encodingsbinascii — Convert between binary and ASCIIquopri — Encode and decode MIME quoted-printable data Structured Markup Processing Tools​ html — HyperText Markup Language supporthtml.parser — Simple HTML and XHTML parserhtml.entities — Definitions of HTML general entitiesXML Processing Modulesxml.etree.ElementTree — The ElementTree XML APIxml.dom — The Document Object Model APIxml.dom.minidom — Minimal DOM implementationxml.dom.pulldom — Support for building partial DOM treesxml.sax — Support for SAX2 parsersxml.sax.handler — Base classes for SAX handlersxml.sax.saxutils — SAX Utilitiesxml.sax.xmlreader — Interface for XML parsersxml.parsers.expat — Fast XML parsing using Expat Internet Protocols and Support​ webbrowser — Convenient web-browser controllerwsgiref — WSGI Utilities and Reference Implementationurllib — URL handling modulesurllib.request — Extensible library for opening URLsurllib.response — Response classes used by urlliburllib.parse — Parse URLs into componentsurllib.error — Exception classes raised by urllib.requesturllib.robotparser — Parser for robots.txthttp — HTTP moduleshttp.client — HTTP protocol clientftplib — FTP protocol clientpoplib — POP3 protocol clientimaplib — IMAP4 protocol clientsmtplib — SMTP protocol clientuuid — UUID objects according to RFC 4122socketserver — A framework for network servershttp.server — HTTP servershttp.cookies — HTTP state managementhttp.cookiejar — Cookie handling for HTTP clientsxmlrpc — XMLRPC server and client modulesxmlrpc.client — XML-RPC client accessxmlrpc.server — Basic XML-RPC serversipaddress — IPv4/IPv6 manipulation library Multimedia Services​ wave — Read and write WAV filescolorsys — Conversions between color systems Internationalization​ gettext — Multilingual internationalization serviceslocale — Internationalization services Program Frameworks​ turtle — Turtle graphicscmd — Support for line-oriented command interpretersshlex — Simple lexical analysis Graphical User Interfaces with Tk​ tkinter — Python interface to Tcl/Tktkinter.colorchooser — Color choosing dialogtkinter.font — Tkinter font wrapperTkinter Dialogstkinter.messagebox — Tkinter message promptstkinter.scrolledtext — Scrolled Text Widgettkinter.dnd — Drag and drop supporttkinter.ttk — Tk themed widgetsIDLE Development Tools​ typing — Support for type hintspydoc — Documentation generator and online help systemPython Development Modedoctest — Test interactive Python examplesunittest — Unit testing frameworkunittest.mock — mock object libraryunittest.mock — getting startedtest — Regression tests package for Pythontest.support — Utilities for the Python test suitetest.support.socket_helper — Utilities for socket teststest.support.script_helper — Utilities for the Python execution teststest.support.bytecode_helper — Support tools for testing correct bytecode generationtest.support.threading_helper — Utilities for threading teststest.support.os_helper — Utilities for os teststest.support.import_helper — Utilities for import teststest.support.warnings_helper — Utilities for warnings tests Debugging and Profiling​ Audit events tablebdb — Debugger frameworkfaulthandler — Dump the Python tracebackpdb — The Python DebuggerThe Python Profilerstimeit — Measure execution time of small code snippetstrace — Trace or track Python statement executiontracemalloc — Trace memory allocations Software Packaging and Distribution​ ensurepip — Bootstrapping the pip installervenv — Creation of virtual environmentszipapp — Manage executable Python zip archives Python Runtime Services​ sys — System-specific parameters and functionssys.monitoring — Execution event monitoringsysconfig — Provide access to Python’s configuration informationbuiltins — Built-in objects__main__ — Top-level code environmentwarnings — Warning controldataclasses — Data Classescontextlib — Utilities for with-statement contextsabc — Abstract Base Classesatexit — Exit handlerstraceback — Print or retrieve a stack traceback__future__ — Future statement definitionsgc — Garbage Collector interfaceinspect — Inspect live objectssite — Site-specific configuration hook Custom Python Interpreters​ code — Interpreter base classescodeop — Compile Python code Importing Modules​ zipimport — Import modules from Zip archivespkgutil — Package extension utilitymodulefinder — Find modules used by a scriptrunpy — Locating and executing Python modulesimportlib — The implementation of importimportlib.resources – Package resource reading, opening and accessimportlib.resources.abc – Abstract base classes for resourcesimportlib.metadata – Accessing package metadataThe initialization of the sys.path module search path Python Language Services​ ast — Abstract Syntax Treessymtable — Access to the compiler’s symbol tablestoken — Constants used with Python parse treeskeyword — Testing for Python keywordstokenize — Tokenizer for Python sourcetabnanny — Detection of ambiguous indentationpyclbr — Python module browser supportpy_compile — Compile Python source filescompileall — Byte-compile Python librariesdis — Disassembler for Python bytecodepickletools — Tools for pickle developers MS Windows Specific Services​ msvcrt — Useful routines from the MS VC++ runtimewinreg — Windows registry accesswinsound — Sound-playing interface for Windows Unix Specific Services​ posix — The most common POSIX system callspwd — The password databasegrp — The group databasetermios — POSIX style tty controltty — Terminal control functionspty — Pseudo-terminal utilitiesfcntl — The fcntl and ioctl system callsresource — Resource usage informationsyslog — Unix syslog library routines Modules command-line interface (CLI)​ Superseded Modules​ getopt — C-style parser for command line options Removed Modules​ Security Considerations​ ","version":"Next","tagName":"h2"},{"title":"Grundbegriffe","type":0,"sectionRef":"#","url":"/my-documentation/docs/Entwicklung/Grundlagen/Grundbegriffe","content":"","keywords":"","version":"Next"},{"title":"Ausdruck​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Entwicklung/Grundlagen/Grundbegriffe#ausdruck","content":" (eng Expression)  Ein Konstrukt das gemäß einer gegebenen Semantik in Bezug auf einen Kontext ausgewertet werden kann, also einen Wert liefert.  Literale (Konstanten): 𝛑 = 3.14, &quot;Hallo Welt&quot;Variablen: x, betragInEuro, wochtagsNummerFunktionen: random(), date()Operationen: 2+5, 2^8, 2(x - 10)Eine Kombination aus Variablen, Funktionen und Operationen die zu einem einzigen Wert ausgewertet wird.  ","version":"Next","tagName":"h3"},{"title":"Deklaration​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Entwicklung/Grundlagen/Grundbegriffe#deklaration","content":" Die Einführung eines Bezeichners (zb einer Variablen, Funktion oder Klasse) im Code, ohne zwingend Speicher zu reservieren oder eine Initialisierung vorzunehmen.  Definition von Name und Typ einer Entität (Variable, Funktion, Klasse)Keine SpeicherreservierungErmöglicht spätere Verwendung (Initialisierung)Explizite Deklaration: Typ oder andere Metadaten werden direkt angegeben (int zahl)Implizite Deklaration: Automatische Ermittlung des Typs durch den Compiler/Interpreter (var zahl)  ","version":"Next","tagName":"h3"},{"title":"Initialisierung​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Entwicklung/Grundlagen/Grundbegriffe#initialisierung","content":" Zuweisung eines Wertes zu einer Variablen. Explizit wenn der Variable direkt ein Wert zugewiesen wird (string name = &quot;Bob&quot;). Manche Sprachen (wie C#) weisen Variablen automatisch Standardwerte zu, wenn sie als Felder einer Klasse definiert sind (Implizite Initialisierung).  lokale Variablen müssen explizit initialisiert werdenlazy Initialization (verzögerte Initialisierung): Variable wird initialisiert, wenn sie das erste mal benutzt wird. Verbessert die Performance in manchen Szenarien.Best Practice: Variablen sollten immer mit sinnvollen Standardwerten initialisiert werden, um unerwartetes Verhalten zu vermeiden.  ","version":"Next","tagName":"h3"},{"title":"Bezeichner​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Entwicklung/Grundlagen/Grundbegriffe#bezeichner","content":" (eng Identifier)  Eindeutige Benennung von Variablen, Datentypen, Funktionen oder Klassen. Bezeichner müssen innerhalb eines Namensraumes eindeutig sein, es sei denn die Programmiersprache erlaubt das Überladen (siehe auch Polymorphie).  Allgemeine Regeln für Bezeichner:  Können Buchstaben (a-z, A-Z), Ziffern (0-9) und Unterstriche (_) enthalten.Dürfen nicht mit einer Ziffer beginnen.Dürfen keine reservierten Schlüsselwörter (wie if, for, while) sein.  ","version":"Next","tagName":"h3"},{"title":"Literal​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Entwicklung/Grundlagen/Grundbegriffe#literal","content":" (lat. littera 'Buchstabe') Ein Literal ist ein fester Wert, der direkt im Code geschrieben steht. Literals stellen Werte dar, die nicht verändert werden können.  logische (wahr oder falsch), numerische oder Zeichenliteralein der funktionalen Programmierung können auch Funktionen als Literale geschrieben werden: werden als anonyme Funktionen oder Lambda Funktionen bezeichnetBest Practice: Literale sind okay für einfache, selbsterklärende Werte  Exkurs: Magic Numbers Definition:Ein Magic Number ist eine ungekennzeichnete numerische Konstante, die direkt im Code verwendet wird, ohne Erklärung oder Kontext. Sie macht den Code schwer verständlich und schwer wartbar. Fehlende Bedeutung: double preis = menge * 19.99; Was bedeutet 19.99? Ist es ein Rabatt? Eine Steuer? Ein Fixpreis? Schwer zu ändern: if (punkte &gt;= 100) { ... } Wenn sich die Punktegrenze ändert, muss sie ggfs. an mehreren Stellen ersetzt werden. Ersetze Magic Numbers durch Konstanten mit erklärendem Namen: const double Umsatzsteuer = 19.99; double preis = menge * Umsatzsteuer; Bessere Lesbarkeit und Wartbarkeit: const int MindestpunkteFürBonus = 100; if (punkte &gt;= MindestpunkteFürBonus) { ... } Best Practice: const für fixe Wertegib Konstanten sprechende NamenVermeide Hardcoded-Zahlen in Vergleichen oder Berechnungen  ","version":"Next","tagName":"h3"},{"title":"Konstanten​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Entwicklung/Grundlagen/Grundbegriffe#konstanten","content":" Eine Konstante (lat constans 'feststehend') ist ein Behälter für eine Wert, der nach der Zuweisung nicht verändert werden kann. Das Gegenstück dazu ist eine Variable.  Exkurs: const vs readonly Was ist readonly? Das Schlüsselwort readonly in C# kennzeichnet Felder, deren Wert nach der Initialisierung nicht mehr geändert werden kann. Im Gegensatz zu const kann ein readonly-Feld zur Laufzeit initialisiert werden, z. B. im Konstruktor. Unterschiede zwischen readonly und const Merkmal\tconst\treadonlyWertänderung\tMuss zur Kompilierzeit feststehen\tKann zur Laufzeit gesetzt werden Gültigkeitsbereich\tNur für primitive Typen &amp; Strings\tFür alle Datentypen nutzbar Wo erlaubt?\tNur in statischen Kontexten\tIn Instanz- und statischen Feldern Verwendung in Konstruktoren\t❌ Nein\t✅ Ja Beispiel\tconst double Pi = 3.14;\treadonly int maxUsers; tip ✅ Nutze readonly, wenn: Der Wert erst zur Laufzeit bekannt ist.Der Wert von einem Konstruktor abhängt.Du komplexe Objekte (z. B. Listen, Klassen) speichern möchtest. ✅ Nutze const, wenn: Der Wert zur Kompilierzeit bekannt ist.Es sich um einfache Zahlen, Strings oder boolesche Werte handelt. Beispiel in statischen Feldern class Config { public static readonly int MaxConnections = 100; static Config() { MaxConnections = 200; // Initialisierung ist in statischem Konstruktor erlaubt } } readonly in anderen Sprachen Sprache\tEntsprechung von readonlyC++\tconst für Felder Java\tfinal für Felder TypeScript\treadonly für Klassenvariablen Python\t@property mit nur einem Getter  ","version":"Next","tagName":"h3"},{"title":"Anweisung​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Entwicklung/Grundlagen/Grundbegriffe#anweisung","content":" (eng Statement)  Statements sind komplette Einheiten von Code, die eine bestimmte Operation ausführen, wie z.B. eine Variable zuzuweisen oder eine Schleife auszuführen.  Zentrales Element Imperativer Programmiersprachen: Programmierparadigma nach dem ein Programm aus einer Folge von Anweisungen besteht, die vorgeben in welcher Reihenfolge was vom Computer getan werden soll.  Beispiele:  Zuweisung: x = 5Funktionsaufruf: print(&quot;Hallo&quot;)Schleifen: for i in range(10): [...]Bedingungen: if x &gt; 3: [...]  ","version":"Next","tagName":"h3"},{"title":"Prozedur​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Entwicklung/Grundlagen/Grundbegriffe#prozedur","content":" Variante zum Begriff &quot;Unterprogramm&quot;. Anweisungen einer Prozedur können über aufgerufen und dadurch mehrfach verwendet werden. Im Gegensatz zu Funktionen liefern Prozeduren normalerweise keinen Rückgabewert. Je nach Programmiersprache und Programmierparadigma gibt es jedoch Unterschiede in der Definition des Begriffs Prozedur und der Abgrenzung zur Funktion.  ","version":"Next","tagName":"h3"},{"title":"Funktion​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Entwicklung/Grundlagen/Grundbegriffe#funktion","content":" Ein Programmkonstrukt (&quot;Unterprogramm&quot;), mit dem Quellcode strukturiert werden kann, sodass Teile der Funktionalität wiederverwendbar sind. Im Gegensatz zu Prozeduren geben Funktionen einen Wert zurück, der direkt verwendet werden kann. Prozeduren, die keinen Rückgabewert haben, können nur indirekt Ergebnisse liefern, indem entweder Referenzparameter oder globale Variablen verändert werden.  ","version":"Next","tagName":"h3"},{"title":"Methode​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Entwicklung/Grundlagen/Grundbegriffe#methode","content":" Eine Methode ist eine Funktion, die in einer Klasse oder einem Objekt definiert ist. Sie gehört zu einem bestimmten Objekt oder einer Klasse und kann daher auf dessen Eigenschaften (Attribute) und andere Methoden zugreifen.  ","version":"Next","tagName":"h3"},{"title":"Parameter​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Entwicklung/Grundlagen/Grundbegriffe#parameter","content":" Platzhalter für Werte in der Funktionsdefinition. Sie sind Teil der Funktionsdeklaration. funktion(parameter, parameter){[...]}  ","version":"Next","tagName":"h3"},{"title":"Argument​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Entwicklung/Grundlagen/Grundbegriffe#argument","content":" Ein Argument ist der tatsächliche Wert oder die Referenz, die an eine Funktion übergeben wird, wenn diese aufgerufen wird. Argumente werden im Funktionsaufruf übergeben und entsprechen den Parametern, die in der Funktionsdefinition deklariert sind. funktion(3435, 23){[...]}  ","version":"Next","tagName":"h3"},{"title":"Klasse​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Entwicklung/Grundlagen/Grundbegriffe#klasse","content":" Eine Klasse ist ein Bauplan für Objekte. Sie definiert eine Datenstruktur und die Methoden (Funktionen), die darauf arbeiten.  Feld​  Ein Feld ist eine direkte Variable in einer Klasse oder Struktur, die den Zustand eines Objekts speichert.  Wird meistens als privates Datenmitglied (private) definiert, um direkten Zugriff zu vermeiden.Kann direkt gelesen oder geändert werden (sofern public, was oft vermieden wird -&gt; Kapselung / Geheimnisprinziep).Beinhaltet keine Logik (wie Überprüfung oder Validierung).  Attribut​  Der Begriff Attribut ist allgemeiner als &quot;Feld&quot;.In der OOP bezeichnet ein Attribut einfach eine Eigenschaft eines Objekts, unabhängig von der konkreten Implementierung.In Sprachen wie Python oder JavaScript werden Attribute oft als alles betrachtet, was ein Objekt besitzt (Felder, Methoden, Properties).In C# oder Java wird der Begriff &quot;Attribut&quot; weniger für Felder/Properties verwendet, sondern für Metadaten (Annotationen oder Decorators), die zusätzliche Informationen für den Compiler oder Laufzeitumgebungen enthalten.  Property (Eigenschaft, Zugriffsmethode)​  Eine Property ist eine Methode, die wie ein Feld aussieht.  Ermöglicht kontrollierten Zugriff auf Felder mit Getter- und Setter-Methoden.Unterstützt Validierung, Berechnungen oder Schutzmechanismen.Verhindert direkten Zugriff auf interne Felder.  Best Practice in C#: Private Felder + Public Properties!  Beispiel in Python class Person: # Konstruktor (wird aufgerufen wenn ein neues Objekt erstellt wird) def __init__(self, name, age): self.name = name self.age = age # Methode def greet(self): print(f&quot;Hallo, mein Name ist {self.name} und ich bin {self.age} Jahre alt.&quot;)   ","version":"Next","tagName":"h3"},{"title":"Objekt​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Entwicklung/Grundlagen/Grundbegriffe#objekt","content":" Ein Objekt ist eine Instanz einer Klasse. Es repräsentiert ein spezifisches Exemplar der Klasse und hat Attribute (Daten) und Methoden (Funktionen).  Ein Objekt der Klasse Person (s.o.) person1 = Person(&quot;Alice&quot;, 30) person1.greet()   ","version":"Next","tagName":"h3"},{"title":"Konstruktor​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Entwicklung/Grundlagen/Grundbegriffe#konstruktor","content":" Ein Konstruktor ist eine spezielle Methode innerhalb einer Klasse, die beim Erstellen eines Objekts automatisch aufgerufen wird.  Initialisiert ein Objekt in einem definierten Anfangszustand (z. B. setzt Standardwerte).Reserviert benötigte Resourcen, sofern diese zum Zeitpunkt der Objekterstellung bereits bekannt sind.  Konstruktoren in C# EinfachMehrere (Überladung)Aufruf mit this using System; class Person { public string Name; public int Age; // Konstruktor public Person(string name, int age) { Name = name; Age = age; } public void Greet() { Console.WriteLine($&quot;Hallo, mein Name ist {Name} und ich bin {Age} Jahre alt.&quot;); } } class Program { static void Main() { Person p = new Person(&quot;Max&quot;, 30); // Konstruktor wird aufgerufen p.Greet(); } }   Konstruktoren in Python EinfachDefault ParameterVererbung mit super() class Person: def __init__(self, name, age): # Konstruktor self.name = name self.age = age def greet(self): print(f&quot;Hallo, mein Name ist {self.name} und ich bin {self.age} Jahre alt.&quot;) # Objekterstellung p = Person(&quot;Max&quot;, 30) # Konstruktor wird automatisch aufgerufen p.greet()   ","version":"Next","tagName":"h3"},{"title":"Iterator​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Entwicklung/Grundlagen/Grundbegriffe#iterator","content":" Ein Iterator ist ein Objekt, das eine Sequenz von Elementen einen nach dem anderen zurückgibt, ohne alle Elemente gleichzeitig im Speicher zu halten. Iteratoren ermöglichen es, große oder unendliche Datenstrukturen effizient zu durchlaufen.  Erstellung und Nutzung eines Iterators in Python my_list = [1, 2, 3] # Eine Liste (iterierbares Objekt) my_iter = iter(my_list) # Erzeugt einen Iterator für die Liste print(next(my_iter)) # Gibt 1 aus print(next(my_iter)) # Gibt 2 aus   Iteratoren mit C# C# nutzt das yield Schlüsselwort, um Iteratoren einfach zu erstellen, ohne dass man eine eigene Klasse schreiben muss. Implementierung von yield return um ein großes Array zu verarbeiten using System; using System.Collections.Generic; class Program { static void Main() { foreach (var name in GetNames()) { if (name.StartsWith(&quot;A&quot;)) { // Stoppt frühzeitig, wenn genug gefunden wurden Console.WriteLine(name); break; } } } static IEnumerable&lt;string&gt; GetNames() { string[] names = new string[10000]; for (int i = 0; i &lt; names.Length; i++) { names[i] = &quot;Name&quot; + i; // Dummy-Daten } foreach (var name in names) { yield return name; // Gibt Namen einzeln zurück } } }   ","version":"Next","tagName":"h3"},{"title":"Generator​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Entwicklung/Grundlagen/Grundbegriffe#generator","content":" Ein Generator ist eine spezielle Funktion, die Iteratoren erstellt.  Er gibt Werte Schritt für Schritt zurück, ohne alle Werte auf einmal zu speichern.Wird oft für große Datenmengen oder unendliche Sequenzen verwendet.In C# nutzt man yield return, in Python yield.  Wann Generatoren nutzen? ✅ Große Datenmengen streamen – Falls du nicht alles auf einmal laden willst. ✅ Unendliche Sequenzen – Perfekt für Fibonacci, Zufallszahlen, etc. ✅ Effiziente Speicherverwendung – Erzeugt Werte nur bei Bedarf.  Einfacher Generator Beispielcode PythonC# # Gibt Werte Schritt für Schritt zurück # Die Methode merkt sich den Zustand def count_up_to(max): for i in range(1, max + 1): yield i # Gibt einen Wert zurück und pausiert for num in count_up_to(5): print(num)   ","version":"Next","tagName":"h3"},{"title":"Dekorator​","type":1,"pageTitle":"Grundbegriffe","url":"/my-documentation/docs/Entwicklung/Grundlagen/Grundbegriffe#dekorator","content":" Ein Dekorator ist ein Entwurfsmuster (Strukturmuster), mit dem eine Funktion, Methode oder Klasse zur Laufzeit verändert oder erweitert werden kann, ohne ihren eigentlichen Code zu ändern. Das Muster stellt eine flexible Alternative zur Unterklassenbildung dar, um eine Klasse um zusätzliche Funktionalitäten zu erweitern.  In Python gibt es native Dekoratoren (@decorator), um Funktionen zu modifizieren.In C# nutzt man Attribute ([Attribute]) oder Wrapper-Klassen für ähnliche Funktionalität.  Ein Dekorator in Python # my_decorator nimmt eine Funktion (func) als Argument # der wrapper führt zusätzlichen Code vor und nach der Funktion aus # @my_decorator wendet die Modifikation auf say_hello() an def my_decorator(func): def wrapper(): print(&quot;Vor der Funktion&quot;) func() print(&quot;Nach der Funktion&quot;) return wrapper @my_decorator # Das ist der Dekorator def say_hello(): print(&quot;Hallo!&quot;) say_hello()  ","version":"Next","tagName":"h3"},{"title":"Python","type":0,"sectionRef":"#","url":"/my-documentation/docs/Resourcen/Quick-References/Python-quickref","content":"","keywords":"","version":"Next"},{"title":"Python Cheat Sheets​","type":1,"pageTitle":"Python","url":"/my-documentation/docs/Resourcen/Quick-References/Python-quickref#python-cheat-sheets","content":" Comprehensive Python Cheatsheet  ","version":"Next","tagName":"h2"},{"title":"Methods​","type":1,"pageTitle":"Python","url":"/my-documentation/docs/Resourcen/Quick-References/Python-quickref#methods","content":" ","version":"Next","tagName":"h2"},{"title":"String Methods​","type":1,"pageTitle":"Python","url":"/my-documentation/docs/Resourcen/Quick-References/Python-quickref#string-methods","content":" Note: All string methods returns new values. They do not change the original string.  &lt;str&gt; = &lt;str&gt;.strip() # Strips all whitespace characters from both ends. &lt;str&gt; = &lt;str&gt;.strip('&lt;chars&gt;') # Strips passed characters. Also lstrip/rstrip(). &lt;list&gt; = &lt;str&gt;.split() # Splits on one or more whitespace characters. &lt;list&gt; = &lt;str&gt;.split(sep=None, maxsplit=-1) # Splits on 'sep' str at most 'maxsplit' times. &lt;list&gt; = &lt;str&gt;.splitlines(keepends=False) # On [\\n\\r\\f\\v\\x1c-\\x1e\\x85\\u2028\\u2029] and \\r\\n. &lt;str&gt; = &lt;str&gt;.join(&lt;coll_of_strings&gt;) # Joins elements using string as a separator. &lt;bool&gt; = &lt;sub_str&gt; in &lt;str&gt; # Checks if string contains the substring. &lt;bool&gt; = &lt;str&gt;.startswith(&lt;sub_str&gt;) # Pass tuple of strings for multiple options. &lt;int&gt; = &lt;str&gt;.find(&lt;sub_str&gt;) # Returns start index of the first match or -1. &lt;int&gt; = &lt;str&gt;.index(&lt;sub_str&gt;) # Same, but raises ValueError if there's no match. &lt;str&gt; = &lt;str&gt;.lower() # Changes the case. Also upper/capitalize/title(). &lt;str&gt; = &lt;str&gt;.replace(old, new [, count]) # Replaces 'old' with 'new' at most 'count' times. &lt;str&gt; = &lt;str&gt;.translate(&lt;table&gt;) # Use `str.maketrans(&lt;dict&gt;)` to generate table. &lt;str&gt; = chr(&lt;int&gt;) # Converts int to Unicode character. &lt;int&gt; = ord(&lt;str&gt;) # Converts Unicode character to int.   Property Methods​  &lt;bool&gt; = &lt;str&gt;.isdecimal() # Checks for [0-9]. Also [०-९] and [٠-٩]. &lt;bool&gt; = &lt;str&gt;.isdigit() # Checks for [²³¹…] and isdecimal(). &lt;bool&gt; = &lt;str&gt;.isnumeric() # Checks for [¼½¾…], [零〇一…] and isdigit(). &lt;bool&gt; = &lt;str&gt;.isalnum() # Checks for [a-zA-Z…] and isnumeric(). &lt;bool&gt; = &lt;str&gt;.isprintable() # Checks for [ !#$%…] and isalnum(). &lt;bool&gt; = &lt;str&gt;.isspace() # Checks for [ \\t\\n\\r\\f\\v\\x1c-\\x1f\\x85\\xa0…].   Regex​  import re &lt;str&gt; = re.sub(r'&lt;regex&gt;', new, text, count=0) # Substitutes all occurrences with 'new'. &lt;list&gt; = re.findall(r'&lt;regex&gt;', text) # Returns all occurrences as strings. &lt;list&gt; = re.split(r'&lt;regex&gt;', text, maxsplit=0) # Add brackets around regex to keep matches. &lt;Match&gt; = re.search(r'&lt;regex&gt;', text) # First occurrence of the pattern or None. &lt;Match&gt; = re.match(r'&lt;regex&gt;', text) # Searches only at the beginning of the text. &lt;iter&gt; = re.finditer(r'&lt;regex&gt;', text) # Returns all occurrences as Match objects.   Match Object  &lt;str&gt; = &lt;Match&gt;.group() # Returns the whole match. Also group(0). &lt;str&gt; = &lt;Match&gt;.group(1) # Returns part inside the first brackets. &lt;tuple&gt; = &lt;Match&gt;.groups() # Returns all bracketed parts. &lt;int&gt; = &lt;Match&gt;.start() # Returns start index of the match. &lt;int&gt; = &lt;Match&gt;.end() # Returns exclusive end index of the match.   Special Sequences  '\\d' == '[0-9]' # Also [०-९…]. Matches a decimal character. '\\w' == '[a-zA-Z0-9_]' # Also [ª²³…]. Matches an alphanumeric or _. '\\s' == '[ \\t\\n\\r\\f\\v]' # Also [\\x1c-\\x1f…]. Matches a whitespace.   Method\tDescriptioncapitalize()\tConverts the first character to upper case casefold()\tConverts string into lower case center()\tReturns a centered string count()\tReturns the number of times a specified value occurs in a string encode()\tReturns an encoded version of the string endswith()\tReturns true if the string ends with the specified value expandtabs()\tSets the tab size of the string find()\tSearches the string for a specified value and returns the position of where it was found format()\tFormats specified values in a string format_map()\tFormats specified values in a string index()\tSearches the string for a specified value and returns the position of where it was found isalnum()\tReturns True if all characters in the string are alphanumeric isalpha()\tReturns True if all characters in the string are in the alphabet isascii()\tReturns True if all characters in the string are ascii characters isdecimal()\tReturns True if all characters in the string are decimals isdigit()\tReturns True if all characters in the string are digits isidentifier()\tReturns True if the string is an identifier islower()\tReturns True if all characters in the string are lower case isnumeric()\tReturns True if all characters in the string are numeric isprintable()\tReturns True if all characters in the string are printable isspace()\tReturns True if all characters in the string are whitespaces istitle()\tReturns True if the string follows the rules of a title isupper()\tReturns True if all characters in the string are upper case join()\tConverts the elements of an iterable into a string ljust()\tReturns a left justified version of the string lower()\tConverts a string into lower case lstrip()\tReturns a left trim version of the string maketrans()\tReturns a translation table to be used in translations partition()\tReturns a tuple where the string is parted into three parts replace()\tReturns a string where a specified value is replaced with a specified value rfind()\tSearches the string for a specified value and returns the last position of where it was found rindex()\tSearches the string for a specified value and returns the last position of where it was found rjust()\tReturns a right justified version of the string rpartition()\tReturns a tuple where the string is parted into three parts rsplit()\tSplits the string at the specified separator, and returns a list rstrip()\tReturns a right trim version of the string split()\tSplits the string at the specified separator, and returns a list splitlines()\tSplits the string at line breaks and returns a list startswith()\tReturns true if the string starts with the specified value strip()\tReturns a trimmed version of the string swapcase()\tSwaps cases, lower case becomes upper case and vice versa title()\tConverts the first character of each word to upper case translate()\tReturns a translated string upper()\tConverts a string into upper case zfill()\tFills the string with a specified number of 0 values at the beginning  ","version":"Next","tagName":"h3"},{"title":"List Methods​","type":1,"pageTitle":"Python","url":"/my-documentation/docs/Resourcen/Quick-References/Python-quickref#list-methods","content":" Method\tDescriptionappend()\tAdds an element at the end of the list clear()\tRemoves all the elements from the list copy()\tReturns a copy of the list count()\tReturns the number of elements with the specified value extend()\tAdd the elements of a list (or any iterable), to the end of the current list index()\tReturns the index of the first element with the specified value insert()\tAdds an element at the specified position pop()\tRemoves the element at the specified position remove()\tRemoves the first item with the specified value reverse()\tReverses the order of the list sort()\tSorts the list  ","version":"Next","tagName":"h3"},{"title":"Dictionary Methods​","type":1,"pageTitle":"Python","url":"/my-documentation/docs/Resourcen/Quick-References/Python-quickref#dictionary-methods","content":" Method\tDescriptionclear()\tRemoves all the elements from the dictionary copy()\tReturns a copy of the dictionary fromkeys()\tReturns a dictionary with the specified keys and value get()\tReturns the value of the specified key items()\tReturns a list containing a tuple for each key value pair keys()\tReturns a list containing the dictionary's keys pop()\tRemoves the element with the specified key popitem()\tRemoves the last inserted key-value pair setdefault()\tReturns the value of the specified key. If the key does not exist: insert the key, with the specified value update()\tUpdates the dictionary with the specified key-value pairs values()\tReturns a list of all the values in the dictionary  ","version":"Next","tagName":"h3"},{"title":"Tuple Methods​","type":1,"pageTitle":"Python","url":"/my-documentation/docs/Resourcen/Quick-References/Python-quickref#tuple-methods","content":" Method\tDescriptioncount()\tReturns the number of times a specified value occurs in a tuple index()\tSearches the tuple for a specified value and returns the position of where it was found  ","version":"Next","tagName":"h3"},{"title":"Set Methods​","type":1,"pageTitle":"Python","url":"/my-documentation/docs/Resourcen/Quick-References/Python-quickref#set-methods","content":" Method\tShortcut\tDescriptionadd() Adds an element to the set clear() Removes all the elements from the set copy() Returns a copy of the set difference()\t-\tReturns a set containing the difference between two or more sets difference_update()\t-=\tRemoves the items in this set that are also included in another, specified set discard() Remove the specified item intersection()\t&amp;\tReturns a set, that is the intersection of two other sets intersection_update()\t&amp;=\tRemoves the items in this set that are not present in other, specified set(s) isdisjoint() Returns whether two sets have a intersection or not issubset()\t&lt;=\tReturns whether another set contains this set or not &lt;\tReturns whether all items in this set is present in other, specified set(s) issuperset()\t&gt;=\tReturns whether this set contains another set or not &gt;\tReturns whether all items in other, specified set(s) is present in this set pop() Removes an element from the set remove() Removes the specified element symmetric_difference()\t^\tReturns a set with the symmetric differences of two sets symmetric_difference_update()\t^=\tInserts the symmetric differences from this set and another union()\t|\tReturn a set containing the union of sets update()\t|=\tUpdate the set with the union of this set and others  ","version":"Next","tagName":"h3"},{"title":"File Methods​","type":1,"pageTitle":"Python","url":"/my-documentation/docs/Resourcen/Quick-References/Python-quickref#file-methods","content":" Method\tDescriptionclose()\tCloses the file detach()\tReturns the separated raw stream from the buffer fileno()\tReturns a number that represents the stream, from the operating system's perspective flush()\tFlushes the internal buffer isatty()\tReturns whether the file stream is interactive or not read()\tReturns the file content readable()\tReturns whether the file stream can be read or not readline()\tReturns one line from the file readlines()\tReturns a list of lines from the file seek()\tChange the file position seekable()\tReturns whether the file allows us to change the file position tell()\tReturns the current file position truncate()\tResizes the file to a specified size writable()\tReturns whether the file can be written to or not write()\tWrites the specified string to the file writelines()\tWrites a list of strings to the file  ","version":"Next","tagName":"h3"},{"title":"Common Operations​","type":1,"pageTitle":"Python","url":"/my-documentation/docs/Resourcen/Quick-References/Python-quickref#common-operations","content":" ","version":"Next","tagName":"h2"},{"title":"F-Strings​","type":1,"pageTitle":"Python","url":"/my-documentation/docs/Resourcen/Quick-References/Python-quickref#f-strings","content":"   Syntax​  Ein F-String wird mit einem vorangestellten f oder F gekennzeichnet und enthält Ausdrücke in geschweiften Klammern {}, die zur Laufzeit ausgewertet werden.  &lt;str&gt; = f'{&lt;el_1&gt;}, {&lt;el_2&gt;}' # Curly brackets can also contain expressions. &lt;str&gt; = '{}, {}'.format(&lt;el_1&gt;, &lt;el_2&gt;) # Or: '{0}, {a}'.format(&lt;el_1&gt;, a=&lt;el_2&gt;)   format_spec\tfill | align | sign | width | grouping_option | &quot;.&quot;precision | typefill\tany character align\t&quot;&lt;&quot; | &quot;&gt;&quot; | &quot;=&quot; | &quot;^&quot; sign\t&quot;+&quot; | &quot;-&quot; | &quot; &quot; width\tdigit+ grouping_option\t&quot;_&quot; | &quot;,&quot; precision\tdigit+ type\t&quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;E&quot; | &quot;f&quot; | &quot;F&quot; | &quot;g&quot; | &quot;G&quot; | &quot;n&quot; | &quot;o&quot; | &quot;s&quot; | &quot;x&quot; | &quot;X&quot; | &quot;%&quot;  Alignment​  Option\tMeaning'&lt;'\tForces the field to be left-aligned within the available space (this is the default for most objects). '&gt;'\tForces the field to be right-aligned within the available space (this is the default for numbers). '='\tForces the padding to be placed after the sign (if any) but before the digits. This is used for printing fields in the form ‘+000000120’. This alignment option is only valid for numeric types. It becomes the default for numbers when ‘0’ immediately precedes the field width. '^'\tForces the field to be centered within the available space.  Integer Presentation Types​  Type\tMeaning'b'\tBinary format. Outputs the number in base 2. 'c'\tCharacter. Converts the integer to the corresponding unicode character before printing. 'd'\tDecimal Integer. Outputs the number in base 10. 'o'\tOctal format. Outputs the number in base 8. 'x'\tHex format. Outputs the number in base 16, using lower-case letters for the digits above 9. 'X'\tHex format. Outputs the number in base 16, using upper-case letters for the digits above 9. In case '#' is specified, the prefix '0x' will be upper-cased to '0X' as well. 'n'\tNumber. This is the same as 'd', except that it uses the current locale setting to insert the appropriate number separator characters. None\tThe same as 'd'.  Floating Point Presentation Types​  Type\tMeaning'e'\tScientific notation. For a given precision p, formats the number in scientific notation with the letter ‘e’ separating the coefficient from the exponent. The coefficient has one digit before and p digits after the decimal point, for a total of p + 1 significant digits. With no precision given, uses a precision of 6 digits after the decimal point for float, and shows all coefficient digits for Decimal. If no digits follow the decimal point, the decimal point is also removed unless the # option is used. 'E'\tScientific notation. Same as 'e' except it uses an upper case ‘E’ as the separator character. 'f'\tFixed-point notation. For a given precision p, formats the number as a decimal number with exactly p digits following the decimal point. With no precision given, uses a precision of 6 digits after the decimal point for float, and uses a precision large enough to show all coefficient digits for Decimal. If no digits follow the decimal point, the decimal point is also removed unless the # option is 'F'\tFixed-point notation. Same as 'f', but converts nan to NAN and inf to INF. 'g'\tGeneral format. For a given precision p &gt;= 1, this rounds the number to p significant digits and then formats the result in either fixed-point format or in scientific notation, depending on its magnitude. A precision of 0 is treated as equivalent to a precision of 1.The precise rules are as follows: suppose that the result formatted with presentation type 'e' and precision p-1 would have exponent exp. Then, if m &lt;= exp &lt; p, where m is -4 for floats and -6 for Decimals, the number is formatted with presentation type 'f' and precision p-1-exp. Otherwise, the number is formatted with presentation type 'e' and precision p-1. In both cases insignificant trailing zeros are removed from the significand, and the decimal point is also removed if there are no remaining digits following it, unless the '#' option is used.With no precision given, uses a precision of 6 significant digits for float. For Decimal, the coefficient of the result is formed from the coefficient digits of the value; scientific notation is used for values smaller than 1e-6 in absolute value and values where the place value of the least significant digit is larger than 1, and fixed-point notation is used otherwise.Positive and negative infinity, positive and negative zero, and nans, are formatted as inf, -inf, 0, -0 and nan respectively, regardless of the precision. 'G'\tGeneral format. Same as 'g' except switches to 'E' if the number gets too large. The representations of infinity and NaN are uppercased, too. 'n'\tNumber. This is the same as 'g', except that it uses the current locale setting to insert the appropriate number separator characters. '%'\tPercentage. Multiplies the number by 100 and displays in fixed ('f') format, followed by a percent sign. None\tFor float this is the same as 'g', except that when fixed-point notation is used to format the result, it always includes at least one digit past the decimal point. The precision used is as large as needed to represent the given value faithfully.For Decimal, this is the same as either 'g' or 'G' depending on the value of context.capitals for the current decimal context.The overall effect is to match the output of str() as altered by the other format modifiers.  F-String Examples​  &gt;&gt;&gt; Person = collections.namedtuple('Person', 'name height') &gt;&gt;&gt; person = Person('Jean-Luc', 187) &gt;&gt;&gt; f'{person.name} is {person.height / 100} meters tall.' 'Jean-Luc is 1.87 meters tall.' # General Options {&lt;el&gt;:&lt;10} # '&lt;el&gt; ' {&lt;el&gt;:^10} # ' &lt;el&gt; ' {&lt;el&gt;:&gt;10} # ' &lt;el&gt;' {&lt;el&gt;:.&lt;10} # '&lt;el&gt;......' {&lt;el&gt;:0} # '&lt;el&gt;' # Strings {'abcde':10} # 'abcde ' {'abcde':10.3} # 'abc ' {'abcde':.3} # 'abc' {'abcde'!r:10} # &quot;'abcde' &quot; # Numbers {123456:10} # ' 123456' {123456:10,} # ' 123,456' {123456:10_} # ' 123_456' {123456:+10} # ' +123456' {123456:=+10} # '+ 123456' {123456: } # ' 123456' {-123456: } # '-123456' # Floats {1.23456:10.3} # ' 1.23' {1.23456:10.3f} # ' 1.235' {1.23456:10.3e} # ' 1.235e+00' {1.23456:10.3%} # ' 123.456%'   More Examples &gt;&gt;&gt; name = &quot;Fred&quot; &gt;&gt;&gt; f&quot;He said his name is {name!r}.&quot; &quot;He said his name is 'Fred'.&quot; &gt;&gt;&gt; f&quot;He said his name is {repr(name)}.&quot; # repr() is equivalent to !r &quot;He said his name is 'Fred'.&quot; &gt;&gt;&gt; width = 10 &gt;&gt;&gt; precision = 4 &gt;&gt;&gt; value = decimal.Decimal(&quot;12.34567&quot;) &gt;&gt;&gt; f&quot;result: {value:{width}.{precision}}&quot; # nested fields 'result: 12.35' &gt;&gt;&gt; today = datetime(year=2017, month=1, day=27) &gt;&gt;&gt; f&quot;{today:%B %d, %Y}&quot; # using date format specifier 'January 27, 2017' &gt;&gt;&gt; f&quot;{today=:%B %d, %Y}&quot; # using date format specifier and debugging 'today=January 27, 2017' &gt;&gt;&gt; number = 1024 &gt;&gt;&gt; f&quot;{number:#0x}&quot; # using integer format specifier '0x400' &gt;&gt;&gt; foo = &quot;bar&quot; &gt;&gt;&gt; f&quot;{ foo = }&quot; # preserves whitespace &quot; foo = 'bar'&quot; &gt;&gt;&gt; line = &quot;The mill's closed&quot; &gt;&gt;&gt; f&quot;{line = }&quot; 'line = &quot;The mill\\'s closed&quot;' &gt;&gt;&gt; f&quot;{line = :20}&quot; &quot;line = The mill's closed &quot; &gt;&gt;&gt; f&quot;{line = !r:20}&quot; 'line = &quot;The mill\\'s closed&quot; '   ","version":"Next","tagName":"h3"},{"title":"Numeric Type​","type":1,"pageTitle":"Python","url":"/my-documentation/docs/Resourcen/Quick-References/Python-quickref#numeric-type","content":"   All numeric types (except complex) support the following operations (for priorities of the operations, see Operator precedence):  Operation\tResultx + y\tsum of x and y x - y\tdifference of x and y x * y\tproduct of x and y x / y\tquotient of x and y x // y\tfloored quotient of x and y x % y\tremainder of x / y -x\tx negated +x\tx unchanged abs(x)\tabsolute value or magnitude of x int(x)\tx converted to integer float(x)\tx converted to floating point complex(re, im)\ta complex number with real part re, imaginary part im. im defaults to zero. c.conjugate()\tconjugate of the complex number c divmod(x, y)\tthe pair (x // y, x % y) pow(x, y)\tx to the power y x ** y\tx to the power y  Operation\tResultmath.trunc(x)\tx truncated to Integral round(x[, n])\tx rounded to n digits, rounding half to even. If n is omitted, it defaults to 0. math.floor(x)\tthe greatest Integral &lt;= _x_ math.ceil(x)\tthe least Integral &gt;= _x_  # Basic Functions &lt;num&gt; = pow(&lt;num&gt;, &lt;num&gt;) # Or: &lt;number&gt; ** &lt;number&gt; &lt;num&gt; = abs(&lt;num&gt;) # &lt;float&gt; = abs(&lt;complex&gt;) &lt;num&gt; = round(&lt;num&gt; [, ±ndigits]) # `round(126, -1) == 130` # Math from math import e, pi, inf, nan, isinf, isnan # `&lt;el&gt; == nan` is always False. from math import sin, cos, tan, asin, acos, atan # Also: degrees, radians. from math import log, log10, log2 # Log can accept base as second arg. # Statistics from statistics import mean, median, variance # Also: stdev, quantiles, groupby. # Random from random import random, randint, choice # Also: shuffle, gauss, triangular, seed. &lt;float&gt; = random() # A float inside [0, 1). &lt;int&gt; = randint(from_inc, to_inc) # An int inside [from_inc, to_inc]. &lt;el&gt; = choice(&lt;sequence&gt;) # Keeps the sequence intact. # Bin, Hex &lt;int&gt; = ±0b&lt;bin&gt; # Or: ±0x&lt;hex&gt; &lt;int&gt; = int('±&lt;bin&gt;', 2) # Or: int('±&lt;hex&gt;', 16) &lt;int&gt; = int('±0b&lt;bin&gt;', 0) # Or: int('±0x&lt;hex&gt;', 0) &lt;str&gt; = bin(&lt;int&gt;) # Returns '[-]0b&lt;bin&gt;'. Also hex().   ","version":"Next","tagName":"h3"},{"title":"Bitwise Operations​","type":1,"pageTitle":"Python","url":"/my-documentation/docs/Resourcen/Quick-References/Python-quickref#bitwise-operations","content":"   Operation\tResultx | y\tbitwise or of x and y x ^ y\tbitwise exclusive or of x and y x &amp; y\tbitwise and of x and y x &lt;&lt; n\tx shifted left by n bits x &gt;&gt; n\tx shifted right by n bits ~x\tthe bits of x inverted  ","version":"Next","tagName":"h3"},{"title":"Sequence (list, tuple, range)​","type":1,"pageTitle":"Python","url":"/my-documentation/docs/Resourcen/Quick-References/Python-quickref#sequence-list-tuple-range","content":"   Operation\tResultx in s\tTrue if an item of s is equal to x, else False x not in s\tFalse if an item of s is equal to x, else True s + t\tthe concatenation of s and t s * n or n * s\tequivalent to adding s to itself n times s[i]\t_i_th item of s, origin 0 s[i:j]\tslice of s from i to j s[i:j:k]\tslice of s from i to j with step k len(s)\tlength of s min(s)\tsmallest item of s max(s)\tlargest item of s s.index(x[, i[, j]])\tindex of the first occurrence of x in s (at or after index i and before index j) s.count(x)\ttotal number of occurrences of x in s  ","version":"Next","tagName":"h3"},{"title":"Mutable Sequence (list)​","type":1,"pageTitle":"Python","url":"/my-documentation/docs/Resourcen/Quick-References/Python-quickref#mutable-sequence-list","content":"   Operation\tResults[i] = x\titem i of s is replaced by x s[i:j] = t\tslice of s from i to j is replaced by the contents of the iterable t del s[i:j]\tsame as s[i:j] = [] s[i:j:k] = t\tthe elements of s[i:j:k] are replaced by those of t del s[i:j:k]\tremoves the elements of s[i:j:k] from the list s.append(x)\tappends x to the end of the sequence (same as s[len(s):len(s)] = [x]) s.clear()\tremoves all items from s (same as del s[:]) s.copy()\tcreates a shallow copy of s (same as s[:]) s.extend(t) or s += t\textends s with the contents of t (for the most part the same as s[len(s):len(s)] = t) s *= n\tupdates s with its contents repeated n times s.insert(i, x)\tinserts x into s at the index given by i (same as s[i:i] = [x]) s.pop() or s.pop(i)\tretrieves the item at i and also removes it from s s.remove(x)\tremove the first item from s where s[i] is equal to x s.reverse()\treverses the items of s in place  ","version":"Next","tagName":"h3"},{"title":"Built-In Functions​","type":1,"pageTitle":"Python","url":"/my-documentation/docs/Resourcen/Quick-References/Python-quickref#built-in-functions","content":" Function\tDescriptionabs()\tReturns the absolute value of a number all()\tReturns True if all items in an iterable object are true any()\tReturns True if any item in an iterable object is true ascii()\tReturns a readable version of an object. Replaces none-ascii characters with escape character bin()\tReturns the binary version of a number bool()\tReturns the boolean value of the specified object bytearray()\tReturns an array of bytes bytes()\tReturns a bytes object callable()\tReturns True if the specified object is callable, otherwise False chr()\tReturns a character from the specified Unicode code. classmethod()\tConverts a method into a class method compile()\tReturns the specified source as an object, ready to be executed complex()\tReturns a complex number delattr()\tDeletes the specified attribute (property or method) from the specified object dict()\tReturns a dictionary (Array) dir()\tReturns a list of the specified object's properties and methods divmod()\tReturns the quotient and the remainder when argument1 is divided by argument2 enumerate()\tTakes a collection (e.g. a tuple) and returns it as an enumerate object eval()\tEvaluates and executes an expression exec()\tExecutes the specified code (or object) filter()\tUse a filter function to exclude items in an iterable object float()\tReturns a floating point number format()\tFormats a specified value frozenset()\tReturns a frozenset object getattr()\tReturns the value of the specified attribute (property or method) globals()\tReturns the current global symbol table as a dictionary hasattr()\tReturns True if the specified object has the specified attribute (property/method) hash()\tReturns the hash value of a specified object help()\tExecutes the built-in help system hex()\tConverts a number into a hexadecimal value id()\tReturns the id of an object input()\tAllowing user input int()\tReturns an integer number isinstance()\tReturns True if a specified object is an instance of a specified object issubclass()\tReturns True if a specified class is a subclass of a specified object iter()\tReturns an iterator object len()\tReturns the length of an object list()\tReturns a list locals()\tReturns an updated dictionary of the current local symbol table map()\tReturns the specified iterator with the specified function applied to each item max()\tReturns the largest item in an iterable memoryview()\tReturns a memory view object min()\tReturns the smallest item in an iterable next()\tReturns the next item in an iterable object()\tReturns a new object oct()\tConverts a number into an octal open()\tOpens a file and returns a file object ord()\tConvert an integer representing the Unicode of the specified character pow()\tReturns the value of x to the power of y print()\tPrints to the standard output device property()\tGets, sets, deletes a property range()\tReturns a sequence of numbers, starting from 0 and increments by 1 (by default) repr()\tReturns a readable version of an object reversed()\tReturns a reversed iterator round()\tRounds a numbers set()\tReturns a new set object setattr()\tSets an attribute (property/method) of an object slice()\tReturns a slice object sorted()\tReturns a sorted list staticmethod()\tConverts a method into a static method str()\tReturns a string object sum()\tSums the items of an iterator super()\tReturns an object that represents the parent class tuple()\tReturns a tuple type()\tReturns the type of an object vars()\tReturns the dict property of an object zip()\tReturns an iterator, from two or more iterators  ","version":"Next","tagName":"h2"},{"title":"Keywords​","type":1,"pageTitle":"Python","url":"/my-documentation/docs/Resourcen/Quick-References/Python-quickref#keywords","content":" Python has a set of keywords that are reserved words that cannot be used as variable names, function names, or any other identifiers:  Keyword\tDescriptionand\tA logical operator as\tTo create an alias assert\tFor debugging break\tTo break out of a loop class\tTo define a class continue\tTo continue to the next iteration of a loop def\tTo define a function del\tTo delete an object elif\tUsed in conditional statements, same as else if else\tUsed in conditional statements except\tUsed with exceptions, what to do when an exception occurs False\tBoolean value, result of comparison operations finally\tUsed with exceptions, a block of code that will be executed no matter if there is an exception or not for\tTo create a for loop from\tTo import specific parts of a module global\tTo declare a global variable if\tTo make a conditional statement import\tTo import a module in\tTo check if a value is present in a list, tuple, etc. is\tTo test if two variables are equal lambda\tTo create an anonymous function None\tRepresents a null value nonlocal\tTo declare a non-local variable not\tA logical operator or\tA logical operator pass\tA null statement, a statement that will do nothing raise\tTo raise an exception return\tTo exit a function and return a value True\tBoolean value, result of comparison operations try\tTo make a try...except statement while\tTo create a while loop with\tUsed to simplify exception handling yield\tTo return a list of values from a generator  ","version":"Next","tagName":"h2"},{"title":"Exceptions​","type":1,"pageTitle":"Python","url":"/my-documentation/docs/Resourcen/Quick-References/Python-quickref#exceptions","content":" Exception\tDescriptionArithmeticError\tRaised when an error occurs in numeric calculations AssertionError\tRaised when an assert statement fails AttributeError\tRaised when attribute reference or assignment fails Exception\tBase class for all exceptions EOFError\tRaised when the input() method hits an &quot;end of file&quot; condition (EOF) FloatingPointError\tRaised when a floating point calculation fails GeneratorExit\tRaised when a generator is closed (with the close() method) ImportError\tRaised when an imported module does not exist IndentationError\tRaised when indentation is not correct IndexError\tRaised when an index of a sequence does not exist KeyError\tRaised when a key does not exist in a dictionary KeyboardInterrupt\tRaised when the user presses Ctrl+c, Ctrl+z or Delete LookupError\tRaised when errors raised cant be found MemoryError\tRaised when a program runs out of memory NameError\tRaised when a variable does not exist NotImplementedError\tRaised when an abstract method requires an inherited class to override the method OSError\tRaised when a system related operation causes an error OverflowError\tRaised when the result of a numeric calculation is too large ReferenceError\tRaised when a weak reference object does not exist RuntimeError\tRaised when an error occurs that do not belong to any specific exceptions StopIteration\tRaised when the next() method of an iterator has no further values SyntaxError\tRaised when a syntax error occurs TabError\tRaised when indentation consists of tabs or spaces SystemError\tRaised when a system error occurs SystemExit\tRaised when the sys.exit() function is called TypeError\tRaised when two different types are combined UnboundLocalError\tRaised when a local variable is referenced before assignment UnicodeError\tRaised when a unicode problem occurs UnicodeEncodeError\tRaised when a unicode encoding problem occurs UnicodeDecodeError\tRaised when a unicode decoding problem occurs UnicodeTranslateError\tRaised when a unicode translation problem occurs ValueError\tRaised when there is a wrong value in a specified data type ZeroDivisionError\tRaised when the second operator in a division is zero  ","version":"Next","tagName":"h2"},{"title":"Glossary​","type":1,"pageTitle":"Python","url":"/my-documentation/docs/Resourcen/Quick-References/Python-quickref#glossary","content":" Feature\tDescription**kwargs\tTo deal with an unknown number of keyword arguments in a function, use the * symbol before the parameter name *args\tTo deal with an unknown number of arguments in a function, use the * symbol before the parameter name Access Arrays\tHow to access array items Access Dictionary Items\tHow to access items in a dictionary Access List Items\tHow to access items in a list Access Set Items\tHow to access items in a set Access Tuple Items\tHow to access items in a tuple Add Array Element\tHow to add elements from an array Add Class Methods\tHow to add a method to a class Add Class Properties\tHow to add a property to a class Add Dictionary Item\tHow to add an item to a dictionary Add List Items\tHow to add items to a list Add Set Items\tHow to add items to a set Arithmetic Operators\tArithmetic operator are used to perform common mathematical operations Array\tLists can be used as Arrays Array Length\tHow to get the length of an array Array Methods\tPython has a set of Array/Lists methods Assign Values to Multiple Variables\tHow to assign values to multiple variables Assigning a String to a Variable\tHow to assign a string value to a variable Assignment Operators\tAssignment operators are use to assign values to variables Bitwise Operators\tBitwise operators are used to compare (binary) numbers Boolean Values\tTrue or False Built-In Data Types\tPython has a set of built-in data types Built-in Modules\tHow to import built-in modules Call a Function\tHow to call a function in Python Change Dictionary Item\tHow to change the value of a dictionary item Change List Item\tHow to change the value of a list item Change Tuple Item\tHow to change the value of a tuple item Check if Dictionary Item Exists\tHow to check if a specified item is present in a dictionary Check if List Item Exists\tHow to check if a specified item is present in a list Check if Set Item Exists\tHow to check if a item exists Check if Tuple Item Exists\tHow to check if a specified item is present in a tuple Check In String\tHow to check if a string contains a specified phrase Class\tA class is like an object constructor Class pass Statement\tUse the pass statement in empty classes Comments\tComments are code lines that will not be executed Comparison Operators\tComparison operators are used to compare two values Complex\tThe complex number type Convert into JSON\tHow to convert a Python object in to JSON Copy a List\tHow to copy a list Copy Dictionary\tHow to copy a dictionary Create a Date Object\tHow to create a date object Create a Module\tHow to create a module Create an Iterator\tHow to create an iterator Create Child Class\tHow to create a child class Create Class\tHow to create a class Create Parent Class\tHow to create a parent class Create the init() Function\tHow to create the init() function Creating Variables\tVariables are containers for storing data values Date Format Codes\tThe datetime module has a set of legal format codes Date Output\tHow to output a date Datetime Module\tHow to work with dates in Python Default Parameter Value\tHow to use a default parameter value Delete Object\tHow to delete an object Delete Object Properties\tHow to modify properties of an object Dictionary\tA dictionary is an unordered, and changeable, collection Dictionary Length\tHow to determine the length of a dictionary Elif\telif is the same as &quot;else if&quot; in other programming languages Else\tHow to write an if...else statement Error Handling\tHow to handle errors in Python Escape Characters\tHow to use escape characters Evaluate Booleans\tEvaluate a value or statement and return either True or False Float\tThe floating number type For\tHow to write a for loop For Break\tHow to break a for loop For Continue\tHow to stop the current iteration and continue wit the next For Else\tHow to use an else statement in a for loop For pass\tUse the pass keyword inside empty for loops Format JSON\tHow to format JSON output with indentations and line breaks Format String\tHow to combine two strings Function\tHow to create a function in Python Function Arguments\tHow to use arguments in a function Function Recursion\tFunctions that can call itself is called recursive functions Function Return Value\tHow to return a value from a function Getting Data Type\tHow to get the data type of an object Global Keyword\tThe global keyword makes the variable global Global Scope\tWhen does a variable belong to the global scope? Global Variables\tGlobal variables are variables that belongs to the global scope Handle Many Exceptions\tHow to handle more than one exception Identity Operators\tIdentity operators are used to see if two objects are in fact the same object If AND\tUse the and keyword to combine if statements If Indentation\tIf statements in Python relies on indentation (whitespace at the beginning of a line) If NOT\tUse the not keyword to reverse the condition If OR\tUse the or keyword to combine if statements If Statement\tHow to write an if statement Import From Module\tHow to import only parts from a module Indentation\tIndentation refers to the spaces at the beginning of a code line Install PIP\tHow to install PIP Int\tThe integer number type Iterator vs Iterable\tWhat is the difference between an iterator and an iterable Iterators\tAn iterator is an object that contains a countable number of values Join Two Lists\tHow to join two lists Join Two Sets\tHow to join two sets Join Two Tuples\tHow to join two tuples JSON\tHow to work with JSON in Python Keyword Arguments\tHow to use keyword arguments in a function Lambda Function\tHow to create anonymous functions in Python List Comprehension\tHow use a list comprehensive List Length\tHow to determine the length of a list Lists\tA list is an ordered, and changeable, collection Logical Operators\tLogical operators are used to combine conditional statements Loop Dictionary Items\tHow to loop through the items in a tuple Loop List Items\tHow to loop through the items in a tuple Loop Set Items\tHow to loop through the items in a set Loop Through a String\tHow to loop through a string Loop Through an Iterator\tHow to loop through the elements of an iterator Loop Through List Items\tHow to loop through the items in a list Looping Array Elements\tHow to loop through array elements Looping Through a range\tHow to loop through a range of values Membership Operators\tMembership operators are used to test is a sequence is present in an object Metacharacters in RegEx\tMetacharacters are characters with a special meaning Modify Object Properties\tHow to modify properties of an object Multiline Comments\tHow to insert comments on multiple lines Multiline Strings\tHow to create a multiline string Negative Indexing on a String\tHow to use negative indexing when accessing a string Nested Dictionaries\tA dictionary within a dictionary Nested If\tHow to write an if statement inside an if statement Nested Loops\tHow to write a loop inside a loop Numbers\tThere are three numeric types in Python Object Methods\tMethods in objects are functions that belongs to the object Operators\tUse operator to perform operations in Python Output Variables\tUse the print statement to output variables Parse JSON\tHow to parse JSON code in Python Passing a List as an Argument\tHow to pass a list as an argument PIP Packages\tHow to download and install a package with PIP PIP Remove Package\tHow to remove a package with PIP raise\tHow to raise an exception in Python Random Number\tHow to create a random number RegEx Functions\tThe re module has a set of functions RegEx Match Object\tThe Match Object is an object containing information about the search and the result RegEx Module\tHow to import the regex module RegEx Sets\tA set is a set of characters inside a pair of square brackets with a special meaning RegEx Special Sequences\tA backslash followed by a a character has a special meaning Remove Array Element\tHow to remove elements from an array Remove Dictionary Items\tHow to remove dictionary items Remove List Items\tHow to remove list items Remove Set Items\tHow to remove set items Remove Tuple Items\tHow to remove tuple items Renaming a Module\tHow to rename a module Return Boolean Value\tFunctions that return a Boolean value self\tThe self parameter refers to the current instance of the class Set\tA set is an unordered, and unchangeable, collection Set Length\tHow to determine the length of a set Setting Data Type\tHow to set the data type of an object Shorthand If\tHow to write an if statement in one line Shorthand If Else\tHow to write an if...else statement in one line Slicing a String\tHow to slice a string Sort JSON\tHow to sort JSON Specify a Variable Type\tHow to specify a certain data type for a variable StopIteration\tHow to stop an iterator String Concatenation\tHow to combine strings String Length\tHow to get the length of a string String Literals\tHow to create string literals Strings are Arrays\tStrings in Python are arrays of bytes representing Unicode characters super Function\tThe super() function make the child class inherit the parent class The Class init() Function\tThe init() function is executed when the class is initiated The pass Keyword in If\tUse the pass keyword inside empty if statements The pass Statement in Functions\tUse the pass statement in empty functions The strftime Method\tHow to format a date object into a readable string Try Else\tHow to use the else keyword in a try statement Try Finally\tHow to use the finally keyword in a try statement Tuple\tA tuple is an ordered, and unchangeable, collection Tuple Length\tHow to determine the length of a tuple Tuple With One Item\tHow to create a tuple with only one item Type Conversion\tHow to convert from one number type to another Using the dir() Function\tList all variable names and function names in a module Variable Names\tHow to name your variables Variables in Modules\tHow to use variables in a module What is an Array\tArrays are variables that can hold more than one value While\tHow to write a while loop While Break\tHow to break a while loop While Continue\tHow to stop the current iteration and continue wit the next While Else\tHow to use an else statement in a while loop Why Use Lambda Functions\tLearn when to use a lambda function or not ","version":"Next","tagName":"h2"},{"title":"C#","type":0,"sectionRef":"#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref","content":"","keywords":"","version":"Next"},{"title":"Types​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#types","content":" ","version":"Next","tagName":"h2"},{"title":"Value Types​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#value-types","content":" Docs Microsoft - Value Types  Direkt auf dem Stack gespeichert (schnell)Wert wird direkt kopiert, wenn zugewiesen (x = y → Kopie von y)Enthalten den tatsächlichen Wert, nicht eine Referenz.Kein null möglich, außer mit Nullable&lt;T&gt; (int?, double?, etc.)  Primitive Datentypen​  Alle primitiven Datentypen (int, double, etc.) sind Value Types, weil sie direkt auf dem Stack gespeichert werden.Nicht alle Value Types sind primitive Datentypen, weil struct, enum, DateTime oder Tuple&lt;T1, T2&gt; auch Value Types sind, aber keine primitiven Datentypen.  Kategorie\tBeispiele\tBeschreibungPrimitive Datentypen\tint, double, bool, char, byte, float, decimal, short, long, sbyte, ushort, uint, ulong\tBasieren direkt auf struct, haben vordefinierte Größen und keine eigene Logik. Value Types\tAlle primitiven Datentypen + enum, struct, Tuple&lt;T1, T2&gt;, bool, DateTime, decimal, TimeSpan\tWerttypen, die entweder primitive Typen oder benutzerdefinierte Strukturen (struct) sind.  Ganzzahlige Datentypen​  Microsoft Docs - Integral numeric Types  Bytes byte myUnsignedByte = 8; // Size: 8 bits | Range: 0 to 255 sbyte mySignedByte = -8; // Size: 8 bits | Range: -128 to +127   Unsigned Integers ushort myUnsignedShort = 16; // Size: 16 bits | Range: 0 to 65535 uint myUnsignedInt = 32; // Size: 32 bits | Range: 0 to 2^32-1 ulong myUnsignedLong = 64; // Size: 64 bits | Range: 0 to 2^64-1   Signed Integers short mySignedShort = 16; // Size: 16 bits | Range: -32768 to +32767 int mySignedInt = 32; // Size: 32 bits | Range: -2^31 to +2^31-1 long mySignedLong = -64; // Size: 64 bits | Range: -2^63 to +2^63-1   Gleitkommazahlen​  Microsoft Docs - Floating Point numeric Types  Floating-Point Types float myFloat = 3.14F; // Size: 32 bits | Range: 7 digits of precision double myDouble = 3.14D; // Size: 64 bits | Range: 15-16 digits of precision decimal myDecimal = 3.14M; // Size: 128 bits | Range: 28-29 digits of precision   tip float ist schnell, aber weniger genau.double ist der Standard für wissenschaftliche Berechnungen.decimal ist ideal für Geldbeträge, weil es präziser ist.  Char / Boolean​  Unicode Characters char myChar = 'a'; // Size: 16 bits | Range: Unicode character   Booleans bool myBool = true; // Size: 4 bits | Range: true or false   Tuples​  Microsoft Docs - Tuple types Available in C# 7.0 and later, the tuples feature provides concise syntax to group multiple data elements in a lightweight data structure.  Tuple Type (double, int) t1 = (4.5, 3); Console.WriteLine($&quot;Tuple with elements {t1.Item1} and {t1.Item2}.&quot;); // Output =&gt; Tuple with elements 4.5 and 3. (double Sum, int Count) t2 = (4.5, 3); Console.WriteLine($&quot;Sum of {t2.Count} elements is {t2.Sum}.&quot;); // Output =&gt; Sum of 2 elements is 7.5.   List of tuples List&lt;(int zahl, string name)&gt; list = new List&lt;(int zahl, string name)&gt;(); list.Add((1, &quot;str1&quot;)); list.Add((3, &quot;str2&quot;)); foreach ((int zahl, string name) in list) { Console.WriteLine(name + &quot;: &quot; + zahl); }   Enum​  Microsoft Docs - Enumeration Types Enums in C# sind eine Gruppe zusammengehöriger Konstanten.  using System; enum Wochentag { Montag, Dienstag, Mittwoch, Donnerstag, Freitag, Samstag, Sonntag } class Program { static void Main() { Wochentag heute = Wochentag.Mittwoch; Console.WriteLine($&quot;Heute ist {heute}.&quot;); if (heute == Wochentag.Samstag || heute == Wochentag.Sonntag) { Console.WriteLine(&quot;Es ist Wochenende!&quot;); } else { Console.WriteLine(&quot;Es ist ein Arbeitstag.&quot;); } } }   Struct​  Microsoft Docs - Structure Types Ein struct ist ein Werttyp in C#, der ähnlich wie eine Klasse (class) funktioniert, aber in vielen Fällen effizienter ist.  2D-KoordinatenFarbe (mit Auto-Properities) // Punkt speichert zwei Werte direkt im Stack → schneller als eine Klasse. // Strukturen sind perfekt für einfache Datencontainer. struct Punkt { public int X; public int Y; public Punkt(int x, int y) { X = x; Y = y; } public void Anzeigen() { Console.WriteLine($&quot;Punkt: ({X}, {Y})&quot;); } } class Program { static void Main() { Punkt p1 = new Punkt(10, 20); p1.Anzeigen(); // Ausgabe: Punkt: (10, 20) } }   Wann struct statt class?  Klein &amp; einfach → structMutable &amp; komplex → classVererbung notwendig? → classHäufige Änderungen der Daten? → classPerformance-kritisch? → struct  ","version":"Next","tagName":"h3"},{"title":"Reference Types​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#reference-types","content":" Werden auf dem Heap gespeichert, aber die Referenz darauf liegt im Stack.Speichern eine Referenz (Zeiger) auf die Daten, nicht den Wert selbst.Eine Zuweisung kopiert die Referenz, nicht die Daten (Änderungen wirken sich auf alle Referenzen aus).  Typ\tBeschreibungclass\tDefiniert komplexe Objekte mit Methoden und Eigenschaften. interface\tDefiniert ein Verhalten, das Klassen implementieren müssen. delegate\tReferenz auf eine Methode (wie ein Funktionszeiger). array\tSammlung von Elementen gleichen Typs mit fester Größe. string\tEine Zeichenkette (immutable, ändert sich nicht direkt).  String​  Microsoft Docs - Strings  string fooString = &quot;\\&quot;escape\\&quot; quotes and add \\n (new lines) and \\t (tabs)&quot;; Console.WriteLine(fooString); // You can access each character of the string with an indexer: char charFromString = fooString[1]; // =&gt; 'e' // Strings are immutable: you can't do fooString[1] = 'X'; // Compare strings with current culture, ignoring case string.Compare(fooString, &quot;x&quot;, StringComparison.CurrentCultureIgnoreCase); // Formatting, based on sprintf string fooFs = string.Format(&quot;Check Check, {0} {1}, {0} {1:0.0}&quot;, 1, 2); // Dates &amp; Formatting DateTime fooDate = DateTime.Now; Console.WriteLine(fooDate.ToString(&quot;hh:mm, dd MMM yyyy&quot;)); // String Interpolation string myName = &quot;Jane Doe&quot;; Console.WriteLine($&quot;My name is: {myName}. It is great to be here!&quot;); // String Builder StringBuilder sb = new StringBuilder(); sb.Append(&quot;Hello &quot;); sb.AppendLine(&quot;World!&quot;); Console.WriteLine(sb); // Verbatim String // You can use the @ symbol before a string literal to escape all characters in the string string path = &quot;C:\\\\Users\\\\User\\\\Desktop&quot;; string verbatimPath = @&quot;C:\\Users\\User\\Desktop&quot;; Console.WriteLine(path == verbatimPath); // =&gt; true // You can split a string over two lines with the @ symbol. To escape &quot; use &quot;&quot; string bazString = @&quot;Here's some stuff on a new line! &quot;&quot;Wow!&quot;&quot;, the masses cried&quot;; // Popular String Methods &amp; Properties string myText = &quot;some text&quot;; Console.WriteLine(myText.IndexOf('t')); // Outputs =&gt; 5 myText = myText.Insert(0, &quot;This is &quot;); Console.WriteLine(myText); // Outputs =&gt; &quot;This is some text&quot; myText = myText.Replace(&quot;This is&quot;, &quot;Here is&quot;); Console.WriteLine(myText); // Outputs =&gt; &quot;Here is some text&quot; if(myText.Contains(&quot;some&quot;)) Console.WriteLine(&quot;found&quot;); // Outputs &quot;found&quot; myText = myText.Remove(4); Console.WriteLine(myText); // Outputs &quot;Here&quot; myText = myText.Substring(2, 3); Console.WriteLine(myText); // Outputs &quot;re&quot;   Array​  Microsoft Docs - Array Class An array is a data structure that contains a number of variables that are accessed through computed indices. The variables contained in an array, also called the elements of the array, are all of the same type, and this type is called the element type of the array.  Array types are reference types, and the declaration of an array variable simply sets aside space for a reference to an array instance. Actual array instances are created dynamically at run-time using the new operator. The new operation specifies the length of the new array instance, which is then fixed for the lifetime of the instance. The indices of the elements of an array range from 0 to Length - 1. The new operator automatically initializes the elements of an array to their default value, which, for example, is zero for all numeric types and null for all reference types.  Array of simple Types int[] a1 = new int[10]; // One-Dimensional Array int[,] a2 = new int[10, 5]; // Two-Dimensional Array int[,,] a3 = new int[10, 5, 2]; // Three-Dimensional Array   Jagged Array An array with elements of an array type.  Jagged Array - Syntax data_type[][] name_of_array = new data_type[rows][]   Beispiel 1 int[][] jaggedArray = new int[3][]; // Jagged Array jaggedArray[0] = new int[10]; jaggedArray[1] = new int[5]; jaggedArray[2] = new int[20];   Beispiel 2 int[][] anotherJaggedArray = new int[][] // Another way to declare Jagged Arrays { new int[] {1,8,2,7,9}, new int[] {2,4,6}, new int[] {33,42} }; int x = anotherJaggedArray[2][1]; Console.WriteLine(x); // Outputs =&gt; 42   Array Properties &amp; Methods The Array class in C# provides various properties and methods to work with arrays. The Array class implements the IEnumerable interface, so you can LINQ extension methods such as Max(), Min(), Sum(), Average() and many others.  using System; using System.Linq; public class Program { public static void Main(string[] args) { int[] integersArray = new int[5]{80, 20, 35, 18, 9}; Console.WriteLine(integersArray.Max()); Console.WriteLine(integersArray.Min()); Console.WriteLine(integersArray.Sum()); Console.WriteLine(integersArray.Average()); } }   System.Array class Includes methods for creating, manipulating, searching, and sorting arrays.  using System; public class Program { public static void Main(string[] args) { int[] integersArray = {20, 9, 16, 50, 3}; Console.WriteLine(&quot;Original Array:&quot;); foreach(int element in integersArray) { Console.WriteLine(element); } Console.WriteLine(&quot;Sorted Array:&quot;); Array.Sort(integersArray); foreach(int element in integersArray) { Console.WriteLine(element); } Console.WriteLine(&quot;Reversed Array:&quot;); Array.Reverse(integersArray); Array.ForEach&lt;int&gt;(integersArray, n =&gt; Console.WriteLine(n)); Console.WriteLine(Array.BinarySearch(integersArray, 9)); } }   Class​  Eine Klasse dient als Bauplan für Objekte. Sie fasst Daten (Felder, Eigenschaften) und Verhalten (Methoden, Ereignisse) zusammen.  Einfache Klasse mit Konstruktor public class Person { // Felder bzw Attribute public string Name {get, private set}; public int Age {get, private set}; // Konstruktor public Person(string name, int age) { Name = name; Age = age; } // Greet()-Methode public void Greet() { Console.WriteLine($&quot;Hallo, mein Name ist {Name} und ich bin {Age} Jahre alt.&quot;); } } class Program { static void Main() { Person p = new Person(&quot;Max&quot;, 30); // Konstruktor wird aufgerufen p.Greet(); } }   Interface​  Ein Interface definiert einen Vertrag (Methoden, Eigenschaften etc.), den implementierende Klassen erfüllen müssen. Es ermöglicht lose Kopplung.  public interface IBeweglich { void Bewege(); } public class Auto : IBeweglich { public void Bewege() { Console.WriteLine(&quot;Das Auto fährt.&quot;); } } public class Fahrrad : IBeweglich { public void Bewege() { Console.WriteLine(&quot;Das Fahrrad rollt.&quot;); } } // Anwendung: IBeweglich fahrzeug = new Auto(); fahrzeug.Bewege(); // Ausgabe: Das Auto fährt. fahrzeug = new Fahrrad(); fahrzeug.Bewege(); // Ausgabe: Das Fahrrad rollt.   Delegate​  Ein Delegate ist ein typisierter Verweis auf eine oder mehrere Methoden. Er ermöglicht es, Methoden als Objekte zu behandeln.  // Delegate-Definition: public delegate int Operation(int a, int b); public class Rechner { public int Addieren(int a, int b) =&gt; a + b; public int Multiplizieren(int a, int b) =&gt; a * b; } // Anwendung: var rechner = new Rechner(); // Zuweisung der Methode an den Delegate: Operation op = rechner.Addieren; Console.WriteLine(op(3, 4)); // Ausgabe: 7 // Delegate neu zuweisen: op = rechner.Multiplizieren; Console.WriteLine(op(3, 4)); // Ausgabe: 12   ","version":"Next","tagName":"h3"},{"title":"Generic Collections​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#generic-collections","content":" Microsoft Docs - Generic collections  A collection is used to group related objects. Unlike an array, it is dynamic and can also group objects. A collection can grow and shrink to accommodate any number of objects. Collection classes are organized into namespaces and contain built in methods for processing elements within the collection.  The for statement and the foreach statement are used to iterate through collections. Since a collection is a class you must first declare an instance of the class before you can add elements to that collection.  List​  A list is similar to an array, but the elements in a list can be inserted and removed dynamically. The C# generic collection List&lt;T&gt; class requires all elements be of the same type T.  using System; using System.Collections.Generic; public class Program { public static void Main() { // Erstellen einer Liste vom Typ string List&lt;string&gt; namen = new List&lt;string&gt;(); // Hinzufügen von Elementen namen.Add(&quot;Anna&quot;); namen.Add(&quot;Bernd&quot;); namen.Add(&quot;Clara&quot;); // Einfügen eines Elements an einem bestimmten Index (Index 1) namen.Insert(1, &quot;Dieter&quot;); // Überprüfen, ob ein bestimmter Wert existiert bool enthältClara = namen.Contains(&quot;Clara&quot;); Console.WriteLine($&quot;Enthält Clara? {enthältClara}&quot;); // Entfernen eines Elements per Wert namen.Remove(&quot;Bernd&quot;); // Entfernen eines Elements per Index (erstes Element) namen.RemoveAt(0); // Iteration über die Liste Console.WriteLine(&quot;Aktuelle Liste:&quot;); foreach (string name in namen) { Console.WriteLine(name); } // Sortieren der Liste namen.Sort(); Console.WriteLine(&quot;Sortierte Liste:&quot;); namen.ForEach(Console.WriteLine); // Liste umkehren namen.Reverse(); Console.WriteLine(&quot;Umgekehrte Liste:&quot;); namen.ForEach(Console.WriteLine); // Zugriff auf ein Element per Index (Beispiel: erstes Element, falls vorhanden) if (namen.Count &gt; 0) { Console.WriteLine($&quot;Erstes Element: {namen[0]}&quot;); } // Suchen eines Elements (erstes Element, das mit 'C' beginnt) string nameMitC = namen.Find(name =&gt; name.StartsWith(&quot;C&quot;)); Console.WriteLine($&quot;Erster Name, der mit 'C' beginnt: {nameMitC}&quot;); // Finden aller Elemente, die einer Bedingung entsprechen (z.B. Länge &gt; 4) List&lt;string&gt; langeNamen = namen.FindAll(name =&gt; name.Length &gt; 4); Console.WriteLine(&quot;Namen mit mehr als 4 Zeichen:&quot;); langeNamen.ForEach(Console.WriteLine); // Umwandeln der Liste in ein Array string[] namenArray = namen.ToArray(); Console.WriteLine(&quot;Array-Ausgabe:&quot;); foreach (var n in namenArray) { Console.WriteLine(n); } // Leeren der Liste namen.Clear(); Console.WriteLine($&quot;Anzahl der Elemente nach Clear: {namen.Count}&quot;); } }   Linked List​  Eine Linked List ist eine lineare Datensammlung, bei der die Elemente (Knoten) nicht zusammenhängend im Speicher abgelegt sind. Jeder Knoten enthält einen Wert und einen Verweis auf den nächsten Knoten in der Liste. Dies unterscheidet sie von Arrays, bei denen die Elemente direkt aufeinander folgen.  Vorteile  Flexibilität bei der Größe: Linked Lists können dynamisch wachsen oder schrumpfen, da Knoten bei Bedarf hinzugefügt oder entfernt werden können.Effizientes Einfügen und Entfernen: Das Einfügen oder Entfernen von Elementen an beliebiger Stelle ist in der Regel schneller als bei Arrays, da keine Elemente verschoben werden müssen.  Nachteile  Zugriffszeit: Der Zugriff auf ein Element an einer bestimmten Position kann länger dauern als bei Arrays, da die Liste vom Anfang bis zum gewünschten Element durchlaufen werden muss.Zusätzlicher Speicherbedarf: Jeder Knoten benötigt zusätzlichen Speicher für den Verweis auf den nächsten Knoten.  using System; using System.Collections.Generic; public class Program { public static void Main() { // Erstellen einer LinkedList vom Typ string LinkedList&lt;string&gt; linkedList = new LinkedList&lt;string&gt;(); // Hinzufügen von Elementen linkedList.AddLast(&quot;Anna&quot;); // Element am Ende hinzufügen linkedList.AddLast(&quot;Bernd&quot;); linkedList.AddFirst(&quot;Clara&quot;); // Element am Anfang hinzufügen // Ausgabe der initialen LinkedList Console.WriteLine(&quot;Initiale LinkedList:&quot;); foreach (string item in linkedList) { Console.WriteLine(item); } // Suchen eines Knotens mit einem bestimmten Wert LinkedListNode&lt;string&gt; nodeBernd = linkedList.Find(&quot;Bernd&quot;); if (nodeBernd != null) { // Hinzufügen eines Elements nach einem bekannten Knoten linkedList.AddAfter(nodeBernd, &quot;Dieter&quot;); // Hinzufügen eines Elements vor einem bekannten Knoten linkedList.AddBefore(nodeBernd, &quot;Eva&quot;); } // Entfernen eines Elements per Wert linkedList.Remove(&quot;Clara&quot;); // Entfernen des ersten und letzten Knotens linkedList.RemoveFirst(); linkedList.RemoveLast(); // Ausgabe der LinkedList nach Änderungen Console.WriteLine(&quot;\\nLinkedList nach Änderungen:&quot;); foreach (string item in linkedList) { Console.WriteLine(item); } // Ausgabe der Anzahl der Elemente Console.WriteLine($&quot;\\nAnzahl der Elemente: {linkedList.Count}&quot;); // Iteration über die LinkedList mittels Knotenreferenzen Console.WriteLine(&quot;\\nIteration mit LinkedListNode&lt;T&gt;:&quot;); for (LinkedListNode&lt;string&gt; node = linkedList.First; node != null; node = node.Next) { Console.WriteLine(node.Value); } } }   SortedList​  A sorted list is a collection of key/value pairs that are automatically sorted by key. A key can be used to access its corresponding value in the sorted list. The C# generic collection SortedList&lt;K, V&gt; class requires all element key/value pairs to be of the same type K, V. Duplicate keys are not permitted, which ensures that every key/value pair is unique.  using System; using System.Collections.Generic; public class Program { public static void Main() { // Erstellen einer SortedList (sortiert nach Schlüsseln) SortedList&lt;string, int&gt; sortedList = new SortedList&lt;string, int&gt;(); // Hinzufügen von Schlüssel-Wert-Paaren sortedList.Add(&quot;Clara&quot;, 30); sortedList.Add(&quot;Anna&quot;, 25); sortedList.Add(&quot;Bernd&quot;, 35); // Zugriff auf ein Element per Schlüssel Console.WriteLine($&quot;Anna ist {sortedList[&quot;Anna&quot;]} Jahre alt.&quot;); // Iteration über die SortedList (automatisch sortiert nach Schlüssel) Console.WriteLine(&quot;\\nSortedList Einträge:&quot;); foreach (KeyValuePair&lt;string, int&gt; pair in sortedList) { Console.WriteLine($&quot;{pair.Key}: {pair.Value}&quot;); } // Entfernen eines Elements per Schlüssel sortedList.Remove(&quot;Bernd&quot;); // Überprüfen, ob ein Schlüssel existiert if (sortedList.ContainsKey(&quot;Clara&quot;)) { Console.WriteLine(&quot;\\nClara ist in der SortedList vorhanden.&quot;); } // Aktualisieren eines Wertes sortedList[&quot;Anna&quot;] = 26; // Zugriff auf Schlüssel und Werte als separate Sammlungen IList&lt;string&gt; keys = sortedList.Keys; IList&lt;int&gt; values = sortedList.Values; Console.WriteLine(&quot;\\nSchlüssel:&quot;); foreach (var key in keys) { Console.WriteLine(key); } Console.WriteLine(&quot;\\nWerte:&quot;); foreach (var value in values) { Console.WriteLine(value); } // Anzahl der Elemente in der SortedList Console.WriteLine($&quot;\\nAnzahl der Elemente: {sortedList.Count}&quot;); // Löschen aller Einträge sortedList.Clear(); Console.WriteLine($&quot;\\nAnzahl der Elemente nach Clear: {sortedList.Count}&quot;); } }   Dictionary​  A dictionary is a collection of unique key/value pairs where a key is used to access the corresponding value. Dictionaries are used in database indexing, cache implementations, and so on. The C# generic collection Dictionary&lt;K, V&gt; class requires all key/value pairs be of the same type K, V. Duplicate keys are not permitted to ensure that every key/value pair is unique.  using System; using System.Collections.Generic; public class Program { public static void Main() { // Erstellen eines Dictionaries (Schlüssel: string, Wert: int) Dictionary&lt;string, int&gt; dictionary = new Dictionary&lt;string, int&gt;(); // Hinzufügen von Schlüssel-Wert-Paaren dictionary.Add(&quot;Anna&quot;, 25); dictionary.Add(&quot;Bernd&quot;, 35); dictionary.Add(&quot;Clara&quot;, 30); // Zugriff auf ein Element per Schlüssel Console.WriteLine($&quot;Anna ist {dictionary[&quot;Anna&quot;]} Jahre alt.&quot;); // Iteration über alle Elemente im Dictionary Console.WriteLine(&quot;\\nDictionary Einträge:&quot;); foreach (KeyValuePair&lt;string, int&gt; pair in dictionary) { Console.WriteLine($&quot;{pair.Key}: {pair.Value}&quot;); } // Überprüfen, ob ein bestimmter Schlüssel existiert if (dictionary.ContainsKey(&quot;Bernd&quot;)) { Console.WriteLine(&quot;\\nBernd ist im Dictionary vorhanden.&quot;); } // Aktualisieren eines Wertes über den Schlüssel dictionary[&quot;Clara&quot;] = 31; // Iteration über alle Schlüssel Console.WriteLine(&quot;\\nSchlüssel im Dictionary:&quot;); foreach (string key in dictionary.Keys) { Console.WriteLine(key); } // Iteration über alle Werte Console.WriteLine(&quot;\\nWerte im Dictionary:&quot;); foreach (int value in dictionary.Values) { Console.WriteLine(value); } // Entfernen eines Elements per Schlüssel dictionary.Remove(&quot;Bernd&quot;); // Ausgabe der Anzahl der Elemente im Dictionary Console.WriteLine($&quot;\\nAnzahl der Elemente: {dictionary.Count}&quot;); // Löschen aller Einträge im Dictionary dictionary.Clear(); Console.WriteLine($&quot;Anzahl der Elemente nach Clear: {dictionary.Count}&quot;); } }   SortedList vs Dictonary  Verwenden Sie eine SortedList, wenn: Sie häufig auf Elemente über den Index zugreifen müssen. Verwenden Sie ein Dictionary, wenn: Sie hauptsächlich über den Schlüssel auf Elemente zugreifen.Performance beim Einfügen und Entfernen wichtig ist.  Stack​  A stack is a Last In, First Out (LIFO) collection of elements where the last element that goes into the stack will be the first element that comes out.  Inserting an element onto a stack is called pushing. Deleting an element from a stack is called popping. Pushing and popping can be performed only at the top of the stack.  Stacks can be used to create undo-redo functionalities, parsing expressions (infix to postfix/prefix conversion), and much more. The C# generic collection Stack&lt;T&gt; class requires all elements to be of the same type T.  using System; using System.Collections.Generic; public class Program { public static void Main() { // Erstellen eines Stacks vom Typ int Stack&lt;int&gt; stack = new Stack&lt;int&gt;(); // Hinzufügen von Elementen (Push) stack.Push(10); stack.Push(20); stack.Push(30); // Ausgabe der Anzahl der Elemente Console.WriteLine($&quot;Anzahl der Elemente: {stack.Count}&quot;); // Zugriff auf das oberste Element ohne es zu entfernen (Peek) Console.WriteLine($&quot;Oberstes Element (Peek): {stack.Peek()}&quot;); // Entfernen des obersten Elements (Pop) Console.WriteLine($&quot;Entferntes Element (Pop): {stack.Pop()}&quot;); // Ausgabe des aktuellen Stacks Console.WriteLine(&quot;\\nStack-Inhalt nach Pop:&quot;); foreach (int item in stack) { Console.WriteLine(item); } // Verwenden von TryPeek und TryPop if (stack.TryPeek(out int topElement)) { Console.WriteLine($&quot;\\nOberstes Element (TryPeek): {topElement}&quot;); } if (stack.TryPop(out int poppedElement)) { Console.WriteLine($&quot;Entferntes Element (TryPop): {poppedElement}&quot;); } // Stack leeren stack.Clear(); Console.WriteLine($&quot;\\nAnzahl der Elemente nach Clear: {stack.Count}&quot;); } }   Queue​  HashSet​  ","version":"Next","tagName":"h3"},{"title":"Dynamic Types​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#dynamic-types","content":" Typ\tBeschreibungobject\tDer Basistyp für alle Datentypen in C#. Kann alles speichern. dynamic\tTyp wird erst zur Laufzeit bestimmt. Flexibler, aber unsicherer. var\tCompiler erkennt den Typ automatisch aus der Initialisierung.  object object obj = 42; obj = &quot;Hallo&quot;; // Erlaubt (aber keine Typensicherheit)   dynamic dynamic d = 10; d = &quot;Text&quot;; // Erlaubt, aber erst zur Laufzeit überprüft!   var var x = 10; // Compiler erkennt `int` var y = &quot;Hallo&quot;; // Compiler erkennt `string`   ","version":"Next","tagName":"h3"},{"title":"Type Conversion​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#type-conversion","content":" Microsoft Docs - Casting and Type Conversions  Convert.ToBoolean(x); // Converts a type to a Boolean value Convert.ToByte(x); // Converts a type to a byte Convert.ToChar(x); // Converts a type to a single Unicode character Convert.ToDateTime(x); // Converts a type (integer or string type) to date-time structures Convert.ToDecimal(x); // Converts a floating point or integer type to a decimal type Convert.ToDouble(x); // Converts a type to a double type Convert.ToInt16(x); // Converts a type to a 16-bit integer Convert.ToInt32(x); // Converts a type to a 32-bit integer Convert.ToInt64(x); // Converts a type to a 64-bit integer Convert.ToSbyte(x); // Converts a type to a signed byte type Convert.ToSingle(x); // Converts a type to a small floating point number Convert.ToString(x); // Converts a type to a string Convert.ToType(x); // Converts a type to a specified type Convert.ToUInt16(x); // Converts a type to an unsigned int type Convert.ToUInt32(x); // Converts a type to an unsigned long type Convert.ToUInt64(x); // Converts a type to an unsigned big integer   ","version":"Next","tagName":"h3"},{"title":"Typecasting​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#typecasting","content":" Implizite Konvertierung (automatisch) Eine Umwandlung, die automatisch erfolgt, weil sie sicher ist (d. h. es geht keine Information verloren).  converting a smaller type to a larger type size char -&gt; int -&gt; long -&gt; float -&gt; double  int zahl = 42; double d = zahl; // int -&gt; double: implizite Umwandlung (widening conversion)   Explizite Konvertierung (manuell) Eine Umwandlung, bei der der Programmierer ausdrücklich angibt, dass ein Typ in einen anderen umgewandelt werden soll. Dies ist oft erforderlich, wenn Daten verloren gehen können oder die Konvertierung nicht automatisch durchgeführt wird (narrowing conversion).  converting a larger type to a smaller size type: double -&gt; float -&gt; long -&gt; int -&gt; char  double pi = 3.14159; int ganzZahl = (int)pi; // double -&gt; int: explizite Umwandlung, Nachkommabereich geht verloren   Microsoft C# Spezifikationen - Explizite Konvertierung  ","version":"Next","tagName":"h3"},{"title":"Type-Testoperatoren​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#type-testoperatoren","content":" is Operator​  Prüft, ob ein Objekt zu einem bestimmten Typ kompatibel ist.  if (obj is string) { Console.WriteLine(&quot;obj ist ein String.&quot;); }   as Operator​  Versucht, ein Objekt in einen bestimmten Typ zu konvertieren, und gibt dabei null zurück, falls die Konvertierung nicht möglich ist.  SomeType x = y as SomeType; if (x != null) { // Do something }   ","version":"Next","tagName":"h3"},{"title":"Operatoren​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#operatoren","content":" Microsoft Language Specification - Operators and Expressions  ","version":"Next","tagName":"h2"},{"title":"Arithmetic Operators​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#arithmetic-operators","content":" float myFloat = 0; myFloat = 3 + 2; // Addition =&gt; 5 myFloat = 3 - 2; // Subtraction =&gt; 1 myFloat = 3 * 2; // Multiplication =&gt; 6 myFloat = 3 / 2; // Division =&gt; 1 myFloat = 3 % 2; // Modulus =&gt; 1 /* Notice that the division sign gives an incorrect result. This is because it operates on two integer values and will therefore round the result and return an integer. To get the correct value, one of the numbers needs to be converted into a floating-point number. */ myFloat = 3 / (float) 2; // 1.5   ","version":"Next","tagName":"h3"},{"title":"Combined Assignment Operators​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#combined-assignment-operators","content":" float myFloat = 0; myFloat += 2; // myNumber = myNumber + 2 myFloat -= 2; // myNumber = myNumber - 2 myFloat *= 2; // myNumber = myNumber * 2 myFloat /= 2; // myNumber = myNumber / 2 myFloat %= 2; // myNumber = myNumber % 2   ","version":"Next","tagName":"h3"},{"title":"Comparison Operators​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#comparison-operators","content":" Console.WriteLine($&quot;3 == 2? {3 == 2}&quot;); // =&gt; false Console.WriteLine($&quot;3 != 2? {3 != 2}&quot;); // =&gt; true Console.WriteLine($&quot;3 &gt; 2? {3 &gt; 2}&quot;); // =&gt; true Console.WriteLine($&quot;3 &lt; 2? {3 &lt; 2}&quot;); // =&gt; false Console.WriteLine($&quot;2 &lt;= 2? {2 &lt;= 2}&quot;); // =&gt; true Console.WriteLine($&quot;2 &gt;= 2? {2 &gt;= 2}&quot;); // =&gt; true   ","version":"Next","tagName":"h3"},{"title":"Logical Operators​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#logical-operators","content":" bool myBool; myBool = (true &amp;&amp; false); // Logical AND =&gt; (false) myBool = (true || false); // Logical OR =&gt; (true) myBool = !(true); // Logical NOT =&gt; (false) Console.WriteLine(myBool);   ","version":"Next","tagName":"h3"},{"title":"Bitwise Operators​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#bitwise-operators","content":" int myInteger; // The bitwise operators can manipulate individual bits inside an integer. myInteger = 5 &amp; 4; // and (0b101 &amp; 0b100 = 0b100 = 4) myInteger = 5 | 4; // or (0b101 | 0b100 = 0b101 = 5) myInteger = 5 ^ 4; // xor (0b101 ^ 0b100 = 0b001 = 1) myInteger = 4 &lt;&lt; 1; // left shift (0b100 &lt;&lt; 1 = 0b1000 = 8) myInteger = 4 &gt;&gt; 1; // right shift (0b100 &gt;&gt; 1 = 0b10 = 2) myInteger = ~ 4; // invert (~0b00000100 = 0b11111011 = -5) // These bitwise operators have shorthand assignment operators, just like the arithmetic operators. myInteger = 5; myInteger &amp;= 4; // and (0b101 &amp; 0b100 = 0b100 = 4) myInteger = 5; myInteger |= 4; // or (0b101 | 0b100 = 0b101 = 5) myInteger = 5; myInteger ^= 4; // xor (0b101 ^ 0b100 = 0b001 = 1) myInteger = 5; myInteger &lt;&lt;= 1; // left shift (0b101 &lt;&lt; 1 = 0b1010 = 10) myInteger = 5; myInteger &gt;&gt;= 1; // right shift (0b101 &gt;&gt; 1 = 0b10 = 2)   ","version":"Next","tagName":"h3"},{"title":"Operator Precedents​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#operator-precedents","content":" /* - parentheses () - Postfix Increment and Decrement ++, -- - Prefix Increment, Decrement and Unary ++, --, +, -, !, ~ - Multiplicative *, /, % - Additive +, - - Shift &lt;&lt;, &gt;&gt; - Relational &lt;, &lt;=, &gt;, &gt;= - Equality ==, != - Bitwise AND &amp; - Bitwise XOR ^ - Bitwise OR | - Logical AND &amp;&amp; - Logical OR || - Ternary ? : - Assignment =, +=, -=, *=, /=, %=, &amp;=, |=, ^=, &lt;&lt;=, &gt;&gt;= */   ","version":"Next","tagName":"h3"},{"title":"Statements​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#statements","content":" Microsoft Docs - Statements  ","version":"Next","tagName":"h2"},{"title":"if-Statements​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#if-statements","content":" if...else if...else int time = 22; if (time &lt; 10) { Console.WriteLine(&quot;Good morning.&quot;); } else if (time &lt; 20) { Console.WriteLine(&quot;Good day.&quot;); } else { Console.WriteLine(&quot;Good evening.&quot;); }   Ternary Operators // A simple if/else can be written as follows // &lt;condition&gt; ? &lt;true&gt; : &lt;false&gt; int toCompare = 17; string isTrue = toCompare == 17 ? &quot;True&quot; : &quot;False&quot;;   ","version":"Next","tagName":"h3"},{"title":"switch case​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#switch-case","content":" // A switch works with the byte, short, char, and int data types. // It also works with enumerated types (discussed in Enum Types), // the String class, and a few special classes that wrap // primitive types: Character, Byte, Short, and Integer. int month = 3; string monthString; switch (month) { case 1: monthString = &quot;January&quot;; break; case 2: monthString = &quot;February&quot;; break; case 3: monthString = &quot;March&quot;; break; // You can assign more than one case to an action // But you can't add an action without a break before another case // (if you want to do this, you would have to explicitly add a goto case x case 6: case 7: case 8: monthString = &quot;Summer time!!&quot;; break; default: monthString = &quot;Some other month&quot;; break; }   ","version":"Next","tagName":"h3"},{"title":"while, do...while​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#while-dowhile","content":" While loop int fooWhile = 0; while (fooWhile &lt; 100) { // Iterated 100 times, fooWhile 0-&gt;99 fooWhile++; }   Do...While loop // Do While Loop int fooDoWhile = 0; do { // Start iteration 100 times, fooDoWhile 0-&gt;99 if (false) { continue; // skip the current iteration } fooDoWhile++; if (fooDoWhile == 50) { break; // breaks from the loop completely } } while (fooDoWhile &lt; 100);   ","version":"Next","tagName":"h3"},{"title":"for-loop​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#for-loop","content":" For loop for (int i = 0; i &lt; 10; i++) { Console.WriteLine($&quot;value of i: {i}&quot;); }   Nested loops for (int i = 0; i &lt; 10; i++) { for (int j = 0; j &lt; 10; j++) { Console.WriteLine($&quot;i: {i}, j: {j}&quot;); } }   ","version":"Next","tagName":"h3"},{"title":"foreach-loop​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#foreach-loop","content":" Foreach, in ArrayList numbers = new ArrayList(); numbers.Add(1); numbers.Add(2); numbers.Add(3); Console.WriteLine($&quot;Count: {numbers.Count}&quot;); foreach (int number in numbers) { Console.Write(number + &quot; &quot;); }   ","version":"Next","tagName":"h3"},{"title":"return Statement​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#return-statement","content":" static int Add(int a, int b) { return a + b; } static void Main(string[] args) { Console.WriteLine(Add(1, 2)); return; }   ","version":"Next","tagName":"h3"},{"title":"yield Statement​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#yield-statement","content":" Das yield-Schlüsselwort in C# wird in Iteratoren verwendet und ermöglicht die schrittweise Bereitstellung von Werten, ohne dass eine gesamte Sammlung im Speicher gehalten werden muss. Es vereinfacht die Implementierung von Enumeratoren und verbessert die Speicher- sowie Performance-Effizienz.  Es gibt zwei Varianten:  yield return – Gibt einen einzelnen Wert zurück und pausiert die Methode, bis der nächste Wert angefordert wird.yield break – Beendet die Iteration vorzeitig.  static IEnumerable&lt;int&gt; Range(int from, int to) { for (int i = from; i &lt; to; i++) { yield return i; } yield break; } static void Main(string[] args) { foreach (int x in Range(-10,10)) { Console.WriteLine(x); } }   yield ist besonders nützlich für große Datenmengen, Streaming-Verarbeitung und Lazy Computation.  ","version":"Next","tagName":"h3"},{"title":"checked / unchecked​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#checked--unchecked","content":" static void Main(string[] args) { int i = int.MaxValue; checked { Console.WriteLine(i + 1); } // System.OverflowException unchecked { Console.WriteLine(i + 1); } // Overflow - dies ist das default Verhalten: // auch ohne das unchecked Statement würde es zum Overflow kommen }   ","version":"Next","tagName":"h3"},{"title":"lock Statement​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#lock-statement","content":" Das lock-Statement in C# wird verwendet, um Datenraces und Konkurrenzprobleme bei der parallelen Ausführung von Threads zu vermeiden. Es sorgt dafür, dass nur ein Thread gleichzeitig auf einen kritischen Abschnitt des Codes zugreifen kann, und verhindert so Konflikte.  Das lock-Objekt Das lock-Statement verwendet ein Schlüsselobjekt, das von jedem Thread verwendet wird, um zu synchronisieren, wann ein Thread den Zugriff auf einen kritischen Abschnitt des Codes erlangen kann. Solange das lock-Objekt von einem Thread verwendet wird, kann kein andere Thread der dasselbe lock-Objekt nutzt fortfahren, sondern muss warten bis das Objekt wieder freigegben wurde.  Beispiel class Counter { private int _count = 0; private readonly object _lockObj = new object(); // Lock-Objekt public void Increment() { lock (_lockObj) { _count++; // Nur ein Thread kann diesen Abschnitt gleichzeitig betreten } } public int GetCount() { return _count; } }   ","version":"Next","tagName":"h3"},{"title":"using Statement​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#using-statement","content":" Das using-Statement in C# wird verwendet, um Ressourcen wie Datenbankverbindungen, Dateihandles oder Netzwerkverbindungen zu verwalten und sie nach Gebrauch automatisch freizugeben, sobald sie nicht mehr benötigt werden.  using stellt sicher, dass Ressourcen nach ihrer Verwendung automatisch freigegeben werden, ohne dass man explizit eine Dispose()-Methode aufrufen musst.  using (StreamReader reader = new StreamReader(&quot;datei.txt&quot;)) { string line = reader.ReadLine(); Console.WriteLine(line); } // Sobald der Block verlassen wird, wird 'reader.Dispose()' aufgerufen und die Datei wird automatisch geschlossen.   using-Direktive (Namespace)Neben dem using-Statement gibt es auch die using-Direktive, mit der du Namespaces importierst, um den Code leserlicher zu machen und die Notwendigkeit zu vermeiden, lange Namespace-Pfade zu schreiben.  ","version":"Next","tagName":"h3"},{"title":"Exception Handling​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#exception-handling","content":" static double Divide(double x, double y) { if (y == 0) { throw new DivideByZeroException(); } return x / y; } static void Main(string[] args) { try { if (args.Length != 2) { throw new Exception(&quot;Two numbers are required&quot;); } double x = double.Parse(args[0]); double y = double.Parse(args[1]); Console.WriteLine(Divide(x, y)); } catch (Exception e) { Console.WriteLine(e.Message); } finally { Console.WriteLine(&quot;Terminating!&quot;); } }   ","version":"Next","tagName":"h3"},{"title":"Classes & Methods​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#classes--methods","content":" ","version":"Next","tagName":"h2"},{"title":"Object-Oriented programming​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#object-oriented-programming","content":" ","version":"Next","tagName":"h2"},{"title":"Delegates​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#delegates","content":" ","version":"Next","tagName":"h2"},{"title":"Events​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#events","content":" ","version":"Next","tagName":"h2"},{"title":"Constants​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#constants","content":" ","version":"Next","tagName":"h2"},{"title":"LINQ​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#linq","content":" ","version":"Next","tagName":"h2"},{"title":"Working with Files​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#working-with-files","content":" ","version":"Next","tagName":"h2"},{"title":"String Interpolation​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#string-interpolation","content":" // {index der variablen die eingesetzt wird:FORMAT} // C - Currency; U - Universal full date/time // Ausgabe: 150,00 € Samstag, 8. Februar 2025 18:25:11 static DateTime thisDate = DateTime.Now; Console.WriteLine(&quot;{0:C} {1:U}&quot;, 150, thisDate);   using System; class Sample { enum Color {Yellow = 1, Blue, Green}; static DateTime thisDate = DateTime.Now; public static void Main() { Console.Clear(); // Format a negative integer or floating-point number in various ways. Console.WriteLine(&quot;Standard Numeric Format Specifiers&quot;); Console.WriteLine( &quot;(C) Currency: . . . . . . . . {0:C}\\n&quot; + &quot;(D) Decimal:. . . . . . . . . {0:D}\\n&quot; + &quot;(E) Scientific: . . . . . . . {1:E}\\n&quot; + &quot;(F) Fixed point:. . . . . . . {1:F}\\n&quot; + &quot;(G) General:. . . . . . . . . {0:G}\\n&quot; + &quot; (default):. . . . . . . . {0} (default = 'G')\\n&quot; + &quot;(N) Number: . . . . . . . . . {0:N}\\n&quot; + &quot;(P) Percent:. . . . . . . . . {1:P}\\n&quot; + &quot;(R) Round-trip: . . . . . . . {1:R}\\n&quot; + &quot;(X) Hexadecimal:. . . . . . . {0:X}\\n&quot;, -123, -123.45f); // Format the current date in various ways. Console.WriteLine(&quot;Standard DateTime Format Specifiers&quot;); Console.WriteLine( &quot;(d) Short date: . . . . . . . {0:d}\\n&quot; + &quot;(D) Long date:. . . . . . . . {0:D}\\n&quot; + &quot;(t) Short time: . . . . . . . {0:t}\\n&quot; + &quot;(T) Long time:. . . . . . . . {0:T}\\n&quot; + &quot;(f) Full date/short time: . . {0:f}\\n&quot; + &quot;(F) Full date/long time:. . . {0:F}\\n&quot; + &quot;(g) General date/short time:. {0:g}\\n&quot; + &quot;(G) General date/long time: . {0:G}\\n&quot; + &quot; (default):. . . . . . . . {0} (default = 'G')\\n&quot; + &quot;(M) Month:. . . . . . . . . . {0:M}\\n&quot; + &quot;(R) RFC1123:. . . . . . . . . {0:R}\\n&quot; + &quot;(s) Sortable: . . . . . . . . {0:s}\\n&quot; + &quot;(u) Universal sortable: . . . {0:u} (invariant)\\n&quot; + &quot;(U) Universal full date/time: {0:U}\\n&quot; + &quot;(Y) Year: . . . . . . . . . . {0:Y}\\n&quot;, thisDate); // Format a Color enumeration value in various ways. Console.WriteLine(&quot;Standard Enumeration Format Specifiers&quot;); Console.WriteLine( &quot;(G) General:. . . . . . . . . {0:G}\\n&quot; + &quot; (default):. . . . . . . . {0} (default = 'G')\\n&quot; + &quot;(F) Flags:. . . . . . . . . . {0:F} (flags or integer)\\n&quot; + &quot;(D) Decimal number: . . . . . {0:D}\\n&quot; + &quot;(X) Hexadecimal:. . . . . . . {0:X}\\n&quot;, Color.Green); } }   This code example produces the following results: /* Standard Numeric Format Specifiers (C) Currency: . . . . . . . . ($123.00) (D) Decimal:. . . . . . . . . -123 (E) Scientific: . . . . . . . -1.234500E+002 (F) Fixed point:. . . . . . . -123.45 (G) General:. . . . . . . . . -123 (default):. . . . . . . . -123 (default = 'G') (N) Number: . . . . . . . . . -123.00 (P) Percent:. . . . . . . . . -12,345.00 % (R) Round-trip: . . . . . . . -123.45 (X) Hexadecimal:. . . . . . . FFFFFF85 Standard DateTime Format Specifiers (d) Short date: . . . . . . . 6/26/2004 (D) Long date:. . . . . . . . Saturday, June 26, 2004 (t) Short time: . . . . . . . 8:11 PM (T) Long time:. . . . . . . . 8:11:04 PM (f) Full date/short time: . . Saturday, June 26, 2004 8:11 PM (F) Full date/long time:. . . Saturday, June 26, 2004 8:11:04 PM (g) General date/short time:. 6/26/2004 8:11 PM (G) General date/long time: . 6/26/2004 8:11:04 PM (default):. . . . . . . . 6/26/2004 8:11:04 PM (default = 'G') (M) Month:. . . . . . . . . . June 26 (R) RFC1123:. . . . . . . . . Sat, 26 Jun 2004 20:11:04 GMT (s) Sortable: . . . . . . . . 2004-06-26T20:11:04 (u) Universal sortable: . . . 2004-06-26 20:11:04Z (invariant) (U) Universal full date/time: Sunday, June 27, 2004 3:11:04 AM (Y) Year: . . . . . . . . . . June, 2004 Standard Enumeration Format Specifiers (G) General:. . . . . . . . . Green (default):. . . . . . . . Green (default = 'G') (F) Flags:. . . . . . . . . . Green (flags or integer) (D) Decimal number: . . . . . 3 (X) Hexadecimal:. . . . . . . 00000003 */   The snippet below examplifies how to format strings in a table format. using System; class Program { static void Main(string[] args) { string headers = $&quot;{&quot;First Name&quot;, -20} {&quot;Last Name&quot;, -20} {&quot;Value&quot;, -20} {&quot;Time&quot;, -20}&quot;; string line\t= $&quot;{&quot;Luiz&quot;, -20} {&quot;Parente&quot;, -20} {20, -20:C} {DateTime.Now, -20:d}&quot;; Console.WriteLine(headers); Console.WriteLine(line); } } /* This code example produces the following results: First Name Last Name Value Time Luiz Parente $20.00 2/9/2020 */   Source  ","version":"Next","tagName":"h2"},{"title":"Keywords​","type":1,"pageTitle":"C#","url":"/my-documentation/docs/Resourcen/Quick-References/CSharp-quickref#keywords","content":"","version":"Next","tagName":"h2"}],"options":{"id":"default"}}